#include "circom.hpp"
#include "calcwit.hpp"
#define NSignals 650020
#define NComponents 11358
#define NOutputs 0
#define NInputs 29
#define NVars 113828
#define NPublic 1
#define __P__ "21888242871839275222246405745257275088548364400416034343698204186575808495617"

/*
BatchTreeUpdate
batchLevels=1
levels=20
zeroBatchLeaf=-10037691542416115361557626753429450358510605238214250777413353363815611727743
*/
void BatchTreeUpdate_342dddbbcb8dd32b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_7[1];
    FrElement _tmp_6[1];
    FrElement _tmp_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_12[1];
    FrElement i_1[1];
    FrElement _sigValue_14[1];
    FrElement _sigValue_15[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_14[1];
    FrElement _tmp_13[1];
    FrElement _tmp_15[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_27[1];
    FrElement i_2[1];
    FrElement _sigValue_18[1];
    FrElement _tmp_31[1];
    FrElement _tmp_30[1];
    FrElement _tmp_34[1];
    FrElement _tmp_37[1];
    FrElement level[1];
    FrElement _num_21[1];
    FrElement _tmp_38[1];
    FrElement _tmp_39[1];
    FrElement _tmp_40[1];
    FrElement _tmp_42[1];
    FrElement _sigValue_19[1];
    FrElement _tmp_43[1];
    FrElement _sigValue_20[1];
    FrElement _tmp_45[1];
    FrElement _tmp_44[1];
    FrElement _tmp_46[1];
    FrElement _tmp_47[1];
    FrElement _tmp_48[1];
    FrElement _tmp_50[1];
    FrElement _tmp_49[1];
    FrElement _tmp_51[1];
    FrElement _sigValue_21[1];
    FrElement _sigValue_22[1];
    FrElement _sigValue_23[1];
    FrElement _sigValue_24[1];
    FrElement _sigValue_25[1];
    FrElement _tmp_55[1];
    FrElement i_3[1];
    FrElement _sigValue_26[1];
    FrElement _tmp_57[1];
    FrElement _tmp_56[1];
    FrElement _tmp_58[1];
    int _compIdx;
    int _oldRoot_sigIdx_;
    int _oldRoot_sigIdx__1;
    int _compIdx_1;
    int _newRoot_sigIdx_;
    int _newRoot_sigIdx__1;
    int _compIdx_2;
    int _pathIndices_sigIdx_;
    int _pathIndices_sigIdx__1;
    int _compIdx_3;
    int _hashes_sigIdx_;
    int _offset_13;
    int _hashes_sigIdx__1;
    int _offset_15;
    int _compIdx_4;
    int _instances_sigIdx_;
    int _offset_17;
    int _instances_sigIdx__1;
    int _offset_19;
    int _compIdx_5;
    int _blocks_sigIdx_;
    int _offset_21;
    int _blocks_sigIdx__1;
    int _offset_23;
    int _compIdx_6;
    int _hashes_sigIdx__2;
    int _offset_29;
    int _offset_31;
    int _compIdx_7;
    int _instances_sigIdx__2;
    int _offset_33;
    int _offset_35;
    int _compIdx_8;
    int _blocks_sigIdx__2;
    int _offset_37;
    int _offset_39;
    int _argsHash_sigIdx_;
    int _compIdx_9;
    int _out_sigIdx_;
    int _compIdx_10;
    int _offset_48;
    int _inputs_sigIdx_;
    int _offset_49;
    int _offset_51;
    int _compIdx_11;
    int _offset_53;
    int _inputs_sigIdx__1;
    int _offset_54;
    int _offset_56;
    int _compIdx_12;
    int _offset_58;
    int _inputs_sigIdx__2;
    int _offset_59;
    int _offset_61;
    int _compIdx_13;
    int _offset_67;
    int _inputs_sigIdx__3;
    int _offset_68;
    int _offset_70;
    int _compIdx_14;
    int _offset_72;
    int _inputs_sigIdx__4;
    int _offset_73;
    int _offset_75;
    int _compIdx_15;
    int _offset_77;
    int _inputs_sigIdx__5;
    int _offset_78;
    int _offset_80;
    int _compIdx_16;
    int _offset_92;
    int _ins_sigIdx_;
    int _offset_94;
    int _compIdx_17;
    int _offset_98;
    int _out_sigIdx__1;
    int _compIdx_18;
    int _offset_104;
    int _ins_sigIdx__1;
    int _offset_106;
    int _compIdx_19;
    int _offset_110;
    int _out_sigIdx__2;
    int _compIdx_20;
    int _offset_122;
    int _ins_sigIdx__2;
    int _offset_124;
    int _compIdx_21;
    int _offset_128;
    int _out_sigIdx__3;
    int _compIdx_22;
    int _offset_130;
    int _outs_sigIdx_;
    int _offset_132;
    int _compIdx_23;
    int _oldRoot_sigIdx__2;
    int _compIdx_24;
    int _newRoot_sigIdx__2;
    int _compIdx_25;
    int _leaf_sigIdx_;
    int _compIdx_26;
    int _offset_140;
    int _outs_sigIdx__1;
    int _offset_141;
    int _compIdx_27;
    int _pathIndices_sigIdx__2;
    int _compIdx_28;
    int _pathElements_sigIdx_;
    int _offset_146;
    int _pathElements_sigIdx__1;
    int _offset_148;
    int _compIdx_29;
    int _pathElements_sigIdx__2;
    int _offset_154;
    int _offset_156;
    Circom_Sizes _sigSizes_hashes;
    Circom_Sizes _sigSizes_hashes_1;
    Circom_Sizes _sigSizes_instances;
    Circom_Sizes _sigSizes_instances_1;
    Circom_Sizes _sigSizes_blocks;
    Circom_Sizes _sigSizes_blocks_1;
    Circom_Sizes _sigSizes_hashes_2;
    Circom_Sizes _sigSizes_instances_2;
    Circom_Sizes _sigSizes_blocks_2;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_inputs;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_inputs_1;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_inputs_2;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_inputs_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_inputs_4;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_inputs_5;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_ins;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_ins_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _sigSizes_ins_2;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_outs;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_outs_1;
    Circom_Sizes _sigSizes_pathElements;
    Circom_Sizes _sigSizes_pathElements_1;
    Circom_Sizes _sigSizes_pathElements_2;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _ter;
    PFrElement _loopCond_5;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_12[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_27[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_2[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_37[0]), ctx->circuit->constants +0);
    Fr_copy(&(level[0]), ctx->circuit->constants +3);
    Fr_copy(&(_num_21[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_55[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_3[0]), ctx->circuit->constants +1);
    _oldRoot_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0xf816cb685519c2c2LL /* oldRoot */);
    _newRoot_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x40af3afc80583bf9LL /* newRoot */);
    _pathIndices_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    _hashes_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x3ea12ce701f4b39dLL /* hashes */);
    _instances_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0xe05feb62c2f86b13LL /* instances */);
    _blocks_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x63ac029b9221d5e3LL /* blocks */);
    _argsHash_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x6ee8ed7578757abcLL /* argsHash */);
    _pathElements_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_hashes_1 = ctx->getSignalSizes(__cIdx, 0x3ea12ce701f4b39dLL /* hashes */);
    _sigSizes_instances_1 = ctx->getSignalSizes(__cIdx, 0xe05feb62c2f86b13LL /* instances */);
    _sigSizes_blocks_1 = ctx->getSignalSizes(__cIdx, 0x63ac029b9221d5e3LL /* blocks */);
    _sigSizes_pathElements_1 = ctx->getSignalSizes(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    /* var height = levels - batchLevels */
    /* var nLeaves = 1 << batchLevels */
    /* signal input argsHash */
    /* signal private input oldRoot */
    /* signal private input newRoot */
    /* signal private input pathIndices */
    /* signal private input pathElements[height] */
    /* signal private input hashes[nLeaves] */
    /* signal private input instances[nLeaves] */
    /* signal private input blocks[nLeaves] */
    /* component argsHasher = TreeUpdateArgsHasher(nLeaves) */
    /* argsHasher.oldRoot <== oldRoot */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _oldRoot_sigIdx_ = ctx->getSignalOffset(_compIdx, 0xf816cb685519c2c2LL /* oldRoot */);
    ctx->multiGetSignal(__cIdx, __cIdx, _oldRoot_sigIdx__1, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _oldRoot_sigIdx_, _sigValue);
    /* argsHasher.newRoot <== newRoot */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _newRoot_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0x40af3afc80583bf9LL /* newRoot */);
    ctx->multiGetSignal(__cIdx, __cIdx, _newRoot_sigIdx__1, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _newRoot_sigIdx_, _sigValue_1);
    /* argsHasher.pathIndices <== pathIndices */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _pathIndices_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0x6831dcf79ac686bbLL /* pathIndices */);
    ctx->multiGetSignal(__cIdx, __cIdx, _pathIndices_sigIdx__1, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _pathIndices_sigIdx_, _sigValue_2);
    /* for (var i = 0;i < nLeaves;i++) */
    /* argsHasher.hashes[i] <== hashes[i] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _hashes_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0x3ea12ce701f4b39dLL /* hashes */);
    _sigSizes_hashes = ctx->getSignalSizes(_compIdx_3, 0x3ea12ce701f4b39dLL /* hashes */);
    _offset_13 = _hashes_sigIdx_;
    _offset_15 = _hashes_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_13, _sigValue_3);
    /* argsHasher.instances[i] <== instances[i] */
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _instances_sigIdx_ = ctx->getSignalOffset(_compIdx_4, 0xe05feb62c2f86b13LL /* instances */);
    _sigSizes_instances = ctx->getSignalSizes(_compIdx_4, 0xe05feb62c2f86b13LL /* instances */);
    _offset_17 = _instances_sigIdx_;
    _offset_19 = _instances_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_19, _sigValue_4, 1);
    ctx->setSignal(__cIdx, _compIdx_4, _offset_17, _sigValue_4);
    /* argsHasher.blocks[i] <== blocks[i] */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _blocks_sigIdx_ = ctx->getSignalOffset(_compIdx_5, 0x63ac029b9221d5e3LL /* blocks */);
    _sigSizes_blocks = ctx->getSignalSizes(_compIdx_5, 0x63ac029b9221d5e3LL /* blocks */);
    _offset_21 = _blocks_sigIdx_;
    _offset_23 = _blocks_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_5, 1);
    ctx->setSignal(__cIdx, _compIdx_5, _offset_21, _sigValue_5);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* argsHasher.hashes[i] <== hashes[i] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
        _hashes_sigIdx__2 = ctx->getSignalOffset(_compIdx_6, 0x3ea12ce701f4b39dLL /* hashes */);
        _sigSizes_hashes_2 = ctx->getSignalSizes(_compIdx_6, 0x3ea12ce701f4b39dLL /* hashes */);
        _offset_29 = _hashes_sigIdx__2 + Fr_toInt(i)*_sigSizes_hashes_2[1];
        _offset_31 = _hashes_sigIdx__1 + Fr_toInt(i)*_sigSizes_hashes_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_29, _sigValue_6);
        /* argsHasher.instances[i] <== instances[i] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
        _instances_sigIdx__2 = ctx->getSignalOffset(_compIdx_7, 0xe05feb62c2f86b13LL /* instances */);
        _sigSizes_instances_2 = ctx->getSignalSizes(_compIdx_7, 0xe05feb62c2f86b13LL /* instances */);
        _offset_33 = _instances_sigIdx__2 + Fr_toInt(i)*_sigSizes_instances_2[1];
        _offset_35 = _instances_sigIdx__1 + Fr_toInt(i)*_sigSizes_instances_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_35, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_33, _sigValue_7);
        /* argsHasher.blocks[i] <== blocks[i] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
        _blocks_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x63ac029b9221d5e3LL /* blocks */);
        _sigSizes_blocks_2 = ctx->getSignalSizes(_compIdx_8, 0x63ac029b9221d5e3LL /* blocks */);
        _offset_37 = _blocks_sigIdx__2 + Fr_toInt(i)*_sigSizes_blocks_2[1];
        _offset_39 = _blocks_sigIdx__1 + Fr_toInt(i)*_sigSizes_blocks_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_39, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_37, _sigValue_8);
        Fr_copyn(_tmp_7, i, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_6, 1);
        Fr_lt(_tmp_8, i, (ctx->circuit->constants + 2));
        _loopCond = _tmp_8;
    }
    /* argsHash === argsHasher.out */
    ctx->multiGetSignal(__cIdx, __cIdx, _argsHash_sigIdx_, _sigValue_9, 1);
    _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x6845a68b6c712f8bLL /* argsHasher */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_9, _out_sigIdx_, _sigValue_10, 1);
    ctx->checkConstraint(__cIdx, _sigValue_9, _sigValue_10, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/circuits/BatchTreeUpdate.circom:48:2");
    /* component leaves[nLeaves] */
    /* for (var i = 0;i < nLeaves;i++) */
    /* leaves[i] = Poseidon(3) */
    /* leaves[i].inputs[0] <== instances[i] */
    _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _offset_48 = _compIdx_10;
    _inputs_sigIdx_ = ctx->getSignalOffset(_offset_48, 0x499fc592a46585f8LL /* inputs */);
    _sigSizes_inputs = ctx->getSignalSizes(_offset_48, 0x499fc592a46585f8LL /* inputs */);
    _offset_49 = _inputs_sigIdx_;
    _offset_51 = _instances_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_11, 1);
    ctx->setSignal(__cIdx, _offset_48, _offset_49, _sigValue_11);
    /* leaves[i].inputs[1] <== hashes[i] */
    _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _offset_53 = _compIdx_11;
    _inputs_sigIdx__1 = ctx->getSignalOffset(_offset_53, 0x499fc592a46585f8LL /* inputs */);
    _sigSizes_inputs_1 = ctx->getSignalSizes(_offset_53, 0x499fc592a46585f8LL /* inputs */);
    _offset_54 = _inputs_sigIdx__1 + 1*_sigSizes_inputs_1[1];
    _offset_56 = _hashes_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_56, _sigValue_12, 1);
    ctx->setSignal(__cIdx, _offset_53, _offset_54, _sigValue_12);
    /* leaves[i].inputs[2] <== blocks[i] */
    _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _offset_58 = _compIdx_12;
    _inputs_sigIdx__2 = ctx->getSignalOffset(_offset_58, 0x499fc592a46585f8LL /* inputs */);
    _sigSizes_inputs_2 = ctx->getSignalSizes(_offset_58, 0x499fc592a46585f8LL /* inputs */);
    _offset_59 = _inputs_sigIdx__2 + 2*_sigSizes_inputs_2[1];
    _offset_61 = _blocks_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_13, 1);
    ctx->setSignal(__cIdx, _offset_58, _offset_59, _sigValue_13);
    _loopCond_1 = _tmp_12;
    while (Fr_isTrue(_loopCond_1)) {
        /* leaves[i] = Poseidon(3) */
        /* leaves[i].inputs[0] <== instances[i] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _offset_67 = _compIdx_13 + Fr_toInt(i_1)*_compSizes_3[1];
        _inputs_sigIdx__3 = ctx->getSignalOffset(_offset_67, 0x499fc592a46585f8LL /* inputs */);
        _sigSizes_inputs_3 = ctx->getSignalSizes(_offset_67, 0x499fc592a46585f8LL /* inputs */);
        _offset_68 = _inputs_sigIdx__3;
        _offset_70 = _instances_sigIdx__1 + Fr_toInt(i_1)*_sigSizes_instances_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_70, _sigValue_14, 1);
        ctx->setSignal(__cIdx, _offset_67, _offset_68, _sigValue_14);
        /* leaves[i].inputs[1] <== hashes[i] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _offset_72 = _compIdx_14 + Fr_toInt(i_1)*_compSizes_4[1];
        _inputs_sigIdx__4 = ctx->getSignalOffset(_offset_72, 0x499fc592a46585f8LL /* inputs */);
        _sigSizes_inputs_4 = ctx->getSignalSizes(_offset_72, 0x499fc592a46585f8LL /* inputs */);
        _offset_73 = _inputs_sigIdx__4 + 1*_sigSizes_inputs_4[1];
        _offset_75 = _hashes_sigIdx__1 + Fr_toInt(i_1)*_sigSizes_hashes_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_75, _sigValue_15, 1);
        ctx->setSignal(__cIdx, _offset_72, _offset_73, _sigValue_15);
        /* leaves[i].inputs[2] <== blocks[i] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _offset_77 = _compIdx_15 + Fr_toInt(i_1)*_compSizes_5[1];
        _inputs_sigIdx__5 = ctx->getSignalOffset(_offset_77, 0x499fc592a46585f8LL /* inputs */);
        _sigSizes_inputs_5 = ctx->getSignalSizes(_offset_77, 0x499fc592a46585f8LL /* inputs */);
        _offset_78 = _inputs_sigIdx__5 + 2*_sigSizes_inputs_5[1];
        _offset_80 = _blocks_sigIdx__1 + Fr_toInt(i_1)*_sigSizes_blocks_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_80, _sigValue_16, 1);
        ctx->setSignal(__cIdx, _offset_77, _offset_78, _sigValue_16);
        Fr_copyn(_tmp_14, i_1, 1);
        Fr_add(_tmp_13, i_1, (ctx->circuit->constants + 1));
        Fr_copyn(i_1, _tmp_13, 1);
        Fr_lt(_tmp_15, i_1, (ctx->circuit->constants + 2));
        _loopCond_1 = _tmp_15;
    }
    /* component layers[batchLevels] */
    /* for (var level = batchLevels - 1;level >= 0;level--) */
    /* layers[level] = TreeLayer(level) */
    /* for (var i = 0;i < (1 << (level + 1));i++) */
    /* layers[level].ins[i] <== level == batchLevels - 1 ? leaves[i].out : layers[level + 1].outs[i] */
    _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0x4554e34a747022dfLL /* layers */);
    _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x4554e34a747022dfLL /* layers */);
    _offset_92 = _compIdx_16;
    _ins_sigIdx_ = ctx->getSignalOffset(_offset_92, 0x2ba002192bd4cd57LL /* ins */);
    _sigSizes_ins = ctx->getSignalSizes(_offset_92, 0x2ba002192bd4cd57LL /* ins */);
    _offset_94 = _ins_sigIdx_;
    _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
    _offset_98 = _compIdx_17;
    _out_sigIdx__1 = ctx->getSignalOffset(_offset_98, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _offset_98, _out_sigIdx__1, _sigValue_17, 1);
    ctx->setSignal(__cIdx, _offset_92, _offset_94, _sigValue_17);
    _loopCond_2 = _tmp_27;
    while (Fr_isTrue(_loopCond_2)) {
        /* layers[level].ins[i] <== level == batchLevels - 1 ? leaves[i].out : layers[level + 1].outs[i] */
        _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0x4554e34a747022dfLL /* layers */);
        _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x4554e34a747022dfLL /* layers */);
        _offset_104 = _compIdx_18;
        _ins_sigIdx__1 = ctx->getSignalOffset(_offset_104, 0x2ba002192bd4cd57LL /* ins */);
        _sigSizes_ins_1 = ctx->getSignalSizes(_offset_104, 0x2ba002192bd4cd57LL /* ins */);
        _offset_106 = _ins_sigIdx__1 + Fr_toInt(i_2)*_sigSizes_ins_1[1];
        _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
        _offset_110 = _compIdx_19 + Fr_toInt(i_2)*_compSizes_9[1];
        _out_sigIdx__2 = ctx->getSignalOffset(_offset_110, 0x19f79b1921bbcfffLL /* out */);
        ctx->multiGetSignal(__cIdx, _offset_110, _out_sigIdx__2, _sigValue_18, 1);
        ctx->setSignal(__cIdx, _offset_104, _offset_106, _sigValue_18);
        Fr_copyn(_tmp_31, i_2, 1);
        Fr_add(_tmp_30, i_2, (ctx->circuit->constants + 1));
        Fr_copyn(i_2, _tmp_30, 1);
        Fr_lt(_tmp_34, i_2, (ctx->circuit->constants + 2));
        _loopCond_2 = _tmp_34;
    }
    _loopCond_3 = _tmp_37;
    while (Fr_isTrue(_loopCond_3)) {
        /* layers[level] = TreeLayer(level) */
        /* for (var i = 0;i < (1 << (level + 1));i++) */
        Fr_copyn(i_2, _num_21, 1);
        Fr_add(_tmp_38, level, (ctx->circuit->constants + 1));
        Fr_shl(_tmp_39, (ctx->circuit->constants + 1), _tmp_38);
        Fr_lt(_tmp_40, i_2, _tmp_39);
        _loopCond_4 = _tmp_40;
        while (Fr_isTrue(_loopCond_4)) {
            /* layers[level].ins[i] <== level == batchLevels - 1 ? leaves[i].out : layers[level + 1].outs[i] */
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0x4554e34a747022dfLL /* layers */);
            _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x4554e34a747022dfLL /* layers */);
            _offset_122 = _compIdx_20 + Fr_toInt(level)*_compSizes_10[1];
            _ins_sigIdx__2 = ctx->getSignalOffset(_offset_122, 0x2ba002192bd4cd57LL /* ins */);
            _sigSizes_ins_2 = ctx->getSignalSizes(_offset_122, 0x2ba002192bd4cd57LL /* ins */);
            _offset_124 = _ins_sigIdx__2 + Fr_toInt(i_2)*_sigSizes_ins_2[1];
            Fr_eq(_tmp_42, level, (ctx->circuit->constants + 0));
            if (Fr_isTrue(_tmp_42)) {
                _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
                _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x25935d7a83a03da9LL /* leaves */);
                _offset_128 = _compIdx_21 + Fr_toInt(i_2)*_compSizes_11[1];
                _out_sigIdx__3 = ctx->getSignalOffset(_offset_128, 0x19f79b1921bbcfffLL /* out */);
                ctx->multiGetSignal(__cIdx, _offset_128, _out_sigIdx__3, _sigValue_19, 1);
                _ter = _sigValue_19;
            } else {
                _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0x4554e34a747022dfLL /* layers */);
                _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x4554e34a747022dfLL /* layers */);
                Fr_add(_tmp_43, level, (ctx->circuit->constants + 1));
                _offset_130 = _compIdx_22 + Fr_toInt(_tmp_43)*_compSizes_12[1];
                _outs_sigIdx_ = ctx->getSignalOffset(_offset_130, 0xdb8c17b45221aae4LL /* outs */);
                _sigSizes_outs = ctx->getSignalSizes(_offset_130, 0xdb8c17b45221aae4LL /* outs */);
                _offset_132 = _outs_sigIdx_ + Fr_toInt(i_2)*_sigSizes_outs[1];
                ctx->multiGetSignal(__cIdx, _offset_130, _offset_132, _sigValue_20, 1);
                _ter = _sigValue_20;
            }
            ctx->setSignal(__cIdx, _offset_122, _offset_124, _ter);
            Fr_copyn(_tmp_45, i_2, 1);
            Fr_add(_tmp_44, i_2, (ctx->circuit->constants + 1));
            Fr_copyn(i_2, _tmp_44, 1);
            Fr_add(_tmp_46, level, (ctx->circuit->constants + 1));
            Fr_shl(_tmp_47, (ctx->circuit->constants + 1), _tmp_46);
            Fr_lt(_tmp_48, i_2, _tmp_47);
            _loopCond_4 = _tmp_48;
        }
        Fr_copyn(_tmp_50, level, 1);
        Fr_sub(_tmp_49, level, (ctx->circuit->constants + 1));
        Fr_copyn(level, _tmp_49, 1);
        Fr_geq(_tmp_51, level, (ctx->circuit->constants + 0));
        _loopCond_3 = _tmp_51;
    }
    /* component treeUpdater = MerkleTreeUpdater(height, zeroBatchLeaf) */
    /* treeUpdater.oldRoot <== oldRoot */
    _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
    _oldRoot_sigIdx__2 = ctx->getSignalOffset(_compIdx_23, 0xf816cb685519c2c2LL /* oldRoot */);
    ctx->multiGetSignal(__cIdx, __cIdx, _oldRoot_sigIdx__1, _sigValue_21, 1);
    ctx->setSignal(__cIdx, _compIdx_23, _oldRoot_sigIdx__2, _sigValue_21);
    /* treeUpdater.newRoot <== newRoot */
    _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
    _newRoot_sigIdx__2 = ctx->getSignalOffset(_compIdx_24, 0x40af3afc80583bf9LL /* newRoot */);
    ctx->multiGetSignal(__cIdx, __cIdx, _newRoot_sigIdx__1, _sigValue_22, 1);
    ctx->setSignal(__cIdx, _compIdx_24, _newRoot_sigIdx__2, _sigValue_22);
    /* treeUpdater.leaf <== layers[0].outs[0] */
    _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
    _leaf_sigIdx_ = ctx->getSignalOffset(_compIdx_25, 0x24ad84ada20208d5LL /* leaf */);
    _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x4554e34a747022dfLL /* layers */);
    _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x4554e34a747022dfLL /* layers */);
    _offset_140 = _compIdx_26;
    _outs_sigIdx__1 = ctx->getSignalOffset(_offset_140, 0xdb8c17b45221aae4LL /* outs */);
    _sigSizes_outs_1 = ctx->getSignalSizes(_offset_140, 0xdb8c17b45221aae4LL /* outs */);
    _offset_141 = _outs_sigIdx__1;
    ctx->multiGetSignal(__cIdx, _offset_140, _offset_141, _sigValue_23, 1);
    ctx->setSignal(__cIdx, _compIdx_25, _leaf_sigIdx_, _sigValue_23);
    /* treeUpdater.pathIndices <== pathIndices */
    _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
    _pathIndices_sigIdx__2 = ctx->getSignalOffset(_compIdx_27, 0x6831dcf79ac686bbLL /* pathIndices */);
    ctx->multiGetSignal(__cIdx, __cIdx, _pathIndices_sigIdx__1, _sigValue_24, 1);
    ctx->setSignal(__cIdx, _compIdx_27, _pathIndices_sigIdx__2, _sigValue_24);
    /* for (var i = 0;i < height;i++) */
    /* treeUpdater.pathElements[i] <== pathElements[i] */
    _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
    _pathElements_sigIdx_ = ctx->getSignalOffset(_compIdx_28, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_pathElements = ctx->getSignalSizes(_compIdx_28, 0x4099e7b711de8b07LL /* pathElements */);
    _offset_146 = _pathElements_sigIdx_;
    _offset_148 = _pathElements_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_148, _sigValue_25, 1);
    ctx->setSignal(__cIdx, _compIdx_28, _offset_146, _sigValue_25);
    _loopCond_5 = _tmp_55;
    while (Fr_isTrue(_loopCond_5)) {
        /* treeUpdater.pathElements[i] <== pathElements[i] */
        _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0xd034ee849dc97fc2LL /* treeUpdater */);
        _pathElements_sigIdx__2 = ctx->getSignalOffset(_compIdx_29, 0x4099e7b711de8b07LL /* pathElements */);
        _sigSizes_pathElements_2 = ctx->getSignalSizes(_compIdx_29, 0x4099e7b711de8b07LL /* pathElements */);
        _offset_154 = _pathElements_sigIdx__2 + Fr_toInt(i_3)*_sigSizes_pathElements_2[1];
        _offset_156 = _pathElements_sigIdx__1 + Fr_toInt(i_3)*_sigSizes_pathElements_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_156, _sigValue_26, 1);
        ctx->setSignal(__cIdx, _compIdx_29, _offset_154, _sigValue_26);
        Fr_copyn(_tmp_57, i_3, 1);
        Fr_add(_tmp_56, i_3, (ctx->circuit->constants + 1));
        Fr_copyn(i_3, _tmp_56, 1);
        Fr_lt(_tmp_58, i_3, (ctx->circuit->constants + 4));
        _loopCond_5 = _tmp_58;
    }
    ctx->finished(__cIdx);
}
/*
TreeUpdateArgsHasher
nLeaves=2
*/
void TreeUpdateArgsHasher_25591825623df335(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_14[1];
    FrElement i[1];
    FrElement index[1];
    FrElement _tmp_16[1];
    FrElement _tmp_15[1];
    FrElement _tmp_17[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _tmp_21[1];
    FrElement _tmp_24[1];
    FrElement _tmp_23[1];
    FrElement _tmp_27[1];
    FrElement _tmp_26[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_31[1];
    FrElement i_1[1];
    FrElement _tmp_33[1];
    FrElement _tmp_32[1];
    FrElement _tmp_34[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_36[1];
    FrElement _tmp_35[1];
    FrElement _tmp_37[1];
    FrElement _tmp_40[1];
    FrElement _tmp_39[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_44[1];
    FrElement i_2[1];
    FrElement _tmp_46[1];
    FrElement _tmp_45[1];
    FrElement _tmp_47[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_49[1];
    FrElement _tmp_48[1];
    FrElement _tmp_50[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_53[1];
    FrElement _tmp_52[1];
    FrElement _tmp_55[1];
    FrElement _tmp_54[1];
    FrElement _tmp_58[1];
    FrElement _tmp_57[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_62[1];
    FrElement i_3[1];
    FrElement _tmp_64[1];
    FrElement _tmp_63[1];
    FrElement _tmp_65[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_67[1];
    FrElement _tmp_66[1];
    FrElement _tmp_68[1];
    FrElement _tmp_71[1];
    FrElement _tmp_70[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_75[1];
    FrElement i_4[1];
    FrElement _tmp_77[1];
    FrElement _tmp_76[1];
    FrElement _tmp_78[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_80[1];
    FrElement _tmp_79[1];
    FrElement _tmp_81[1];
    FrElement _tmp_84[1];
    FrElement _tmp_83[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_88[1];
    FrElement i_5[1];
    FrElement _tmp_90[1];
    FrElement _tmp_89[1];
    FrElement _tmp_91[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_93[1];
    FrElement _tmp_92[1];
    FrElement _tmp_94[1];
    FrElement _tmp_97[1];
    FrElement leaf[1];
    FrElement _sigValue_18[1];
    FrElement _sigValue_19[1];
    FrElement _sigValue_20[1];
    FrElement _tmp_99[1];
    FrElement _tmp_98[1];
    FrElement _tmp_101[1];
    FrElement _tmp_100[1];
    FrElement _num_52[1];
    FrElement _tmp_102[1];
    FrElement _tmp_104[1];
    FrElement _tmp_103[1];
    FrElement _tmp_105[1];
    FrElement _sigValue_21[1];
    FrElement _tmp_107[1];
    FrElement _tmp_106[1];
    FrElement _tmp_108[1];
    FrElement _num_56[1];
    FrElement _tmp_109[1];
    FrElement _tmp_111[1];
    FrElement _tmp_110[1];
    FrElement _tmp_112[1];
    FrElement _sigValue_22[1];
    FrElement _tmp_114[1];
    FrElement _tmp_113[1];
    FrElement _tmp_115[1];
    FrElement _num_60[1];
    FrElement _tmp_116[1];
    FrElement _tmp_118[1];
    FrElement _tmp_117[1];
    FrElement _tmp_119[1];
    FrElement _sigValue_23[1];
    FrElement _tmp_121[1];
    FrElement _tmp_120[1];
    FrElement _tmp_122[1];
    FrElement _tmp_124[1];
    FrElement _tmp_123[1];
    FrElement _tmp_125[1];
    FrElement _sigValue_24[1];
    FrElement _tmp_130[1];
    FrElement i_6[1];
    FrElement _tmp_131[1];
    FrElement _sigValue_25[1];
    FrElement _tmp_133[1];
    FrElement _tmp_132[1];
    FrElement _tmp_134[1];
    FrElement _sigValue_26[1];
    int _compIdx;
    int _in_sigIdx_;
    int _oldRoot_sigIdx_;
    int _compIdx_1;
    int _in_sigIdx__1;
    int _newRoot_sigIdx_;
    int _compIdx_2;
    int _in_sigIdx__2;
    int _pathIndices_sigIdx_;
    int _compIdx_3;
    int _in_sigIdx__3;
    int _offset_8;
    int _compIdx_4;
    int _in_sigIdx__4;
    int _offset_11;
    int _compIdx_5;
    int _in_sigIdx__5;
    int _offset_16;
    int _compIdx_6;
    int _out_sigIdx_;
    int _offset_18;
    int _compIdx_7;
    int _in_sigIdx__6;
    int _offset_24;
    int _compIdx_8;
    int _out_sigIdx__1;
    int _offset_26;
    int _compIdx_9;
    int _in_sigIdx__7;
    int _offset_32;
    int _compIdx_10;
    int _in_sigIdx__8;
    int _offset_35;
    int _compIdx_11;
    int _in_sigIdx__9;
    int _offset_40;
    int _compIdx_12;
    int _out_sigIdx__2;
    int _offset_42;
    int _compIdx_13;
    int _in_sigIdx__10;
    int _offset_48;
    int _compIdx_14;
    int _out_sigIdx__3;
    int _offset_50;
    int _compIdx_15;
    int _in_sigIdx__11;
    int _offset_58;
    int _compIdx_16;
    int _out_sigIdx__4;
    int _offset_60;
    int _compIdx_17;
    int _in_sigIdx__12;
    int _offset_66;
    int _compIdx_18;
    int _out_sigIdx__5;
    int _offset_68;
    int _compIdx_19;
    int _offset_76;
    int _in_sigIdx__13;
    int _hashes_sigIdx_;
    int _offset_78;
    int _compIdx_20;
    int _offset_80;
    int _in_sigIdx__14;
    int _instances_sigIdx_;
    int _offset_82;
    int _compIdx_21;
    int _offset_84;
    int _in_sigIdx__15;
    int _blocks_sigIdx_;
    int _offset_86;
    int _compIdx_22;
    int _in_sigIdx__16;
    int _offset_89;
    int _compIdx_23;
    int _in_sigIdx__17;
    int _offset_92;
    int _compIdx_24;
    int _in_sigIdx__18;
    int _offset_97;
    int _compIdx_25;
    int _offset_99;
    int _out_sigIdx__6;
    int _offset_101;
    int _compIdx_26;
    int _in_sigIdx__19;
    int _offset_107;
    int _compIdx_27;
    int _offset_109;
    int _out_sigIdx__7;
    int _offset_111;
    int _compIdx_28;
    int _in_sigIdx__20;
    int _offset_119;
    int _compIdx_29;
    int _offset_121;
    int _out_sigIdx__8;
    int _offset_123;
    int _compIdx_30;
    int _in_sigIdx__21;
    int _offset_129;
    int _compIdx_31;
    int _offset_131;
    int _out_sigIdx__9;
    int _offset_133;
    int _compIdx_32;
    int _in_sigIdx__22;
    int _offset_141;
    int _compIdx_33;
    int _offset_143;
    int _out_sigIdx__10;
    int _offset_145;
    int _compIdx_34;
    int _in_sigIdx__23;
    int _offset_151;
    int _compIdx_35;
    int _offset_153;
    int _out_sigIdx__11;
    int _offset_155;
    int _compIdx_36;
    int _offset_164;
    int _in_sigIdx__24;
    int _offset_166;
    int _compIdx_37;
    int _offset_168;
    int _in_sigIdx__25;
    int _offset_170;
    int _compIdx_38;
    int _offset_172;
    int _in_sigIdx__26;
    int _offset_174;
    int _compIdx_39;
    int _in_sigIdx__27;
    int _offset_177;
    int _compIdx_40;
    int _in_sigIdx__28;
    int _offset_180;
    int _compIdx_41;
    int _in_sigIdx__29;
    int _offset_185;
    int _compIdx_42;
    int _offset_187;
    int _out_sigIdx__12;
    int _offset_189;
    int _compIdx_43;
    int _in_sigIdx__30;
    int _offset_197;
    int _compIdx_44;
    int _offset_199;
    int _out_sigIdx__13;
    int _offset_201;
    int _compIdx_45;
    int _in_sigIdx__31;
    int _offset_209;
    int _compIdx_46;
    int _offset_211;
    int _out_sigIdx__14;
    int _offset_213;
    int _compIdx_47;
    int _in_sigIdx__32;
    int _offset_224;
    int _compIdx_48;
    int _out_sigIdx__15;
    int _offset_226;
    int _compIdx_49;
    int _in_sigIdx__33;
    int _offset_231;
    int _compIdx_50;
    int _out_sigIdx__16;
    int _offset_233;
    int _compIdx_51;
    int _out_sigIdx__17;
    int _out_sigIdx__18;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_hashes;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_instances;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_blocks;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _sigSizes_in_11;
    Circom_Sizes _sigSizes_in_12;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_out_6;
    Circom_Sizes _sigSizes_in_13;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out_7;
    Circom_Sizes _sigSizes_in_14;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_out_8;
    Circom_Sizes _sigSizes_in_15;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_out_9;
    Circom_Sizes _sigSizes_in_16;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_out_10;
    Circom_Sizes _sigSizes_in_17;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_out_11;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_in_18;
    Circom_Sizes _sigSizes_in_19;
    Circom_Sizes _sigSizes_in_20;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_out_12;
    Circom_Sizes _sigSizes_in_21;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_out_13;
    Circom_Sizes _sigSizes_in_22;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_out_14;
    Circom_Sizes _sigSizes_in_23;
    Circom_Sizes _sigSizes_out_15;
    Circom_Sizes _sigSizes_in_24;
    Circom_Sizes _sigSizes_out_16;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _loopCond_6;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _loopCond_9;
    PFrElement _loopCond_10;
    Fr_copy(&(_tmp_14[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(index[0]), ctx->circuit->constants +5);
    Fr_copy(&(_tmp_31[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_44[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_2[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_62[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_75[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_4[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_88[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_97[0]), ctx->circuit->constants +1);
    Fr_copy(&(leaf[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_52[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_56[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_60[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_130[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_6[0]), ctx->circuit->constants +1);
    _oldRoot_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xf816cb685519c2c2LL /* oldRoot */);
    _newRoot_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x40af3afc80583bf9LL /* newRoot */);
    _pathIndices_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    _hashes_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x3ea12ce701f4b39dLL /* hashes */);
    _instances_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xe05feb62c2f86b13LL /* instances */);
    _blocks_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x63ac029b9221d5e3LL /* blocks */);
    _out_sigIdx__18 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_hashes = ctx->getSignalSizes(__cIdx, 0x3ea12ce701f4b39dLL /* hashes */);
    _sigSizes_instances = ctx->getSignalSizes(__cIdx, 0xe05feb62c2f86b13LL /* instances */);
    _sigSizes_blocks = ctx->getSignalSizes(__cIdx, 0x63ac029b9221d5e3LL /* blocks */);
    /* signal input oldRoot */
    /* signal input newRoot */
    /* signal input pathIndices */
    /* signal input instances[nLeaves] */
    /* signal input hashes[nLeaves] */
    /* signal input blocks[nLeaves] */
    /* signal output out */
    /* var header = 256 + 256 + 32 */
    /* var bitsPerLeaf = 256 + 160 + 32 */
    /* component hasher = Sha256(header + nLeaves * bitsPerLeaf) */
    /* component bitsOldRoot = Num2Bits_strict() */
    /* component bitsNewRoot = Num2Bits_strict() */
    /* component bitsPathIndices = Num2Bits(32) */
    /* component bitsInstance[nLeaves] */
    /* component bitsHash[nLeaves] */
    /* component bitsBlock[nLeaves] */
    /* bitsOldRoot.in <== oldRoot */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xd8ac3f44693b90beLL /* bitsOldRoot */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _oldRoot_sigIdx_, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _in_sigIdx_, _sigValue);
    /* bitsNewRoot.in <== newRoot */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xb4fe6fd46c313ec5LL /* bitsNewRoot */);
    _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _newRoot_sigIdx_, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _in_sigIdx__1, _sigValue_1);
    /* bitsPathIndices.in <== pathIndices */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x7ebd21a35a5c34a7LL /* bitsPathIndices */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _pathIndices_sigIdx_, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _in_sigIdx__2, _sigValue_2);
    /* var index = 0 */
    /* hasher.in[index++] <== 0 */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
    _offset_8 = _in_sigIdx__3;
    ctx->setSignal(__cIdx, _compIdx_3, _offset_8, (ctx->circuit->constants + 0));
    /* hasher.in[index++] <== 0 */
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__4 + 1*_sigSizes_in_1[1];
    ctx->setSignal(__cIdx, _compIdx_4, _offset_11, (ctx->circuit->constants + 0));
    /* for (var i = 0;i < 254;i++) */
    /* hasher.in[index++] <== bitsOldRoot.out[253 - i] */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
    _offset_16 = _in_sigIdx__5 + 2*_sigSizes_in_2[1];
    _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0xd8ac3f44693b90beLL /* bitsOldRoot */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_6, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_compIdx_6, 0x19f79b1921bbcfffLL /* out */);
    _offset_18 = _out_sigIdx_ + 253*_sigSizes_out[1];
    ctx->multiGetSignal(__cIdx, _compIdx_6, _offset_18, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_5, _offset_16, _sigValue_3);
    _loopCond = _tmp_14;
    while (Fr_isTrue(_loopCond)) {
        /* hasher.in[index++] <== bitsOldRoot.out[253 - i] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_7, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_7, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_16, index, 1);
        Fr_add(_tmp_15, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_15, 1);
        _offset_24 = _in_sigIdx__6 + Fr_toInt(_tmp_16)*_sigSizes_in_3[1];
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0xd8ac3f44693b90beLL /* bitsOldRoot */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_8, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_8, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_17, (ctx->circuit->constants + 6), i);
        _offset_26 = _out_sigIdx__1 + Fr_toInt(_tmp_17)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_8, _offset_26, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_24, _sigValue_4);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 7));
        _loopCond = _tmp_20;
    }
    /* hasher.in[index++] <== 0 */
    _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__7 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_22, index, 1);
    Fr_add(_tmp_21, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_21, 1);
    _offset_32 = _in_sigIdx__7 + Fr_toInt(_tmp_22)*_sigSizes_in_4[1];
    ctx->setSignal(__cIdx, _compIdx_9, _offset_32, (ctx->circuit->constants + 0));
    /* hasher.in[index++] <== 0 */
    _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__8 = ctx->getSignalOffset(_compIdx_10, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_10, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_24, index, 1);
    Fr_add(_tmp_23, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_23, 1);
    _offset_35 = _in_sigIdx__8 + Fr_toInt(_tmp_24)*_sigSizes_in_5[1];
    ctx->setSignal(__cIdx, _compIdx_10, _offset_35, (ctx->circuit->constants + 0));
    /* for (var i = 0;i < 254;i++) */
    /* hasher.in[index++] <== bitsNewRoot.out[253 - i] */
    _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__9 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_27, index, 1);
    Fr_add(_tmp_26, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_26, 1);
    _offset_40 = _in_sigIdx__9 + Fr_toInt(_tmp_27)*_sigSizes_in_6[1];
    _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0xb4fe6fd46c313ec5LL /* bitsNewRoot */);
    _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
    _offset_42 = _out_sigIdx__2 + 253*_sigSizes_out_2[1];
    ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_42, _sigValue_5, 1);
    ctx->setSignal(__cIdx, _compIdx_11, _offset_40, _sigValue_5);
    _loopCond_1 = _tmp_31;
    while (Fr_isTrue(_loopCond_1)) {
        /* hasher.in[index++] <== bitsNewRoot.out[253 - i] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__10 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_7 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_33, index, 1);
        Fr_add(_tmp_32, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_32, 1);
        _offset_48 = _in_sigIdx__10 + Fr_toInt(_tmp_33)*_sigSizes_in_7[1];
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0xb4fe6fd46c313ec5LL /* bitsNewRoot */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_14, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_14, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_34, (ctx->circuit->constants + 6), i_1);
        _offset_50 = _out_sigIdx__3 + Fr_toInt(_tmp_34)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_14, _offset_50, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_48, _sigValue_6);
        Fr_copyn(_tmp_36, i_1, 1);
        Fr_add(_tmp_35, i_1, (ctx->circuit->constants + 1));
        Fr_copyn(i_1, _tmp_35, 1);
        Fr_lt(_tmp_37, i_1, (ctx->circuit->constants + 7));
        _loopCond_1 = _tmp_37;
    }
    /* for (var i = 0;i < 32;i++) */
    /* hasher.in[index++] <== bitsPathIndices.out[31 - i] */
    _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__11 = ctx->getSignalOffset(_compIdx_15, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_8 = ctx->getSignalSizes(_compIdx_15, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_40, index, 1);
    Fr_add(_tmp_39, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_39, 1);
    _offset_58 = _in_sigIdx__11 + Fr_toInt(_tmp_40)*_sigSizes_in_8[1];
    _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0x7ebd21a35a5c34a7LL /* bitsPathIndices */);
    _out_sigIdx__4 = ctx->getSignalOffset(_compIdx_16, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_4 = ctx->getSignalSizes(_compIdx_16, 0x19f79b1921bbcfffLL /* out */);
    _offset_60 = _out_sigIdx__4 + 31*_sigSizes_out_4[1];
    ctx->multiGetSignal(__cIdx, _compIdx_16, _offset_60, _sigValue_7, 1);
    ctx->setSignal(__cIdx, _compIdx_15, _offset_58, _sigValue_7);
    _loopCond_2 = _tmp_44;
    while (Fr_isTrue(_loopCond_2)) {
        /* hasher.in[index++] <== bitsPathIndices.out[31 - i] */
        _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__12 = ctx->getSignalOffset(_compIdx_17, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_9 = ctx->getSignalSizes(_compIdx_17, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_46, index, 1);
        Fr_add(_tmp_45, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_45, 1);
        _offset_66 = _in_sigIdx__12 + Fr_toInt(_tmp_46)*_sigSizes_in_9[1];
        _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0x7ebd21a35a5c34a7LL /* bitsPathIndices */);
        _out_sigIdx__5 = ctx->getSignalOffset(_compIdx_18, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_5 = ctx->getSignalSizes(_compIdx_18, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_47, (ctx->circuit->constants + 8), i_2);
        _offset_68 = _out_sigIdx__5 + Fr_toInt(_tmp_47)*_sigSizes_out_5[1];
        ctx->multiGetSignal(__cIdx, _compIdx_18, _offset_68, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_17, _offset_66, _sigValue_8);
        Fr_copyn(_tmp_49, i_2, 1);
        Fr_add(_tmp_48, i_2, (ctx->circuit->constants + 1));
        Fr_copyn(i_2, _tmp_48, 1);
        Fr_lt(_tmp_50, i_2, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_50;
    }
    /* for (var leaf = 0;leaf < nLeaves;leaf++) */
    /* bitsHash[leaf] = Num2Bits_strict() */
    /* bitsInstance[leaf] = Num2Bits(160) */
    /* bitsBlock[leaf] = Num2Bits(32) */
    /* bitsHash[leaf].in <== hashes[leaf] */
    _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x650491f512451165LL /* bitsHash */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0x650491f512451165LL /* bitsHash */);
    _offset_76 = _compIdx_19;
    _in_sigIdx__13 = ctx->getSignalOffset(_offset_76, 0x08b73807b55c4bbeLL /* in */);
    _offset_78 = _hashes_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_78, _sigValue_9, 1);
    ctx->setSignal(__cIdx, _offset_76, _in_sigIdx__13, _sigValue_9);
    /* bitsInstance[leaf].in <== instances[leaf] */
    _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
    _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
    _offset_80 = _compIdx_20;
    _in_sigIdx__14 = ctx->getSignalOffset(_offset_80, 0x08b73807b55c4bbeLL /* in */);
    _offset_82 = _instances_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_82, _sigValue_10, 1);
    ctx->setSignal(__cIdx, _offset_80, _in_sigIdx__14, _sigValue_10);
    /* bitsBlock[leaf].in <== blocks[leaf] */
    _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
    _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
    _offset_84 = _compIdx_21;
    _in_sigIdx__15 = ctx->getSignalOffset(_offset_84, 0x08b73807b55c4bbeLL /* in */);
    _offset_86 = _blocks_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_86, _sigValue_11, 1);
    ctx->setSignal(__cIdx, _offset_84, _in_sigIdx__15, _sigValue_11);
    /* hasher.in[index++] <== 0 */
    _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__16 = ctx->getSignalOffset(_compIdx_22, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_10 = ctx->getSignalSizes(_compIdx_22, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_53, index, 1);
    Fr_add(_tmp_52, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_52, 1);
    _offset_89 = _in_sigIdx__16 + Fr_toInt(_tmp_53)*_sigSizes_in_10[1];
    ctx->setSignal(__cIdx, _compIdx_22, _offset_89, (ctx->circuit->constants + 0));
    /* hasher.in[index++] <== 0 */
    _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__17 = ctx->getSignalOffset(_compIdx_23, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_11 = ctx->getSignalSizes(_compIdx_23, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_55, index, 1);
    Fr_add(_tmp_54, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_54, 1);
    _offset_92 = _in_sigIdx__17 + Fr_toInt(_tmp_55)*_sigSizes_in_11[1];
    ctx->setSignal(__cIdx, _compIdx_23, _offset_92, (ctx->circuit->constants + 0));
    /* for (var i = 0;i < 254;i++) */
    /* hasher.in[index++] <== bitsHash[leaf].out[253 - i] */
    _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__18 = ctx->getSignalOffset(_compIdx_24, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_12 = ctx->getSignalSizes(_compIdx_24, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_58, index, 1);
    Fr_add(_tmp_57, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_57, 1);
    _offset_97 = _in_sigIdx__18 + Fr_toInt(_tmp_58)*_sigSizes_in_12[1];
    _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x650491f512451165LL /* bitsHash */);
    _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x650491f512451165LL /* bitsHash */);
    _offset_99 = _compIdx_25;
    _out_sigIdx__6 = ctx->getSignalOffset(_offset_99, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_6 = ctx->getSignalSizes(_offset_99, 0x19f79b1921bbcfffLL /* out */);
    _offset_101 = _out_sigIdx__6 + 253*_sigSizes_out_6[1];
    ctx->multiGetSignal(__cIdx, _offset_99, _offset_101, _sigValue_12, 1);
    ctx->setSignal(__cIdx, _compIdx_24, _offset_97, _sigValue_12);
    _loopCond_3 = _tmp_62;
    while (Fr_isTrue(_loopCond_3)) {
        /* hasher.in[index++] <== bitsHash[leaf].out[253 - i] */
        _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__19 = ctx->getSignalOffset(_compIdx_26, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_13 = ctx->getSignalSizes(_compIdx_26, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_64, index, 1);
        Fr_add(_tmp_63, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_63, 1);
        _offset_107 = _in_sigIdx__19 + Fr_toInt(_tmp_64)*_sigSizes_in_13[1];
        _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x650491f512451165LL /* bitsHash */);
        _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x650491f512451165LL /* bitsHash */);
        _offset_109 = _compIdx_27;
        _out_sigIdx__7 = ctx->getSignalOffset(_offset_109, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_7 = ctx->getSignalSizes(_offset_109, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_65, (ctx->circuit->constants + 6), i_3);
        _offset_111 = _out_sigIdx__7 + Fr_toInt(_tmp_65)*_sigSizes_out_7[1];
        ctx->multiGetSignal(__cIdx, _offset_109, _offset_111, _sigValue_13, 1);
        ctx->setSignal(__cIdx, _compIdx_26, _offset_107, _sigValue_13);
        Fr_copyn(_tmp_67, i_3, 1);
        Fr_add(_tmp_66, i_3, (ctx->circuit->constants + 1));
        Fr_copyn(i_3, _tmp_66, 1);
        Fr_lt(_tmp_68, i_3, (ctx->circuit->constants + 7));
        _loopCond_3 = _tmp_68;
    }
    /* for (var i = 0;i < 160;i++) */
    /* hasher.in[index++] <== bitsInstance[leaf].out[159 - i] */
    _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__20 = ctx->getSignalOffset(_compIdx_28, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_14 = ctx->getSignalSizes(_compIdx_28, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_71, index, 1);
    Fr_add(_tmp_70, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_70, 1);
    _offset_119 = _in_sigIdx__20 + Fr_toInt(_tmp_71)*_sigSizes_in_14[1];
    _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
    _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
    _offset_121 = _compIdx_29;
    _out_sigIdx__8 = ctx->getSignalOffset(_offset_121, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_8 = ctx->getSignalSizes(_offset_121, 0x19f79b1921bbcfffLL /* out */);
    _offset_123 = _out_sigIdx__8 + 159*_sigSizes_out_8[1];
    ctx->multiGetSignal(__cIdx, _offset_121, _offset_123, _sigValue_14, 1);
    ctx->setSignal(__cIdx, _compIdx_28, _offset_119, _sigValue_14);
    _loopCond_4 = _tmp_75;
    while (Fr_isTrue(_loopCond_4)) {
        /* hasher.in[index++] <== bitsInstance[leaf].out[159 - i] */
        _compIdx_30 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__21 = ctx->getSignalOffset(_compIdx_30, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_15 = ctx->getSignalSizes(_compIdx_30, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_77, index, 1);
        Fr_add(_tmp_76, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_76, 1);
        _offset_129 = _in_sigIdx__21 + Fr_toInt(_tmp_77)*_sigSizes_in_15[1];
        _compIdx_31 = ctx->getSubComponentOffset(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
        _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
        _offset_131 = _compIdx_31;
        _out_sigIdx__9 = ctx->getSignalOffset(_offset_131, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_9 = ctx->getSignalSizes(_offset_131, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_78, (ctx->circuit->constants + 10), i_4);
        _offset_133 = _out_sigIdx__9 + Fr_toInt(_tmp_78)*_sigSizes_out_9[1];
        ctx->multiGetSignal(__cIdx, _offset_131, _offset_133, _sigValue_15, 1);
        ctx->setSignal(__cIdx, _compIdx_30, _offset_129, _sigValue_15);
        Fr_copyn(_tmp_80, i_4, 1);
        Fr_add(_tmp_79, i_4, (ctx->circuit->constants + 1));
        Fr_copyn(i_4, _tmp_79, 1);
        Fr_lt(_tmp_81, i_4, (ctx->circuit->constants + 11));
        _loopCond_4 = _tmp_81;
    }
    /* for (var i = 0;i < 32;i++) */
    /* hasher.in[index++] <== bitsBlock[leaf].out[31 - i] */
    _compIdx_32 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _in_sigIdx__22 = ctx->getSignalOffset(_compIdx_32, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_16 = ctx->getSignalSizes(_compIdx_32, 0x08b73807b55c4bbeLL /* in */);
    Fr_copyn(_tmp_84, index, 1);
    Fr_add(_tmp_83, index, (ctx->circuit->constants + 1));
    Fr_copyn(index, _tmp_83, 1);
    _offset_141 = _in_sigIdx__22 + Fr_toInt(_tmp_84)*_sigSizes_in_16[1];
    _compIdx_33 = ctx->getSubComponentOffset(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
    _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
    _offset_143 = _compIdx_33;
    _out_sigIdx__10 = ctx->getSignalOffset(_offset_143, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_10 = ctx->getSignalSizes(_offset_143, 0x19f79b1921bbcfffLL /* out */);
    _offset_145 = _out_sigIdx__10 + 31*_sigSizes_out_10[1];
    ctx->multiGetSignal(__cIdx, _offset_143, _offset_145, _sigValue_16, 1);
    ctx->setSignal(__cIdx, _compIdx_32, _offset_141, _sigValue_16);
    _loopCond_5 = _tmp_88;
    while (Fr_isTrue(_loopCond_5)) {
        /* hasher.in[index++] <== bitsBlock[leaf].out[31 - i] */
        _compIdx_34 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__23 = ctx->getSignalOffset(_compIdx_34, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_17 = ctx->getSignalSizes(_compIdx_34, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_90, index, 1);
        Fr_add(_tmp_89, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_89, 1);
        _offset_151 = _in_sigIdx__23 + Fr_toInt(_tmp_90)*_sigSizes_in_17[1];
        _compIdx_35 = ctx->getSubComponentOffset(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
        _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
        _offset_153 = _compIdx_35;
        _out_sigIdx__11 = ctx->getSignalOffset(_offset_153, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_11 = ctx->getSignalSizes(_offset_153, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_91, (ctx->circuit->constants + 8), i_5);
        _offset_155 = _out_sigIdx__11 + Fr_toInt(_tmp_91)*_sigSizes_out_11[1];
        ctx->multiGetSignal(__cIdx, _offset_153, _offset_155, _sigValue_17, 1);
        ctx->setSignal(__cIdx, _compIdx_34, _offset_151, _sigValue_17);
        Fr_copyn(_tmp_93, i_5, 1);
        Fr_add(_tmp_92, i_5, (ctx->circuit->constants + 1));
        Fr_copyn(i_5, _tmp_92, 1);
        Fr_lt(_tmp_94, i_5, (ctx->circuit->constants + 9));
        _loopCond_5 = _tmp_94;
    }
    _loopCond_6 = _tmp_97;
    while (Fr_isTrue(_loopCond_6)) {
        /* bitsHash[leaf] = Num2Bits_strict() */
        /* bitsInstance[leaf] = Num2Bits(160) */
        /* bitsBlock[leaf] = Num2Bits(32) */
        /* bitsHash[leaf].in <== hashes[leaf] */
        _compIdx_36 = ctx->getSubComponentOffset(__cIdx, 0x650491f512451165LL /* bitsHash */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x650491f512451165LL /* bitsHash */);
        _offset_164 = _compIdx_36 + Fr_toInt(leaf)*_compSizes_9[1];
        _in_sigIdx__24 = ctx->getSignalOffset(_offset_164, 0x08b73807b55c4bbeLL /* in */);
        _offset_166 = _hashes_sigIdx_ + Fr_toInt(leaf)*_sigSizes_hashes[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_166, _sigValue_18, 1);
        ctx->setSignal(__cIdx, _offset_164, _in_sigIdx__24, _sigValue_18);
        /* bitsInstance[leaf].in <== instances[leaf] */
        _compIdx_37 = ctx->getSubComponentOffset(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
        _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
        _offset_168 = _compIdx_37 + Fr_toInt(leaf)*_compSizes_10[1];
        _in_sigIdx__25 = ctx->getSignalOffset(_offset_168, 0x08b73807b55c4bbeLL /* in */);
        _offset_170 = _instances_sigIdx_ + Fr_toInt(leaf)*_sigSizes_instances[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_170, _sigValue_19, 1);
        ctx->setSignal(__cIdx, _offset_168, _in_sigIdx__25, _sigValue_19);
        /* bitsBlock[leaf].in <== blocks[leaf] */
        _compIdx_38 = ctx->getSubComponentOffset(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
        _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
        _offset_172 = _compIdx_38 + Fr_toInt(leaf)*_compSizes_11[1];
        _in_sigIdx__26 = ctx->getSignalOffset(_offset_172, 0x08b73807b55c4bbeLL /* in */);
        _offset_174 = _blocks_sigIdx_ + Fr_toInt(leaf)*_sigSizes_blocks[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_174, _sigValue_20, 1);
        ctx->setSignal(__cIdx, _offset_172, _in_sigIdx__26, _sigValue_20);
        /* hasher.in[index++] <== 0 */
        _compIdx_39 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__27 = ctx->getSignalOffset(_compIdx_39, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_18 = ctx->getSignalSizes(_compIdx_39, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_99, index, 1);
        Fr_add(_tmp_98, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_98, 1);
        _offset_177 = _in_sigIdx__27 + Fr_toInt(_tmp_99)*_sigSizes_in_18[1];
        ctx->setSignal(__cIdx, _compIdx_39, _offset_177, (ctx->circuit->constants + 0));
        /* hasher.in[index++] <== 0 */
        _compIdx_40 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _in_sigIdx__28 = ctx->getSignalOffset(_compIdx_40, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_19 = ctx->getSignalSizes(_compIdx_40, 0x08b73807b55c4bbeLL /* in */);
        Fr_copyn(_tmp_101, index, 1);
        Fr_add(_tmp_100, index, (ctx->circuit->constants + 1));
        Fr_copyn(index, _tmp_100, 1);
        _offset_180 = _in_sigIdx__28 + Fr_toInt(_tmp_101)*_sigSizes_in_19[1];
        ctx->setSignal(__cIdx, _compIdx_40, _offset_180, (ctx->circuit->constants + 0));
        /* for (var i = 0;i < 254;i++) */
        Fr_copyn(i_3, _num_52, 1);
        Fr_lt(_tmp_102, i_3, (ctx->circuit->constants + 7));
        _loopCond_7 = _tmp_102;
        while (Fr_isTrue(_loopCond_7)) {
            /* hasher.in[index++] <== bitsHash[leaf].out[253 - i] */
            _compIdx_41 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
            _in_sigIdx__29 = ctx->getSignalOffset(_compIdx_41, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_20 = ctx->getSignalSizes(_compIdx_41, 0x08b73807b55c4bbeLL /* in */);
            Fr_copyn(_tmp_104, index, 1);
            Fr_add(_tmp_103, index, (ctx->circuit->constants + 1));
            Fr_copyn(index, _tmp_103, 1);
            _offset_185 = _in_sigIdx__29 + Fr_toInt(_tmp_104)*_sigSizes_in_20[1];
            _compIdx_42 = ctx->getSubComponentOffset(__cIdx, 0x650491f512451165LL /* bitsHash */);
            _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x650491f512451165LL /* bitsHash */);
            _offset_187 = _compIdx_42 + Fr_toInt(leaf)*_compSizes_12[1];
            _out_sigIdx__12 = ctx->getSignalOffset(_offset_187, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_12 = ctx->getSignalSizes(_offset_187, 0x19f79b1921bbcfffLL /* out */);
            Fr_sub(_tmp_105, (ctx->circuit->constants + 6), i_3);
            _offset_189 = _out_sigIdx__12 + Fr_toInt(_tmp_105)*_sigSizes_out_12[1];
            ctx->multiGetSignal(__cIdx, _offset_187, _offset_189, _sigValue_21, 1);
            ctx->setSignal(__cIdx, _compIdx_41, _offset_185, _sigValue_21);
            Fr_copyn(_tmp_107, i_3, 1);
            Fr_add(_tmp_106, i_3, (ctx->circuit->constants + 1));
            Fr_copyn(i_3, _tmp_106, 1);
            Fr_lt(_tmp_108, i_3, (ctx->circuit->constants + 7));
            _loopCond_7 = _tmp_108;
        }
        /* for (var i = 0;i < 160;i++) */
        Fr_copyn(i_4, _num_56, 1);
        Fr_lt(_tmp_109, i_4, (ctx->circuit->constants + 11));
        _loopCond_8 = _tmp_109;
        while (Fr_isTrue(_loopCond_8)) {
            /* hasher.in[index++] <== bitsInstance[leaf].out[159 - i] */
            _compIdx_43 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
            _in_sigIdx__30 = ctx->getSignalOffset(_compIdx_43, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_21 = ctx->getSignalSizes(_compIdx_43, 0x08b73807b55c4bbeLL /* in */);
            Fr_copyn(_tmp_111, index, 1);
            Fr_add(_tmp_110, index, (ctx->circuit->constants + 1));
            Fr_copyn(index, _tmp_110, 1);
            _offset_197 = _in_sigIdx__30 + Fr_toInt(_tmp_111)*_sigSizes_in_21[1];
            _compIdx_44 = ctx->getSubComponentOffset(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
            _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x1b680af9b53f13e6LL /* bitsInstance */);
            _offset_199 = _compIdx_44 + Fr_toInt(leaf)*_compSizes_13[1];
            _out_sigIdx__13 = ctx->getSignalOffset(_offset_199, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_13 = ctx->getSignalSizes(_offset_199, 0x19f79b1921bbcfffLL /* out */);
            Fr_sub(_tmp_112, (ctx->circuit->constants + 10), i_4);
            _offset_201 = _out_sigIdx__13 + Fr_toInt(_tmp_112)*_sigSizes_out_13[1];
            ctx->multiGetSignal(__cIdx, _offset_199, _offset_201, _sigValue_22, 1);
            ctx->setSignal(__cIdx, _compIdx_43, _offset_197, _sigValue_22);
            Fr_copyn(_tmp_114, i_4, 1);
            Fr_add(_tmp_113, i_4, (ctx->circuit->constants + 1));
            Fr_copyn(i_4, _tmp_113, 1);
            Fr_lt(_tmp_115, i_4, (ctx->circuit->constants + 11));
            _loopCond_8 = _tmp_115;
        }
        /* for (var i = 0;i < 32;i++) */
        Fr_copyn(i_5, _num_60, 1);
        Fr_lt(_tmp_116, i_5, (ctx->circuit->constants + 9));
        _loopCond_9 = _tmp_116;
        while (Fr_isTrue(_loopCond_9)) {
            /* hasher.in[index++] <== bitsBlock[leaf].out[31 - i] */
            _compIdx_45 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
            _in_sigIdx__31 = ctx->getSignalOffset(_compIdx_45, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_22 = ctx->getSignalSizes(_compIdx_45, 0x08b73807b55c4bbeLL /* in */);
            Fr_copyn(_tmp_118, index, 1);
            Fr_add(_tmp_117, index, (ctx->circuit->constants + 1));
            Fr_copyn(index, _tmp_117, 1);
            _offset_209 = _in_sigIdx__31 + Fr_toInt(_tmp_118)*_sigSizes_in_22[1];
            _compIdx_46 = ctx->getSubComponentOffset(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
            _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0xe8999581d412752eLL /* bitsBlock */);
            _offset_211 = _compIdx_46 + Fr_toInt(leaf)*_compSizes_14[1];
            _out_sigIdx__14 = ctx->getSignalOffset(_offset_211, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_14 = ctx->getSignalSizes(_offset_211, 0x19f79b1921bbcfffLL /* out */);
            Fr_sub(_tmp_119, (ctx->circuit->constants + 8), i_5);
            _offset_213 = _out_sigIdx__14 + Fr_toInt(_tmp_119)*_sigSizes_out_14[1];
            ctx->multiGetSignal(__cIdx, _offset_211, _offset_213, _sigValue_23, 1);
            ctx->setSignal(__cIdx, _compIdx_45, _offset_209, _sigValue_23);
            Fr_copyn(_tmp_121, i_5, 1);
            Fr_add(_tmp_120, i_5, (ctx->circuit->constants + 1));
            Fr_copyn(i_5, _tmp_120, 1);
            Fr_lt(_tmp_122, i_5, (ctx->circuit->constants + 9));
            _loopCond_9 = _tmp_122;
        }
        Fr_copyn(_tmp_124, leaf, 1);
        Fr_add(_tmp_123, leaf, (ctx->circuit->constants + 1));
        Fr_copyn(leaf, _tmp_123, 1);
        Fr_lt(_tmp_125, leaf, (ctx->circuit->constants + 2));
        _loopCond_6 = _tmp_125;
    }
    /* component b2n = Bits2Num(256) */
    /* for (var i = 0;i < 256;i++) */
    /* b2n.in[i] <== hasher.out[255 - i] */
    _compIdx_47 = ctx->getSubComponentOffset(__cIdx, 0xffa03a1912b74381LL /* b2n */);
    _in_sigIdx__32 = ctx->getSignalOffset(_compIdx_47, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_23 = ctx->getSignalSizes(_compIdx_47, 0x08b73807b55c4bbeLL /* in */);
    _offset_224 = _in_sigIdx__32;
    _compIdx_48 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _out_sigIdx__15 = ctx->getSignalOffset(_compIdx_48, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_15 = ctx->getSignalSizes(_compIdx_48, 0x19f79b1921bbcfffLL /* out */);
    _offset_226 = _out_sigIdx__15 + 255*_sigSizes_out_15[1];
    ctx->multiGetSignal(__cIdx, _compIdx_48, _offset_226, _sigValue_24, 1);
    ctx->setSignal(__cIdx, _compIdx_47, _offset_224, _sigValue_24);
    _loopCond_10 = _tmp_130;
    while (Fr_isTrue(_loopCond_10)) {
        /* b2n.in[i] <== hasher.out[255 - i] */
        _compIdx_49 = ctx->getSubComponentOffset(__cIdx, 0xffa03a1912b74381LL /* b2n */);
        _in_sigIdx__33 = ctx->getSignalOffset(_compIdx_49, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_24 = ctx->getSignalSizes(_compIdx_49, 0x08b73807b55c4bbeLL /* in */);
        _offset_231 = _in_sigIdx__33 + Fr_toInt(i_6)*_sigSizes_in_24[1];
        _compIdx_50 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
        _out_sigIdx__16 = ctx->getSignalOffset(_compIdx_50, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_16 = ctx->getSignalSizes(_compIdx_50, 0x19f79b1921bbcfffLL /* out */);
        Fr_sub(_tmp_131, (ctx->circuit->constants + 12), i_6);
        _offset_233 = _out_sigIdx__16 + Fr_toInt(_tmp_131)*_sigSizes_out_16[1];
        ctx->multiGetSignal(__cIdx, _compIdx_50, _offset_233, _sigValue_25, 1);
        ctx->setSignal(__cIdx, _compIdx_49, _offset_231, _sigValue_25);
        Fr_copyn(_tmp_133, i_6, 1);
        Fr_add(_tmp_132, i_6, (ctx->circuit->constants + 1));
        Fr_copyn(i_6, _tmp_132, 1);
        Fr_lt(_tmp_134, i_6, (ctx->circuit->constants + 13));
        _loopCond_10 = _tmp_134;
    }
    /* out <== b2n.out */
    _compIdx_51 = ctx->getSubComponentOffset(__cIdx, 0xffa03a1912b74381LL /* b2n */);
    _out_sigIdx__17 = ctx->getSignalOffset(_compIdx_51, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_51, _out_sigIdx__17, _sigValue_26, 1);
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx__18, _sigValue_26);
    ctx->finished(__cIdx);
}
/*
Sha256
in[0]=0
in[1]=0
in[256]=0
in[257]=0
in[544]=0
in[545]=0
in[992]=0
in[993]=0
nBits=1440
*/
void Sha256_e0cb3c88fd67c5c8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_7[1];
    FrElement k[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _tmp_14[1];
    FrElement _tmp_16[1];
    FrElement _tmp_15[1];
    FrElement _tmp_19[1];
    FrElement _num_13[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _tmp_24[1];
    FrElement _tmp_25[1];
    FrElement _tmp_27[1];
    FrElement _tmp_26[1];
    FrElement _tmp_28[1];
    FrElement _num_21[1];
    FrElement _tmp_31[1];
    FrElement _tmp_33[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_35[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_37[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_39[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_41[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_43[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_45[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_47[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_49[1];
    FrElement _tmp_48[1];
    FrElement _tmp_50[1];
    FrElement _num_40[1];
    FrElement _tmp_51[1];
    FrElement _tmp_53[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_55[1];
    FrElement _tmp_54[1];
    FrElement _tmp_56[1];
    FrElement _tmp_59[1];
    FrElement i[1];
    FrElement _tmp_60[1];
    FrElement _num_45[1];
    FrElement _tmp_61[1];
    FrElement _tmp_63[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_65[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_69[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_71[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_73[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_75[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_77[1];
    FrElement _sigValue_18[1];
    FrElement _tmp_79[1];
    FrElement _tmp_78[1];
    FrElement _tmp_80[1];
    FrElement _num_64[1];
    FrElement _tmp_81[1];
    FrElement _tmp_83[1];
    FrElement _tmp_84[1];
    FrElement _tmp_87[1];
    FrElement _sigValue_19[1];
    FrElement _tmp_89[1];
    FrElement _tmp_90[1];
    FrElement _tmp_93[1];
    FrElement _sigValue_20[1];
    FrElement _tmp_95[1];
    FrElement _tmp_96[1];
    FrElement _tmp_99[1];
    FrElement _sigValue_21[1];
    FrElement _tmp_101[1];
    FrElement _tmp_102[1];
    FrElement _tmp_105[1];
    FrElement _sigValue_22[1];
    FrElement _tmp_107[1];
    FrElement _tmp_108[1];
    FrElement _tmp_111[1];
    FrElement _sigValue_23[1];
    FrElement _tmp_113[1];
    FrElement _tmp_114[1];
    FrElement _tmp_117[1];
    FrElement _sigValue_24[1];
    FrElement _tmp_119[1];
    FrElement _tmp_120[1];
    FrElement _tmp_123[1];
    FrElement _sigValue_25[1];
    FrElement _tmp_125[1];
    FrElement _tmp_126[1];
    FrElement _tmp_129[1];
    FrElement _sigValue_26[1];
    FrElement _tmp_131[1];
    FrElement _tmp_130[1];
    FrElement _tmp_132[1];
    FrElement _num_115[1];
    FrElement _tmp_133[1];
    FrElement _tmp_134[1];
    FrElement _tmp_135[1];
    FrElement _sigValue_27[1];
    FrElement _tmp_137[1];
    FrElement _tmp_136[1];
    FrElement _tmp_138[1];
    FrElement _tmp_140[1];
    FrElement _tmp_139[1];
    FrElement _tmp_141[1];
    FrElement _num_119[1];
    FrElement _tmp_142[1];
    FrElement _sigValue_28[1];
    FrElement _tmp_145[1];
    FrElement _tmp_144[1];
    FrElement _tmp_146[1];
    int _in_sigIdx_;
    int _offset_8;
    int _paddedIn_sigIdx_;
    int _offset_10;
    int _offset_16;
    int _offset_18;
    int _offset_24;
    int _offset_30;
    int _offset_41;
    int _compIdx;
    int _offset_52;
    int _hin_sigIdx_;
    int _offset_54;
    int _compIdx_1;
    int _out_sigIdx_;
    int _offset_56;
    int _compIdx_2;
    int _offset_58;
    int _hin_sigIdx__1;
    int _offset_60;
    int _compIdx_3;
    int _out_sigIdx__1;
    int _offset_62;
    int _compIdx_4;
    int _offset_64;
    int _hin_sigIdx__2;
    int _offset_66;
    int _compIdx_5;
    int _out_sigIdx__2;
    int _offset_68;
    int _compIdx_6;
    int _offset_70;
    int _hin_sigIdx__3;
    int _offset_72;
    int _compIdx_7;
    int _out_sigIdx__3;
    int _offset_74;
    int _compIdx_8;
    int _offset_76;
    int _hin_sigIdx__4;
    int _offset_78;
    int _compIdx_9;
    int _out_sigIdx__4;
    int _offset_80;
    int _compIdx_10;
    int _offset_82;
    int _hin_sigIdx__5;
    int _offset_84;
    int _compIdx_11;
    int _out_sigIdx__5;
    int _offset_86;
    int _compIdx_12;
    int _offset_88;
    int _hin_sigIdx__6;
    int _offset_90;
    int _compIdx_13;
    int _out_sigIdx__6;
    int _offset_92;
    int _compIdx_14;
    int _offset_94;
    int _hin_sigIdx__7;
    int _offset_96;
    int _compIdx_15;
    int _out_sigIdx__7;
    int _offset_98;
    int _compIdx_16;
    int _offset_105;
    int _inp_sigIdx_;
    int _offset_107;
    int _offset_110;
    int _compIdx_17;
    int _offset_122;
    int _hin_sigIdx__8;
    int _offset_124;
    int _compIdx_18;
    int _out_sigIdx__8;
    int _offset_126;
    int _compIdx_19;
    int _offset_128;
    int _hin_sigIdx__9;
    int _offset_130;
    int _compIdx_20;
    int _out_sigIdx__9;
    int _offset_132;
    int _compIdx_21;
    int _offset_134;
    int _hin_sigIdx__10;
    int _offset_136;
    int _compIdx_22;
    int _out_sigIdx__10;
    int _offset_138;
    int _compIdx_23;
    int _offset_140;
    int _hin_sigIdx__11;
    int _offset_142;
    int _compIdx_24;
    int _out_sigIdx__11;
    int _offset_144;
    int _compIdx_25;
    int _offset_146;
    int _hin_sigIdx__12;
    int _offset_148;
    int _compIdx_26;
    int _out_sigIdx__12;
    int _offset_150;
    int _compIdx_27;
    int _offset_152;
    int _hin_sigIdx__13;
    int _offset_154;
    int _compIdx_28;
    int _out_sigIdx__13;
    int _offset_156;
    int _compIdx_29;
    int _offset_158;
    int _hin_sigIdx__14;
    int _offset_160;
    int _compIdx_30;
    int _out_sigIdx__14;
    int _offset_162;
    int _compIdx_31;
    int _offset_164;
    int _hin_sigIdx__15;
    int _offset_166;
    int _compIdx_32;
    int _out_sigIdx__15;
    int _offset_168;
    int _compIdx_33;
    int _offset_175;
    int _hin_sigIdx__16;
    int _offset_177;
    int _compIdx_34;
    int _offset_179;
    int _out_sigIdx__16;
    int _offset_181;
    int _compIdx_35;
    int _offset_183;
    int _hin_sigIdx__17;
    int _offset_185;
    int _compIdx_36;
    int _offset_187;
    int _out_sigIdx__17;
    int _offset_189;
    int _compIdx_37;
    int _offset_191;
    int _hin_sigIdx__18;
    int _offset_193;
    int _compIdx_38;
    int _offset_195;
    int _out_sigIdx__18;
    int _offset_197;
    int _compIdx_39;
    int _offset_199;
    int _hin_sigIdx__19;
    int _offset_201;
    int _compIdx_40;
    int _offset_203;
    int _out_sigIdx__19;
    int _offset_205;
    int _compIdx_41;
    int _offset_207;
    int _hin_sigIdx__20;
    int _offset_209;
    int _compIdx_42;
    int _offset_211;
    int _out_sigIdx__20;
    int _offset_213;
    int _compIdx_43;
    int _offset_215;
    int _hin_sigIdx__21;
    int _offset_217;
    int _compIdx_44;
    int _offset_219;
    int _out_sigIdx__21;
    int _offset_221;
    int _compIdx_45;
    int _offset_223;
    int _hin_sigIdx__22;
    int _offset_225;
    int _compIdx_46;
    int _offset_227;
    int _out_sigIdx__22;
    int _offset_229;
    int _compIdx_47;
    int _offset_231;
    int _hin_sigIdx__23;
    int _offset_233;
    int _compIdx_48;
    int _offset_235;
    int _out_sigIdx__23;
    int _offset_237;
    int _compIdx_49;
    int _offset_244;
    int _inp_sigIdx__1;
    int _offset_246;
    int _offset_249;
    int _compIdx_50;
    int _offset_260;
    int _out_sigIdx__24;
    int _offset_262;
    int _out_sigIdx__25;
    int _offset_264;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_paddedIn;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_hin;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_hin_1;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_hin_2;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_hin_3;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_hin_4;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_hin_5;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_hin_6;
    Circom_Sizes _sigSizes_out_6;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_hin_7;
    Circom_Sizes _sigSizes_out_7;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_inp;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_hin_8;
    Circom_Sizes _sigSizes_out_8;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _sigSizes_hin_9;
    Circom_Sizes _sigSizes_out_9;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_hin_10;
    Circom_Sizes _sigSizes_out_10;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_hin_11;
    Circom_Sizes _sigSizes_out_11;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_hin_12;
    Circom_Sizes _sigSizes_out_12;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_hin_13;
    Circom_Sizes _sigSizes_out_13;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _sigSizes_hin_14;
    Circom_Sizes _sigSizes_out_14;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_hin_15;
    Circom_Sizes _sigSizes_out_15;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_hin_16;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _sigSizes_out_16;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _sigSizes_hin_17;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_out_17;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_hin_18;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _sigSizes_out_18;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_hin_19;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_out_19;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_hin_20;
    Circom_Sizes _compSizes_26;
    Circom_Sizes _sigSizes_out_20;
    Circom_Sizes _compSizes_27;
    Circom_Sizes _sigSizes_hin_21;
    Circom_Sizes _compSizes_28;
    Circom_Sizes _sigSizes_out_21;
    Circom_Sizes _compSizes_29;
    Circom_Sizes _sigSizes_hin_22;
    Circom_Sizes _compSizes_30;
    Circom_Sizes _sigSizes_out_22;
    Circom_Sizes _compSizes_31;
    Circom_Sizes _sigSizes_hin_23;
    Circom_Sizes _compSizes_32;
    Circom_Sizes _sigSizes_out_23;
    Circom_Sizes _compSizes_33;
    Circom_Sizes _sigSizes_inp_1;
    Circom_Sizes _compSizes_34;
    Circom_Sizes _sigSizes_out_24;
    Circom_Sizes _sigSizes_out_25;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _loopCond_6;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _loopCond_9;
    Fr_copy(&(_tmp_7[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_11[0]), ctx->circuit->constants +15);
    Fr_copy(&(_num_13[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_21[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_40[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_59[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_45[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_64[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_115[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_119[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _paddedIn_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x973a562e93a00828LL /* paddedIn */);
    _out_sigIdx__25 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_paddedIn = ctx->getSignalSizes(__cIdx, 0x973a562e93a00828LL /* paddedIn */);
    _sigSizes_out_25 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[nBits] */
    /* signal output out[256] */
    /* var i */
    /* var k */
    /* var nBlocks */
    /* var bitsLastBlock */
    /* nBlocks = ((nBits + 64)\512)+1 */
    /* signal paddedIn[nBlocks*512] */
    /* for (k=0;k<nBits;k++) */
    /* paddedIn[k] <== in[k] */
    _offset_8 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _paddedIn_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_7;
    while (Fr_isTrue(_loopCond)) {
        /* paddedIn[k] <== in[k] */
        _offset_16 = _in_sigIdx_ + Fr_toInt(k)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_16, _sigValue_1, 1);
        _offset_18 = _paddedIn_sigIdx_ + Fr_toInt(k)*_sigSizes_paddedIn[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_18, _sigValue_1);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 14));
        _loopCond = _tmp_10;
    }
    /* paddedIn[nBits] <== 1 */
    _offset_24 = _paddedIn_sigIdx_ + 1440*_sigSizes_paddedIn[1];
    ctx->setSignal(__cIdx, __cIdx, _offset_24, (ctx->circuit->constants + 1));
    /* for (k=nBits+1;k<nBlocks*512-64;k++) */
    Fr_copyn(k, _tmp_11, 1);
    Fr_lt(_tmp_14, k, (ctx->circuit->constants + 16));
    _loopCond_1 = _tmp_14;
    while (Fr_isTrue(_loopCond_1)) {
        /* paddedIn[k] <== 0 */
        _offset_30 = _paddedIn_sigIdx_ + Fr_toInt(k)*_sigSizes_paddedIn[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_30, (ctx->circuit->constants + 0));
        Fr_copyn(_tmp_16, k, 1);
        Fr_add(_tmp_15, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_15, 1);
        Fr_lt(_tmp_19, k, (ctx->circuit->constants + 16));
        _loopCond_1 = _tmp_19;
    }
    /* for (k = 0;k< 64;k++) */
    Fr_copyn(k, _num_13, 1);
    Fr_lt(_tmp_20, k, (ctx->circuit->constants + 17));
    _loopCond_2 = _tmp_20;
    while (Fr_isTrue(_loopCond_2)) {
        /* paddedIn[nBlocks*512 - k -1] <== (nBits >> k)&1 */
        Fr_shr(_tmp_21, (ctx->circuit->constants + 14), k);
        Fr_band(_tmp_22, _tmp_21, (ctx->circuit->constants + 1));
        Fr_sub(_tmp_24, (ctx->circuit->constants + 18), k);
        Fr_sub(_tmp_25, _tmp_24, (ctx->circuit->constants + 1));
        _offset_41 = _paddedIn_sigIdx_ + Fr_toInt(_tmp_25)*_sigSizes_paddedIn[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_41, _tmp_22);
        Fr_copyn(_tmp_27, k, 1);
        Fr_add(_tmp_26, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_26, 1);
        Fr_lt(_tmp_28, k, (ctx->circuit->constants + 17));
        _loopCond_2 = _tmp_28;
    }
    /* component ha0 = H(0) */
    /* component hb0 = H(1) */
    /* component hc0 = H(2) */
    /* component hd0 = H(3) */
    /* component he0 = H(4) */
    /* component hf0 = H(5) */
    /* component hg0 = H(6) */
    /* component hh0 = H(7) */
    /* component sha256compression[nBlocks] */
    /* for (i=0;i<nBlocks;i++) */
    /* sha256compression[i] = Sha256compression() */
    /* if (i==0) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_21, 1);
    Fr_lt(_tmp_31, k, (ctx->circuit->constants + 9));
    _loopCond_3 = _tmp_31;
    while (Fr_isTrue(_loopCond_3)) {
        /* sha256compression[i].hin[0*32+k] <== ha0.out[k] */
        _compIdx = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_52 = _compIdx;
        _hin_sigIdx_ = ctx->getSignalOffset(_offset_52, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin = ctx->getSignalSizes(_offset_52, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_33, (ctx->circuit->constants + 0), k);
        _offset_54 = _hin_sigIdx_ + Fr_toInt(_tmp_33)*_sigSizes_hin[1];
        _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x335854192ff003b6LL /* ha0 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
        _offset_56 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_1, _offset_56, _sigValue_2, 1);
        ctx->setSignal(__cIdx, _offset_52, _offset_54, _sigValue_2);
        /* sha256compression[i].hin[1*32+k] <== hb0.out[k] */
        _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_58 = _compIdx_2;
        _hin_sigIdx__1 = ctx->getSignalOffset(_offset_58, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_1 = ctx->getSignalSizes(_offset_58, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_35, (ctx->circuit->constants + 9), k);
        _offset_60 = _hin_sigIdx__1 + Fr_toInt(_tmp_35)*_sigSizes_hin_1[1];
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x3354ee192fed208dLL /* hb0 */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_3, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_3, 0x19f79b1921bbcfffLL /* out */);
        _offset_62 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_3, _offset_62, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _offset_58, _offset_60, _sigValue_3);
        /* sha256compression[i].hin[2*32+k] <== hc0.out[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_64 = _compIdx_4;
        _hin_sigIdx__2 = ctx->getSignalOffset(_offset_64, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_2 = ctx->getSignalSizes(_offset_64, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_37, (ctx->circuit->constants + 17), k);
        _offset_66 = _hin_sigIdx__2 + Fr_toInt(_tmp_37)*_sigSizes_hin_2[1];
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x335168192fea0704LL /* hc0 */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_5, _offset_68, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _offset_64, _offset_66, _sigValue_4);
        /* sha256compression[i].hin[3*32+k] <== hd0.out[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_70 = _compIdx_6;
        _hin_sigIdx__3 = ctx->getSignalOffset(_offset_70, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_3 = ctx->getSignalSizes(_offset_70, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_39, (ctx->circuit->constants + 19), k);
        _offset_72 = _hin_sigIdx__3 + Fr_toInt(_tmp_39)*_sigSizes_hin_3[1];
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x334de2192fe6ed7bLL /* hd0 */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _offset_74 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_7, _offset_74, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _offset_70, _offset_72, _sigValue_5);
        /* sha256compression[i].hin[4*32+k] <== he0.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_76 = _compIdx_8;
        _hin_sigIdx__4 = ctx->getSignalOffset(_offset_76, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_4 = ctx->getSignalSizes(_offset_76, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_41, (ctx->circuit->constants + 20), k);
        _offset_78 = _hin_sigIdx__4 + Fr_toInt(_tmp_41)*_sigSizes_hin_4[1];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x334a5c192fe3d3f2LL /* he0 */);
        _out_sigIdx__4 = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_4 = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_80 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_80, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _offset_76, _offset_78, _sigValue_6);
        /* sha256compression[i].hin[5*32+k] <== hf0.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_82 = _compIdx_10;
        _hin_sigIdx__5 = ctx->getSignalOffset(_offset_82, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_5 = ctx->getSignalSizes(_offset_82, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_43, (ctx->circuit->constants + 11), k);
        _offset_84 = _hin_sigIdx__5 + Fr_toInt(_tmp_43)*_sigSizes_hin_5[1];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x334756192fe193e9LL /* hf0 */);
        _out_sigIdx__5 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_5 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_86 = _out_sigIdx__5 + Fr_toInt(k)*_sigSizes_out_5[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_86, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _offset_82, _offset_84, _sigValue_7);
        /* sha256compression[i].hin[6*32+k] <== hg0.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_88 = _compIdx_12;
        _hin_sigIdx__6 = ctx->getSignalOffset(_offset_88, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_6 = ctx->getSignalSizes(_offset_88, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_45, (ctx->circuit->constants + 21), k);
        _offset_90 = _hin_sigIdx__6 + Fr_toInt(_tmp_45)*_sigSizes_hin_6[1];
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x3343d0192fde7a60LL /* hg0 */);
        _out_sigIdx__6 = ctx->getSignalOffset(_compIdx_13, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_6 = ctx->getSignalSizes(_compIdx_13, 0x19f79b1921bbcfffLL /* out */);
        _offset_92 = _out_sigIdx__6 + Fr_toInt(k)*_sigSizes_out_6[1];
        ctx->multiGetSignal(__cIdx, _compIdx_13, _offset_92, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _offset_88, _offset_90, _sigValue_8);
        /* sha256compression[i].hin[7*32+k] <== hh0.out[k] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_94 = _compIdx_14;
        _hin_sigIdx__7 = ctx->getSignalOffset(_offset_94, 0x33732e1930068adcLL /* hin */);
        _sigSizes_hin_7 = ctx->getSignalSizes(_offset_94, 0x33732e1930068adcLL /* hin */);
        Fr_add(_tmp_47, (ctx->circuit->constants + 22), k);
        _offset_96 = _hin_sigIdx__7 + Fr_toInt(_tmp_47)*_sigSizes_hin_7[1];
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x3376ea19300a0027LL /* hh0 */);
        _out_sigIdx__7 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_7 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_98 = _out_sigIdx__7 + Fr_toInt(k)*_sigSizes_out_7[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_98, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _offset_94, _offset_96, _sigValue_9);
        Fr_copyn(_tmp_49, k, 1);
        Fr_add(_tmp_48, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_48, 1);
        Fr_lt(_tmp_50, k, (ctx->circuit->constants + 9));
        _loopCond_3 = _tmp_50;
    }
    /* for (k=0;k<512;k++) */
    Fr_copyn(k, _num_40, 1);
    Fr_lt(_tmp_51, k, (ctx->circuit->constants + 23));
    _loopCond_4 = _tmp_51;
    while (Fr_isTrue(_loopCond_4)) {
        /* sha256compression[i].inp[k] <== paddedIn[i*512+k] */
        _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_105 = _compIdx_16;
        _inp_sigIdx_ = ctx->getSignalOffset(_offset_105, 0x2ba003192bd4cf0aLL /* inp */);
        _sigSizes_inp = ctx->getSignalSizes(_offset_105, 0x2ba003192bd4cf0aLL /* inp */);
        _offset_107 = _inp_sigIdx_ + Fr_toInt(k)*_sigSizes_inp[1];
        Fr_add(_tmp_53, (ctx->circuit->constants + 0), k);
        _offset_110 = _paddedIn_sigIdx_ + Fr_toInt(_tmp_53)*_sigSizes_paddedIn[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_110, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _offset_105, _offset_107, _sigValue_10);
        Fr_copyn(_tmp_55, k, 1);
        Fr_add(_tmp_54, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_54, 1);
        Fr_lt(_tmp_56, k, (ctx->circuit->constants + 23));
        _loopCond_4 = _tmp_56;
    }
    _loopCond_5 = _tmp_59;
    while (Fr_isTrue(_loopCond_5)) {
        /* sha256compression[i] = Sha256compression() */
        /* if (i==0) */
        Fr_eq(_tmp_60, i, (ctx->circuit->constants + 0));
        if (Fr_isTrue(_tmp_60)) {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_45, 1);
            Fr_lt(_tmp_61, k, (ctx->circuit->constants + 9));
            _loopCond_6 = _tmp_61;
            while (Fr_isTrue(_loopCond_6)) {
                /* sha256compression[i].hin[0*32+k] <== ha0.out[k] */
                _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_122 = _compIdx_17 + Fr_toInt(i)*_compSizes_9[1];
                _hin_sigIdx__8 = ctx->getSignalOffset(_offset_122, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_8 = ctx->getSignalSizes(_offset_122, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_63, (ctx->circuit->constants + 0), k);
                _offset_124 = _hin_sigIdx__8 + Fr_toInt(_tmp_63)*_sigSizes_hin_8[1];
                _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0x335854192ff003b6LL /* ha0 */);
                _out_sigIdx__8 = ctx->getSignalOffset(_compIdx_18, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_8 = ctx->getSignalSizes(_compIdx_18, 0x19f79b1921bbcfffLL /* out */);
                _offset_126 = _out_sigIdx__8 + Fr_toInt(k)*_sigSizes_out_8[1];
                ctx->multiGetSignal(__cIdx, _compIdx_18, _offset_126, _sigValue_11, 1);
                ctx->setSignal(__cIdx, _offset_122, _offset_124, _sigValue_11);
                /* sha256compression[i].hin[1*32+k] <== hb0.out[k] */
                _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_128 = _compIdx_19 + Fr_toInt(i)*_compSizes_10[1];
                _hin_sigIdx__9 = ctx->getSignalOffset(_offset_128, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_9 = ctx->getSignalSizes(_offset_128, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_65, (ctx->circuit->constants + 9), k);
                _offset_130 = _hin_sigIdx__9 + Fr_toInt(_tmp_65)*_sigSizes_hin_9[1];
                _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0x3354ee192fed208dLL /* hb0 */);
                _out_sigIdx__9 = ctx->getSignalOffset(_compIdx_20, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_9 = ctx->getSignalSizes(_compIdx_20, 0x19f79b1921bbcfffLL /* out */);
                _offset_132 = _out_sigIdx__9 + Fr_toInt(k)*_sigSizes_out_9[1];
                ctx->multiGetSignal(__cIdx, _compIdx_20, _offset_132, _sigValue_12, 1);
                ctx->setSignal(__cIdx, _offset_128, _offset_130, _sigValue_12);
                /* sha256compression[i].hin[2*32+k] <== hc0.out[k] */
                _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_134 = _compIdx_21 + Fr_toInt(i)*_compSizes_11[1];
                _hin_sigIdx__10 = ctx->getSignalOffset(_offset_134, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_10 = ctx->getSignalSizes(_offset_134, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_67, (ctx->circuit->constants + 17), k);
                _offset_136 = _hin_sigIdx__10 + Fr_toInt(_tmp_67)*_sigSizes_hin_10[1];
                _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0x335168192fea0704LL /* hc0 */);
                _out_sigIdx__10 = ctx->getSignalOffset(_compIdx_22, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_10 = ctx->getSignalSizes(_compIdx_22, 0x19f79b1921bbcfffLL /* out */);
                _offset_138 = _out_sigIdx__10 + Fr_toInt(k)*_sigSizes_out_10[1];
                ctx->multiGetSignal(__cIdx, _compIdx_22, _offset_138, _sigValue_13, 1);
                ctx->setSignal(__cIdx, _offset_134, _offset_136, _sigValue_13);
                /* sha256compression[i].hin[3*32+k] <== hd0.out[k] */
                _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_140 = _compIdx_23 + Fr_toInt(i)*_compSizes_12[1];
                _hin_sigIdx__11 = ctx->getSignalOffset(_offset_140, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_11 = ctx->getSignalSizes(_offset_140, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_69, (ctx->circuit->constants + 19), k);
                _offset_142 = _hin_sigIdx__11 + Fr_toInt(_tmp_69)*_sigSizes_hin_11[1];
                _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0x334de2192fe6ed7bLL /* hd0 */);
                _out_sigIdx__11 = ctx->getSignalOffset(_compIdx_24, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_11 = ctx->getSignalSizes(_compIdx_24, 0x19f79b1921bbcfffLL /* out */);
                _offset_144 = _out_sigIdx__11 + Fr_toInt(k)*_sigSizes_out_11[1];
                ctx->multiGetSignal(__cIdx, _compIdx_24, _offset_144, _sigValue_14, 1);
                ctx->setSignal(__cIdx, _offset_140, _offset_142, _sigValue_14);
                /* sha256compression[i].hin[4*32+k] <== he0.out[k] */
                _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_146 = _compIdx_25 + Fr_toInt(i)*_compSizes_13[1];
                _hin_sigIdx__12 = ctx->getSignalOffset(_offset_146, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_12 = ctx->getSignalSizes(_offset_146, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_71, (ctx->circuit->constants + 20), k);
                _offset_148 = _hin_sigIdx__12 + Fr_toInt(_tmp_71)*_sigSizes_hin_12[1];
                _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x334a5c192fe3d3f2LL /* he0 */);
                _out_sigIdx__12 = ctx->getSignalOffset(_compIdx_26, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_12 = ctx->getSignalSizes(_compIdx_26, 0x19f79b1921bbcfffLL /* out */);
                _offset_150 = _out_sigIdx__12 + Fr_toInt(k)*_sigSizes_out_12[1];
                ctx->multiGetSignal(__cIdx, _compIdx_26, _offset_150, _sigValue_15, 1);
                ctx->setSignal(__cIdx, _offset_146, _offset_148, _sigValue_15);
                /* sha256compression[i].hin[5*32+k] <== hf0.out[k] */
                _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_152 = _compIdx_27 + Fr_toInt(i)*_compSizes_14[1];
                _hin_sigIdx__13 = ctx->getSignalOffset(_offset_152, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_13 = ctx->getSignalSizes(_offset_152, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_73, (ctx->circuit->constants + 11), k);
                _offset_154 = _hin_sigIdx__13 + Fr_toInt(_tmp_73)*_sigSizes_hin_13[1];
                _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0x334756192fe193e9LL /* hf0 */);
                _out_sigIdx__13 = ctx->getSignalOffset(_compIdx_28, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_13 = ctx->getSignalSizes(_compIdx_28, 0x19f79b1921bbcfffLL /* out */);
                _offset_156 = _out_sigIdx__13 + Fr_toInt(k)*_sigSizes_out_13[1];
                ctx->multiGetSignal(__cIdx, _compIdx_28, _offset_156, _sigValue_16, 1);
                ctx->setSignal(__cIdx, _offset_152, _offset_154, _sigValue_16);
                /* sha256compression[i].hin[6*32+k] <== hg0.out[k] */
                _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_158 = _compIdx_29 + Fr_toInt(i)*_compSizes_15[1];
                _hin_sigIdx__14 = ctx->getSignalOffset(_offset_158, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_14 = ctx->getSignalSizes(_offset_158, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_75, (ctx->circuit->constants + 21), k);
                _offset_160 = _hin_sigIdx__14 + Fr_toInt(_tmp_75)*_sigSizes_hin_14[1];
                _compIdx_30 = ctx->getSubComponentOffset(__cIdx, 0x3343d0192fde7a60LL /* hg0 */);
                _out_sigIdx__14 = ctx->getSignalOffset(_compIdx_30, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_14 = ctx->getSignalSizes(_compIdx_30, 0x19f79b1921bbcfffLL /* out */);
                _offset_162 = _out_sigIdx__14 + Fr_toInt(k)*_sigSizes_out_14[1];
                ctx->multiGetSignal(__cIdx, _compIdx_30, _offset_162, _sigValue_17, 1);
                ctx->setSignal(__cIdx, _offset_158, _offset_160, _sigValue_17);
                /* sha256compression[i].hin[7*32+k] <== hh0.out[k] */
                _compIdx_31 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_164 = _compIdx_31 + Fr_toInt(i)*_compSizes_16[1];
                _hin_sigIdx__15 = ctx->getSignalOffset(_offset_164, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_15 = ctx->getSignalSizes(_offset_164, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_77, (ctx->circuit->constants + 22), k);
                _offset_166 = _hin_sigIdx__15 + Fr_toInt(_tmp_77)*_sigSizes_hin_15[1];
                _compIdx_32 = ctx->getSubComponentOffset(__cIdx, 0x3376ea19300a0027LL /* hh0 */);
                _out_sigIdx__15 = ctx->getSignalOffset(_compIdx_32, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_15 = ctx->getSignalSizes(_compIdx_32, 0x19f79b1921bbcfffLL /* out */);
                _offset_168 = _out_sigIdx__15 + Fr_toInt(k)*_sigSizes_out_15[1];
                ctx->multiGetSignal(__cIdx, _compIdx_32, _offset_168, _sigValue_18, 1);
                ctx->setSignal(__cIdx, _offset_164, _offset_166, _sigValue_18);
                Fr_copyn(_tmp_79, k, 1);
                Fr_add(_tmp_78, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_78, 1);
                Fr_lt(_tmp_80, k, (ctx->circuit->constants + 9));
                _loopCond_6 = _tmp_80;
            }
        } else {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_64, 1);
            Fr_lt(_tmp_81, k, (ctx->circuit->constants + 9));
            _loopCond_7 = _tmp_81;
            while (Fr_isTrue(_loopCond_7)) {
                /* sha256compression[i].hin[32*0+k] <== sha256compression[i-1].out[32*0+31-k] */
                _compIdx_33 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_175 = _compIdx_33 + Fr_toInt(i)*_compSizes_17[1];
                _hin_sigIdx__16 = ctx->getSignalOffset(_offset_175, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_16 = ctx->getSignalSizes(_offset_175, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_83, (ctx->circuit->constants + 0), k);
                _offset_177 = _hin_sigIdx__16 + Fr_toInt(_tmp_83)*_sigSizes_hin_16[1];
                _compIdx_34 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_84, i, (ctx->circuit->constants + 1));
                _offset_179 = _compIdx_34 + Fr_toInt(_tmp_84)*_compSizes_18[1];
                _out_sigIdx__16 = ctx->getSignalOffset(_offset_179, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_16 = ctx->getSignalSizes(_offset_179, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_87, (ctx->circuit->constants + 8), k);
                _offset_181 = _out_sigIdx__16 + Fr_toInt(_tmp_87)*_sigSizes_out_16[1];
                ctx->multiGetSignal(__cIdx, _offset_179, _offset_181, _sigValue_19, 1);
                ctx->setSignal(__cIdx, _offset_175, _offset_177, _sigValue_19);
                /* sha256compression[i].hin[32*1+k] <== sha256compression[i-1].out[32*1+31-k] */
                _compIdx_35 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_183 = _compIdx_35 + Fr_toInt(i)*_compSizes_19[1];
                _hin_sigIdx__17 = ctx->getSignalOffset(_offset_183, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_17 = ctx->getSignalSizes(_offset_183, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_89, (ctx->circuit->constants + 9), k);
                _offset_185 = _hin_sigIdx__17 + Fr_toInt(_tmp_89)*_sigSizes_hin_17[1];
                _compIdx_36 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_90, i, (ctx->circuit->constants + 1));
                _offset_187 = _compIdx_36 + Fr_toInt(_tmp_90)*_compSizes_20[1];
                _out_sigIdx__17 = ctx->getSignalOffset(_offset_187, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_17 = ctx->getSignalSizes(_offset_187, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_93, (ctx->circuit->constants + 24), k);
                _offset_189 = _out_sigIdx__17 + Fr_toInt(_tmp_93)*_sigSizes_out_17[1];
                ctx->multiGetSignal(__cIdx, _offset_187, _offset_189, _sigValue_20, 1);
                ctx->setSignal(__cIdx, _offset_183, _offset_185, _sigValue_20);
                /* sha256compression[i].hin[32*2+k] <== sha256compression[i-1].out[32*2+31-k] */
                _compIdx_37 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_191 = _compIdx_37 + Fr_toInt(i)*_compSizes_21[1];
                _hin_sigIdx__18 = ctx->getSignalOffset(_offset_191, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_18 = ctx->getSignalSizes(_offset_191, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_95, (ctx->circuit->constants + 17), k);
                _offset_193 = _hin_sigIdx__18 + Fr_toInt(_tmp_95)*_sigSizes_hin_18[1];
                _compIdx_38 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_96, i, (ctx->circuit->constants + 1));
                _offset_195 = _compIdx_38 + Fr_toInt(_tmp_96)*_compSizes_22[1];
                _out_sigIdx__18 = ctx->getSignalOffset(_offset_195, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_18 = ctx->getSignalSizes(_offset_195, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_99, (ctx->circuit->constants + 25), k);
                _offset_197 = _out_sigIdx__18 + Fr_toInt(_tmp_99)*_sigSizes_out_18[1];
                ctx->multiGetSignal(__cIdx, _offset_195, _offset_197, _sigValue_21, 1);
                ctx->setSignal(__cIdx, _offset_191, _offset_193, _sigValue_21);
                /* sha256compression[i].hin[32*3+k] <== sha256compression[i-1].out[32*3+31-k] */
                _compIdx_39 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_199 = _compIdx_39 + Fr_toInt(i)*_compSizes_23[1];
                _hin_sigIdx__19 = ctx->getSignalOffset(_offset_199, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_19 = ctx->getSignalSizes(_offset_199, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_101, (ctx->circuit->constants + 19), k);
                _offset_201 = _hin_sigIdx__19 + Fr_toInt(_tmp_101)*_sigSizes_hin_19[1];
                _compIdx_40 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_102, i, (ctx->circuit->constants + 1));
                _offset_203 = _compIdx_40 + Fr_toInt(_tmp_102)*_compSizes_24[1];
                _out_sigIdx__19 = ctx->getSignalOffset(_offset_203, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_19 = ctx->getSignalSizes(_offset_203, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_105, (ctx->circuit->constants + 26), k);
                _offset_205 = _out_sigIdx__19 + Fr_toInt(_tmp_105)*_sigSizes_out_19[1];
                ctx->multiGetSignal(__cIdx, _offset_203, _offset_205, _sigValue_22, 1);
                ctx->setSignal(__cIdx, _offset_199, _offset_201, _sigValue_22);
                /* sha256compression[i].hin[32*4+k] <== sha256compression[i-1].out[32*4+31-k] */
                _compIdx_41 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_207 = _compIdx_41 + Fr_toInt(i)*_compSizes_25[1];
                _hin_sigIdx__20 = ctx->getSignalOffset(_offset_207, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_20 = ctx->getSignalSizes(_offset_207, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_107, (ctx->circuit->constants + 20), k);
                _offset_209 = _hin_sigIdx__20 + Fr_toInt(_tmp_107)*_sigSizes_hin_20[1];
                _compIdx_42 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_26 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_108, i, (ctx->circuit->constants + 1));
                _offset_211 = _compIdx_42 + Fr_toInt(_tmp_108)*_compSizes_26[1];
                _out_sigIdx__20 = ctx->getSignalOffset(_offset_211, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_20 = ctx->getSignalSizes(_offset_211, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_111, (ctx->circuit->constants + 10), k);
                _offset_213 = _out_sigIdx__20 + Fr_toInt(_tmp_111)*_sigSizes_out_20[1];
                ctx->multiGetSignal(__cIdx, _offset_211, _offset_213, _sigValue_23, 1);
                ctx->setSignal(__cIdx, _offset_207, _offset_209, _sigValue_23);
                /* sha256compression[i].hin[32*5+k] <== sha256compression[i-1].out[32*5+31-k] */
                _compIdx_43 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_27 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_215 = _compIdx_43 + Fr_toInt(i)*_compSizes_27[1];
                _hin_sigIdx__21 = ctx->getSignalOffset(_offset_215, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_21 = ctx->getSignalSizes(_offset_215, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_113, (ctx->circuit->constants + 11), k);
                _offset_217 = _hin_sigIdx__21 + Fr_toInt(_tmp_113)*_sigSizes_hin_21[1];
                _compIdx_44 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_28 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_114, i, (ctx->circuit->constants + 1));
                _offset_219 = _compIdx_44 + Fr_toInt(_tmp_114)*_compSizes_28[1];
                _out_sigIdx__21 = ctx->getSignalOffset(_offset_219, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_21 = ctx->getSignalSizes(_offset_219, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_117, (ctx->circuit->constants + 27), k);
                _offset_221 = _out_sigIdx__21 + Fr_toInt(_tmp_117)*_sigSizes_out_21[1];
                ctx->multiGetSignal(__cIdx, _offset_219, _offset_221, _sigValue_24, 1);
                ctx->setSignal(__cIdx, _offset_215, _offset_217, _sigValue_24);
                /* sha256compression[i].hin[32*6+k] <== sha256compression[i-1].out[32*6+31-k] */
                _compIdx_45 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_29 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_223 = _compIdx_45 + Fr_toInt(i)*_compSizes_29[1];
                _hin_sigIdx__22 = ctx->getSignalOffset(_offset_223, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_22 = ctx->getSignalSizes(_offset_223, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_119, (ctx->circuit->constants + 21), k);
                _offset_225 = _hin_sigIdx__22 + Fr_toInt(_tmp_119)*_sigSizes_hin_22[1];
                _compIdx_46 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_30 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_120, i, (ctx->circuit->constants + 1));
                _offset_227 = _compIdx_46 + Fr_toInt(_tmp_120)*_compSizes_30[1];
                _out_sigIdx__22 = ctx->getSignalOffset(_offset_227, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_22 = ctx->getSignalSizes(_offset_227, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_123, (ctx->circuit->constants + 28), k);
                _offset_229 = _out_sigIdx__22 + Fr_toInt(_tmp_123)*_sigSizes_out_22[1];
                ctx->multiGetSignal(__cIdx, _offset_227, _offset_229, _sigValue_25, 1);
                ctx->setSignal(__cIdx, _offset_223, _offset_225, _sigValue_25);
                /* sha256compression[i].hin[32*7+k] <== sha256compression[i-1].out[32*7+31-k] */
                _compIdx_47 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_31 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _offset_231 = _compIdx_47 + Fr_toInt(i)*_compSizes_31[1];
                _hin_sigIdx__23 = ctx->getSignalOffset(_offset_231, 0x33732e1930068adcLL /* hin */);
                _sigSizes_hin_23 = ctx->getSignalSizes(_offset_231, 0x33732e1930068adcLL /* hin */);
                Fr_add(_tmp_125, (ctx->circuit->constants + 22), k);
                _offset_233 = _hin_sigIdx__23 + Fr_toInt(_tmp_125)*_sigSizes_hin_23[1];
                _compIdx_48 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                _compSizes_32 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
                Fr_sub(_tmp_126, i, (ctx->circuit->constants + 1));
                _offset_235 = _compIdx_48 + Fr_toInt(_tmp_126)*_compSizes_32[1];
                _out_sigIdx__23 = ctx->getSignalOffset(_offset_235, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_23 = ctx->getSignalSizes(_offset_235, 0x19f79b1921bbcfffLL /* out */);
                Fr_sub(_tmp_129, (ctx->circuit->constants + 12), k);
                _offset_237 = _out_sigIdx__23 + Fr_toInt(_tmp_129)*_sigSizes_out_23[1];
                ctx->multiGetSignal(__cIdx, _offset_235, _offset_237, _sigValue_26, 1);
                ctx->setSignal(__cIdx, _offset_231, _offset_233, _sigValue_26);
                Fr_copyn(_tmp_131, k, 1);
                Fr_add(_tmp_130, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_130, 1);
                Fr_lt(_tmp_132, k, (ctx->circuit->constants + 9));
                _loopCond_7 = _tmp_132;
            }
        }
        /* for (k=0;k<512;k++) */
        Fr_copyn(k, _num_115, 1);
        Fr_lt(_tmp_133, k, (ctx->circuit->constants + 23));
        _loopCond_8 = _tmp_133;
        while (Fr_isTrue(_loopCond_8)) {
            /* sha256compression[i].inp[k] <== paddedIn[i*512+k] */
            _compIdx_49 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
            _compSizes_33 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
            _offset_244 = _compIdx_49 + Fr_toInt(i)*_compSizes_33[1];
            _inp_sigIdx__1 = ctx->getSignalOffset(_offset_244, 0x2ba003192bd4cf0aLL /* inp */);
            _sigSizes_inp_1 = ctx->getSignalSizes(_offset_244, 0x2ba003192bd4cf0aLL /* inp */);
            _offset_246 = _inp_sigIdx__1 + Fr_toInt(k)*_sigSizes_inp_1[1];
            Fr_mul(_tmp_134, i, (ctx->circuit->constants + 23));
            Fr_add(_tmp_135, _tmp_134, k);
            _offset_249 = _paddedIn_sigIdx_ + Fr_toInt(_tmp_135)*_sigSizes_paddedIn[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_249, _sigValue_27, 1);
            ctx->setSignal(__cIdx, _offset_244, _offset_246, _sigValue_27);
            Fr_copyn(_tmp_137, k, 1);
            Fr_add(_tmp_136, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_136, 1);
            Fr_lt(_tmp_138, k, (ctx->circuit->constants + 23));
            _loopCond_8 = _tmp_138;
        }
        Fr_copyn(_tmp_140, i, 1);
        Fr_add(_tmp_139, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_139, 1);
        Fr_lt(_tmp_141, i, (ctx->circuit->constants + 5));
        _loopCond_5 = _tmp_141;
    }
    /* for (k=0;k<256;k++) */
    Fr_copyn(k, _num_119, 1);
    Fr_lt(_tmp_142, k, (ctx->circuit->constants + 13));
    _loopCond_9 = _tmp_142;
    while (Fr_isTrue(_loopCond_9)) {
        /* out[k] <== sha256compression[nBlocks-1].out[k] */
        _compIdx_50 = ctx->getSubComponentOffset(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _compSizes_34 = ctx->getSubComponentSizes(__cIdx, 0xed3059d4e7ba1c14LL /* sha256compression */);
        _offset_260 = _compIdx_50 + 2*_compSizes_34[1];
        _out_sigIdx__24 = ctx->getSignalOffset(_offset_260, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_24 = ctx->getSignalSizes(_offset_260, 0x19f79b1921bbcfffLL /* out */);
        _offset_262 = _out_sigIdx__24 + Fr_toInt(k)*_sigSizes_out_24[1];
        ctx->multiGetSignal(__cIdx, _offset_260, _offset_262, _sigValue_28, 1);
        _offset_264 = _out_sigIdx__25 + Fr_toInt(k)*_sigSizes_out_25[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_264, _sigValue_28);
        Fr_copyn(_tmp_145, k, 1);
        Fr_add(_tmp_144, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_144, 1);
        Fr_lt(_tmp_146, k, (ctx->circuit->constants + 13));
        _loopCond_9 = _tmp_146;
    }
    ctx->finished(__cIdx);
}
/*
H
x=0
*/
void H_1a7c65ff7b2fe8c0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 29), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=1
*/
void H_1a7c66ff7b2fea73(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 30), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=2
*/
void H_1a7c67ff7b2fec26(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 31), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=3
*/
void H_1a7c68ff7b2fedd9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 32), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=4
*/
void H_1a7c69ff7b2fef8c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 33), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=5
*/
void H_1a7c6aff7b2ff13f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 34), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=6
*/
void H_1a7c6bff7b2ff2f2(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 35), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
H
x=7
*/
void H_1a7c6cff7b2ff4a5(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[8] = [0x6a09e667,
                 0xbb67ae85,
                 0x3c6ef372,
                 0xa54ff53a,
                 0x510e527f,
                 0x9b05688c,
                 0x1f83d9ab,
                 0x5be0cd19] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 36), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
rrot
n=[6]
*/
void rrot_94c2d1f57b57897f(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 38));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 39));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[11]
*/
void rrot_5baa0120b8787bdb(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 41));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 42));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[25]
*/
void rrot_42138a20aa1728da(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 43));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 44));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
bsigma1
*/
void bsigma1_3ef37508f43ed7df(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _retrrot[1];
    FrElement _retrrot_1[1];
    FrElement _tmp[1];
    FrElement _retrrot_2[1];
    FrElement _tmp_1[1];
    /* return rrot(x,6) ^ rrot(x,11) ^ rrot(x,25); */
    rrot_94c2d1f57b57897f(ctx, _retrrot, x);
    rrot_5baa0120b8787bdb(ctx, _retrrot_1, x);
    Fr_bxor(_tmp, _retrrot, _retrrot_1);
    rrot_42138a20aa1728da(ctx, _retrrot_2, x);
    Fr_bxor(_tmp_1, _tmp, _retrrot_2);
    Fr_copyn(__retValue, _tmp_1, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
Ch
*/
void Ch_090f5607b5a6f48e(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x, PFrElement y, PFrElement z) {
    FrElement _tmp[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    /* return (x & y) ^ ((0xFFFFFFFF ^x) & z); */
    Fr_band(_tmp, x, y);
    Fr_bxor(_tmp_1, (ctx->circuit->constants + 40), x);
    Fr_band(_tmp_2, _tmp_1, z);
    Fr_bxor(_tmp_3, _tmp, _tmp_2);
    Fr_copyn(__retValue, _tmp_3, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[2]
*/
void rrot_94d111f57b64339b(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 2));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 46));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[13]
*/
void rrot_5bb0c520b87e3495(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 47));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 4));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[22]
*/
void rrot_42248a20aa259c0d(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 48));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 49));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
bsigma0
*/
void bsigma0_3ef37408f43ed62c(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _retrrot[1];
    FrElement _retrrot_1[1];
    FrElement _tmp[1];
    FrElement _retrrot_2[1];
    FrElement _tmp_1[1];
    /* return rrot(x,2) ^ rrot(x,13) ^ rrot(x,22); */
    rrot_94d111f57b64339b(ctx, _retrrot, x);
    rrot_5bb0c520b87e3495(ctx, _retrrot_1, x);
    Fr_bxor(_tmp, _retrrot, _retrrot_1);
    rrot_42248a20aa259c0d(ctx, _retrrot_2, x);
    Fr_bxor(_tmp_1, _tmp, _retrrot_2);
    Fr_copyn(__retValue, _tmp_1, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
Maj
*/
void Maj_1e187f19b5264423(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x, PFrElement y, PFrElement z) {
    FrElement _tmp[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return (x&y) ^ (x&z) ^ (y&z); */
    Fr_band(_tmp, x, y);
    Fr_band(_tmp_1, x, z);
    Fr_bxor(_tmp_2, _tmp, _tmp_1);
    Fr_band(_tmp_3, y, z);
    Fr_bxor(_tmp_4, _tmp_2, _tmp_3);
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[17]
*/
void rrot_5ba30520b87263f9(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 51));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 52));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[19]
*/
void rrot_5b8ec120b8614763(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 4));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 47));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
ssigma1
*/
void ssigma1_74561342c3118138(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _retrrot[1];
    FrElement _retrrot_1[1];
    FrElement _tmp[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    /* return rrot(x,17) ^ rrot(x,19) ^ (x >> 10); */
    rrot_5ba30520b87263f9(ctx, _retrrot, x);
    rrot_5b8ec120b8614763(ctx, _retrrot_1, x);
    Fr_bxor(_tmp, _retrrot, _retrrot_1);
    Fr_shr(_tmp_1, x, (ctx->circuit->constants + 49));
    Fr_bxor(_tmp_2, _tmp, _tmp_1);
    Fr_copyn(__retValue, _tmp_2, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[7]
*/
void rrot_94c6d5f57b5b7922(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 44));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 43));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
rrot
n=[18]
*/
void rrot_5b920520b863f0c6(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _tmp[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    /* return ((x >> n) | (x << (32-n))) & 0xFFFFFFFF; */
    Fr_shr(_tmp, x, (ctx->circuit->constants + 53));
    Fr_shl(_tmp_2, x, (ctx->circuit->constants + 54));
    Fr_bor(_tmp_3, _tmp, _tmp_2);
    Fr_band(_tmp_4, _tmp_3, (ctx->circuit->constants + 40));
    Fr_copyn(__retValue, _tmp_4, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
ssigma0
*/
void ssigma0_74561442c31182eb(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement x) {
    FrElement _retrrot[1];
    FrElement _retrrot_1[1];
    FrElement _tmp[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    /* return rrot(x,7) ^ rrot(x,18) ^ (x >> 3); */
    rrot_94c6d5f57b5b7922(ctx, _retrrot, x);
    rrot_5b920520b863f0c6(ctx, _retrrot_1, x);
    Fr_bxor(_tmp, _retrrot, _retrrot_1);
    Fr_shr(_tmp_1, x, (ctx->circuit->constants + 5));
    Fr_bxor(_tmp_2, _tmp, _tmp_1);
    Fr_copyn(__retValue, _tmp_2, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
sha256K
*/
void sha256K_e17a6b8897b9b0e3(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement i) {
    FrElement k[64];
    int _offset_2;
    PFrElement _v;
    Fr_copy(&(k[0]), ctx->circuit->constants +45);
    Fr_copy(&(k[1]), ctx->circuit->constants +55);
    Fr_copy(&(k[2]), ctx->circuit->constants +56);
    Fr_copy(&(k[3]), ctx->circuit->constants +57);
    Fr_copy(&(k[4]), ctx->circuit->constants +58);
    Fr_copy(&(k[5]), ctx->circuit->constants +59);
    Fr_copy(&(k[6]), ctx->circuit->constants +60);
    Fr_copy(&(k[7]), ctx->circuit->constants +61);
    Fr_copy(&(k[8]), ctx->circuit->constants +62);
    Fr_copy(&(k[9]), ctx->circuit->constants +63);
    Fr_copy(&(k[10]), ctx->circuit->constants +64);
    Fr_copy(&(k[11]), ctx->circuit->constants +65);
    Fr_copy(&(k[12]), ctx->circuit->constants +66);
    Fr_copy(&(k[13]), ctx->circuit->constants +67);
    Fr_copy(&(k[14]), ctx->circuit->constants +68);
    Fr_copy(&(k[15]), ctx->circuit->constants +69);
    Fr_copy(&(k[16]), ctx->circuit->constants +70);
    Fr_copy(&(k[17]), ctx->circuit->constants +71);
    Fr_copy(&(k[18]), ctx->circuit->constants +72);
    Fr_copy(&(k[19]), ctx->circuit->constants +73);
    Fr_copy(&(k[20]), ctx->circuit->constants +74);
    Fr_copy(&(k[21]), ctx->circuit->constants +75);
    Fr_copy(&(k[22]), ctx->circuit->constants +76);
    Fr_copy(&(k[23]), ctx->circuit->constants +77);
    Fr_copy(&(k[24]), ctx->circuit->constants +78);
    Fr_copy(&(k[25]), ctx->circuit->constants +79);
    Fr_copy(&(k[26]), ctx->circuit->constants +80);
    Fr_copy(&(k[27]), ctx->circuit->constants +81);
    Fr_copy(&(k[28]), ctx->circuit->constants +82);
    Fr_copy(&(k[29]), ctx->circuit->constants +83);
    Fr_copy(&(k[30]), ctx->circuit->constants +84);
    Fr_copy(&(k[31]), ctx->circuit->constants +85);
    Fr_copy(&(k[32]), ctx->circuit->constants +86);
    Fr_copy(&(k[33]), ctx->circuit->constants +87);
    Fr_copy(&(k[34]), ctx->circuit->constants +88);
    Fr_copy(&(k[35]), ctx->circuit->constants +89);
    Fr_copy(&(k[36]), ctx->circuit->constants +90);
    Fr_copy(&(k[37]), ctx->circuit->constants +91);
    Fr_copy(&(k[38]), ctx->circuit->constants +92);
    Fr_copy(&(k[39]), ctx->circuit->constants +93);
    Fr_copy(&(k[40]), ctx->circuit->constants +94);
    Fr_copy(&(k[41]), ctx->circuit->constants +95);
    Fr_copy(&(k[42]), ctx->circuit->constants +96);
    Fr_copy(&(k[43]), ctx->circuit->constants +97);
    Fr_copy(&(k[44]), ctx->circuit->constants +98);
    Fr_copy(&(k[45]), ctx->circuit->constants +99);
    Fr_copy(&(k[46]), ctx->circuit->constants +100);
    Fr_copy(&(k[47]), ctx->circuit->constants +101);
    Fr_copy(&(k[48]), ctx->circuit->constants +102);
    Fr_copy(&(k[49]), ctx->circuit->constants +103);
    Fr_copy(&(k[50]), ctx->circuit->constants +104);
    Fr_copy(&(k[51]), ctx->circuit->constants +105);
    Fr_copy(&(k[52]), ctx->circuit->constants +106);
    Fr_copy(&(k[53]), ctx->circuit->constants +107);
    Fr_copy(&(k[54]), ctx->circuit->constants +108);
    Fr_copy(&(k[55]), ctx->circuit->constants +109);
    Fr_copy(&(k[56]), ctx->circuit->constants +110);
    Fr_copy(&(k[57]), ctx->circuit->constants +111);
    Fr_copy(&(k[58]), ctx->circuit->constants +112);
    Fr_copy(&(k[59]), ctx->circuit->constants +113);
    Fr_copy(&(k[60]), ctx->circuit->constants +114);
    Fr_copy(&(k[61]), ctx->circuit->constants +115);
    Fr_copy(&(k[62]), ctx->circuit->constants +116);
    Fr_copy(&(k[63]), ctx->circuit->constants +117);
    /* var k[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* return k[i]; */
    _offset_2 = Fr_toInt(i);
    _v = k + _offset_2;
    Fr_copyn(__retValue, _v, 1);
    goto returnFunc;
    returnFunc: ;
}
/*
sha256compression
*/
void sha256compression_ed3059d4e7ba1c14(Circom_CalcWit *ctx, PFrElement __retValue , PFrElement hin, PFrElement inp) {
    FrElement _tmp_4[1];
    FrElement _tmp_5[1];
    FrElement H[8];
    FrElement _tmp_8[1];
    FrElement j[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _tmp_13[1];
    FrElement _tmp_15[1];
    FrElement _tmp_18[1];
    FrElement i[1];
    FrElement _num_12[1];
    FrElement _num_13[1];
    FrElement _tmp_19[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _tmp_23[1];
    FrElement _tmp_25[1];
    FrElement _tmp_24[1];
    FrElement _tmp_26[1];
    FrElement _tmp_28[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement a[1];
    FrElement b[1];
    FrElement c[1];
    FrElement d[1];
    FrElement e[1];
    FrElement f[1];
    FrElement g[1];
    FrElement h[1];
    FrElement _tmp_36[1];
    FrElement _tmp_37[1];
    FrElement w[64];
    FrElement _tmp_40[1];
    FrElement j_1[1];
    FrElement _tmp_43[1];
    FrElement _tmp_44[1];
    FrElement _tmp_45[1];
    FrElement _tmp_47[1];
    FrElement _tmp_46[1];
    FrElement _tmp_48[1];
    FrElement _retbsigma1[1];
    FrElement _tmp_49[1];
    FrElement _retCh[1];
    FrElement _tmp_50[1];
    FrElement _tmp_51[1];
    FrElement _tmp_52[1];
    FrElement _tmp_53[1];
    FrElement T1[1];
    FrElement _retbsigma0[1];
    FrElement _retMaj[1];
    FrElement _tmp_54[1];
    FrElement _tmp_55[1];
    FrElement T2[1];
    FrElement _tmp_56[1];
    FrElement _tmp_57[1];
    FrElement _tmp_58[1];
    FrElement _tmp_59[1];
    FrElement _tmp_62[1];
    FrElement i_1[1];
    FrElement _tmp_63[1];
    FrElement _num_45[1];
    FrElement _num_46[1];
    FrElement _tmp_64[1];
    FrElement _tmp_65[1];
    FrElement _tmp_66[1];
    FrElement _tmp_67[1];
    FrElement _tmp_68[1];
    FrElement _tmp_69[1];
    FrElement _tmp_71[1];
    FrElement _tmp_70[1];
    FrElement _tmp_72[1];
    FrElement _tmp_73[1];
    FrElement _retssigma1[1];
    FrElement _tmp_74[1];
    FrElement _tmp_75[1];
    FrElement _tmp_76[1];
    FrElement _retssigma0[1];
    FrElement _tmp_77[1];
    FrElement _tmp_78[1];
    FrElement _tmp_79[1];
    FrElement _tmp_80[1];
    FrElement _retbsigma1_1[1];
    FrElement _tmp_81[1];
    FrElement _retCh_1[1];
    FrElement _tmp_82[1];
    FrElement _retsha256K[1];
    FrElement _tmp_83[1];
    FrElement _tmp_84[1];
    FrElement _tmp_85[1];
    FrElement _retbsigma0_1[1];
    FrElement _retMaj_1[1];
    FrElement _tmp_86[1];
    FrElement _tmp_87[1];
    FrElement _tmp_88[1];
    FrElement _tmp_89[1];
    FrElement _tmp_90[1];
    FrElement _tmp_91[1];
    FrElement _tmp_93[1];
    FrElement _tmp_92[1];
    FrElement _tmp_94[1];
    FrElement _tmp_95[1];
    FrElement _tmp_96[1];
    FrElement _tmp_97[1];
    FrElement _tmp_98[1];
    FrElement _tmp_99[1];
    FrElement _tmp_100[1];
    FrElement _tmp_101[1];
    FrElement _tmp_102[1];
    FrElement _tmp_105[1];
    FrElement _tmp_106[1];
    FrElement out[256];
    FrElement _tmp_112[1];
    FrElement j_2[1];
    FrElement _tmp_113[1];
    FrElement _tmp_114[1];
    FrElement _tmp_117[1];
    FrElement _tmp_119[1];
    FrElement _tmp_118[1];
    FrElement _tmp_120[1];
    FrElement _tmp_123[1];
    FrElement i_2[1];
    FrElement _num_90[1];
    FrElement _tmp_124[1];
    FrElement _tmp_125[1];
    FrElement _tmp_126[1];
    FrElement _tmp_127[1];
    FrElement _tmp_128[1];
    FrElement _tmp_129[1];
    FrElement _tmp_131[1];
    FrElement _tmp_130[1];
    FrElement _tmp_132[1];
    FrElement _tmp_134[1];
    FrElement _tmp_133[1];
    FrElement _tmp_135[1];
    int _offset_21;
    int _offset_32;
    int _offset_36;
    int _offset_39;
    int _offset_42;
    int _offset_87;
    int _offset_131;
    int _offset_135;
    int _offset_138;
    int _offset_141;
    int _offset_146;
    int _offset_148;
    int _offset_150;
    int _offset_152;
    int _offset_154;
    int _offset_162;
    int _offset_232;
    int _offset_242;
    int _offset_246;
    PFrElement _v_7;
    PFrElement _loopCond;
    PFrElement _v_13;
    PFrElement _v_15;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _v_19;
    PFrElement _v_20;
    PFrElement _v_21;
    PFrElement _v_22;
    PFrElement _v_23;
    PFrElement _v_24;
    PFrElement _v_25;
    PFrElement _v_26;
    PFrElement _v_27;
    PFrElement _v_28;
    PFrElement _v_37;
    PFrElement _loopCond_3;
    PFrElement _v_43;
    PFrElement _v_45;
    PFrElement _v_49;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _v_52;
    PFrElement _v_53;
    PFrElement _v_54;
    PFrElement _v_55;
    PFrElement _v_56;
    PFrElement _v_57;
    PFrElement _v_58;
    PFrElement _v_59;
    PFrElement _v_60;
    PFrElement _v_61;
    PFrElement _v_62;
    PFrElement _v_63;
    PFrElement _v_64;
    PFrElement _v_65;
    PFrElement _v_66;
    PFrElement _v_70;
    PFrElement _loopCond_6;
    PFrElement _v_77;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _v_81;
    Fr_copy(&(H[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_8[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_18[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_12[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_13[0]), ctx->circuit->constants +0);
    Fr_copy(&(w[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_40[0]), ctx->circuit->constants +1);
    Fr_copy(&(j_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_62[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_45[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_46[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_112[0]), ctx->circuit->constants +1);
    Fr_copy(&(j_2[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_123[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_2[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_90[0]), ctx->circuit->constants +0);
    /* var H[8] */
    /* var a */
    /* var b */
    /* var c */
    /* var d */
    /* var e */
    /* var f */
    /* var g */
    /* var h */
    /* var out[256] */
    /* for (var i=0;i<8;i++) */
    /* H[i] = 0 */
    /* for (var j=0;j<32;j++) */
    /* H[i] += hin[i*32+j] << j */
    _v_7 = hin;
    Fr_shl(_tmp_4, _v_7, (ctx->circuit->constants + 0));
    Fr_add(_tmp_5, (ctx->circuit->constants + 0), _tmp_4);
    Fr_copyn(H, _tmp_5, 1);
    _loopCond = _tmp_8;
    while (Fr_isTrue(_loopCond)) {
        /* H[i] += hin[i*32+j] << j */
        _v_13 = H;
        Fr_add(_tmp_10, (ctx->circuit->constants + 0), j);
        _offset_21 = Fr_toInt(_tmp_10);
        _v_15 = hin + _offset_21;
        Fr_shl(_tmp_11, _v_15, j);
        Fr_add(_tmp_12, _v_13, _tmp_11);
        Fr_copyn(H, _tmp_12, 1);
        Fr_copyn(_tmp_14, j, 1);
        Fr_add(_tmp_13, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_13, 1);
        Fr_lt(_tmp_15, j, (ctx->circuit->constants + 9));
        _loopCond = _tmp_15;
    }
    _loopCond_1 = _tmp_18;
    while (Fr_isTrue(_loopCond_1)) {
        /* H[i] = 0 */
        _offset_32 = Fr_toInt(i);
        Fr_copyn(H+_offset_32, _num_12, 1);
        /* for (var j=0;j<32;j++) */
        Fr_copyn(j, _num_13, 1);
        Fr_lt(_tmp_19, j, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_19;
        while (Fr_isTrue(_loopCond_2)) {
            /* H[i] += hin[i*32+j] << j */
            _offset_36 = Fr_toInt(i);
            _v_19 = H + _offset_36;
            Fr_mul(_tmp_20, i, (ctx->circuit->constants + 9));
            Fr_add(_tmp_21, _tmp_20, j);
            _offset_39 = Fr_toInt(_tmp_21);
            _v_20 = hin + _offset_39;
            Fr_shl(_tmp_22, _v_20, j);
            Fr_add(_tmp_23, _v_19, _tmp_22);
            _offset_42 = Fr_toInt(i);
            Fr_copyn(H+_offset_42, _tmp_23, 1);
            Fr_copyn(_tmp_25, j, 1);
            Fr_add(_tmp_24, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_24, 1);
            Fr_lt(_tmp_26, j, (ctx->circuit->constants + 9));
            _loopCond_2 = _tmp_26;
        }
        Fr_copyn(_tmp_28, i, 1);
        Fr_add(_tmp_27, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_27, 1);
        Fr_lt(_tmp_29, i, (ctx->circuit->constants + 37));
        _loopCond_1 = _tmp_29;
    }
    /* a=H[0] */
    _v_21 = H;
    Fr_copyn(a, _v_21, 1);
    /* b=H[1] */
    _v_22 = H + 1;
    Fr_copyn(b, _v_22, 1);
    /* c=H[2] */
    _v_23 = H + 2;
    Fr_copyn(c, _v_23, 1);
    /* d=H[3] */
    _v_24 = H + 3;
    Fr_copyn(d, _v_24, 1);
    /* e=H[4] */
    _v_25 = H + 4;
    Fr_copyn(e, _v_25, 1);
    /* f=H[5] */
    _v_26 = H + 5;
    Fr_copyn(f, _v_26, 1);
    /* g=H[6] */
    _v_27 = H + 6;
    Fr_copyn(g, _v_27, 1);
    /* h=H[7] */
    _v_28 = H + 7;
    Fr_copyn(h, _v_28, 1);
    /* var w[64] */
    /* var T1 */
    /* var T2 */
    /* for (var i=0;i<64;i++) */
    /* if (i<16) */
    /* w[i]=0 */
    /* for (var j=0;j<32;j++) */
    /* w[i] +=  inp[i*32+31-j]<<j */
    _v_37 = inp + 31;
    Fr_shl(_tmp_36, _v_37, (ctx->circuit->constants + 0));
    Fr_add(_tmp_37, (ctx->circuit->constants + 0), _tmp_36);
    Fr_copyn(w, _tmp_37, 1);
    _loopCond_3 = _tmp_40;
    while (Fr_isTrue(_loopCond_3)) {
        /* w[i] +=  inp[i*32+31-j]<<j */
        _v_43 = w;
        Fr_sub(_tmp_43, (ctx->circuit->constants + 8), j_1);
        _offset_87 = Fr_toInt(_tmp_43);
        _v_45 = inp + _offset_87;
        Fr_shl(_tmp_44, _v_45, j_1);
        Fr_add(_tmp_45, _v_43, _tmp_44);
        Fr_copyn(w, _tmp_45, 1);
        Fr_copyn(_tmp_47, j_1, 1);
        Fr_add(_tmp_46, j_1, (ctx->circuit->constants + 1));
        Fr_copyn(j_1, _tmp_46, 1);
        Fr_lt(_tmp_48, j_1, (ctx->circuit->constants + 9));
        _loopCond_3 = _tmp_48;
    }
    /* T1 = (h + bsigma1(e) + Ch(e,f,g) + sha256K(i) + w[i]) & 0xFFFFFFFF */
    bsigma1_3ef37508f43ed7df(ctx, _retbsigma1, e);
    Fr_add(_tmp_49, h, _retbsigma1);
    Ch_090f5607b5a6f48e(ctx, _retCh, e,f,g);
    Fr_add(_tmp_50, _tmp_49, _retCh);
    Fr_add(_tmp_51, _tmp_50, (ctx->circuit->constants + 45));
    _v_49 = w;
    Fr_add(_tmp_52, _tmp_51, _v_49);
    Fr_band(_tmp_53, _tmp_52, (ctx->circuit->constants + 40));
    Fr_copyn(T1, _tmp_53, 1);
    /* T2 = (bsigma0(a) + Maj(a,b,c)) & 0xFFFFFFFF */
    bsigma0_3ef37408f43ed62c(ctx, _retbsigma0, a);
    Maj_1e187f19b5264423(ctx, _retMaj, a,b,c);
    Fr_add(_tmp_54, _retbsigma0, _retMaj);
    Fr_band(_tmp_55, _tmp_54, (ctx->circuit->constants + 40));
    Fr_copyn(T2, _tmp_55, 1);
    /* h=g */
    Fr_copyn(h, g, 1);
    /* g=f */
    Fr_copyn(g, f, 1);
    /* f=e */
    Fr_copyn(f, e, 1);
    /* e=(d+T1) & 0xFFFFFFFF */
    Fr_add(_tmp_56, d, T1);
    Fr_band(_tmp_57, _tmp_56, (ctx->circuit->constants + 40));
    Fr_copyn(e, _tmp_57, 1);
    /* d=c */
    Fr_copyn(d, c, 1);
    /* c=b */
    Fr_copyn(c, b, 1);
    /* b=a */
    Fr_copyn(b, a, 1);
    /* a=(T1+T2) & 0xFFFFFFFF */
    Fr_add(_tmp_58, T1, T2);
    Fr_band(_tmp_59, _tmp_58, (ctx->circuit->constants + 40));
    Fr_copyn(a, _tmp_59, 1);
    _loopCond_4 = _tmp_62;
    while (Fr_isTrue(_loopCond_4)) {
        /* if (i<16) */
        Fr_lt(_tmp_63, i_1, (ctx->circuit->constants + 50));
        if (Fr_isTrue(_tmp_63)) {
            /* w[i]=0 */
            _offset_131 = Fr_toInt(i_1);
            Fr_copyn(w+_offset_131, _num_45, 1);
            /* for (var j=0;j<32;j++) */
            Fr_copyn(j_1, _num_46, 1);
            Fr_lt(_tmp_64, j_1, (ctx->circuit->constants + 9));
            _loopCond_5 = _tmp_64;
            while (Fr_isTrue(_loopCond_5)) {
                /* w[i] +=  inp[i*32+31-j]<<j */
                _offset_135 = Fr_toInt(i_1);
                _v_52 = w + _offset_135;
                Fr_mul(_tmp_65, i_1, (ctx->circuit->constants + 9));
                Fr_add(_tmp_66, _tmp_65, (ctx->circuit->constants + 8));
                Fr_sub(_tmp_67, _tmp_66, j_1);
                _offset_138 = Fr_toInt(_tmp_67);
                _v_53 = inp + _offset_138;
                Fr_shl(_tmp_68, _v_53, j_1);
                Fr_add(_tmp_69, _v_52, _tmp_68);
                _offset_141 = Fr_toInt(i_1);
                Fr_copyn(w+_offset_141, _tmp_69, 1);
                Fr_copyn(_tmp_71, j_1, 1);
                Fr_add(_tmp_70, j_1, (ctx->circuit->constants + 1));
                Fr_copyn(j_1, _tmp_70, 1);
                Fr_lt(_tmp_72, j_1, (ctx->circuit->constants + 9));
                _loopCond_5 = _tmp_72;
            }
        } else {
            /* w[i] = (ssigma1(w[i-2]) + w[i-7] + ssigma0(w[i-15]) + w[i-16]) & 0xFFFFFFFF */
            Fr_sub(_tmp_73, i_1, (ctx->circuit->constants + 2));
            _offset_146 = Fr_toInt(_tmp_73);
            _v_54 = w + _offset_146;
            ssigma1_74561342c3118138(ctx, _retssigma1, _v_54);
            Fr_sub(_tmp_74, i_1, (ctx->circuit->constants + 44));
            _offset_148 = Fr_toInt(_tmp_74);
            _v_55 = w + _offset_148;
            Fr_add(_tmp_75, _retssigma1, _v_55);
            Fr_sub(_tmp_76, i_1, (ctx->circuit->constants + 52));
            _offset_150 = Fr_toInt(_tmp_76);
            _v_56 = w + _offset_150;
            ssigma0_74561442c31182eb(ctx, _retssigma0, _v_56);
            Fr_add(_tmp_77, _tmp_75, _retssigma0);
            Fr_sub(_tmp_78, i_1, (ctx->circuit->constants + 50));
            _offset_152 = Fr_toInt(_tmp_78);
            _v_57 = w + _offset_152;
            Fr_add(_tmp_79, _tmp_77, _v_57);
            Fr_band(_tmp_80, _tmp_79, (ctx->circuit->constants + 40));
            _offset_154 = Fr_toInt(i_1);
            Fr_copyn(w+_offset_154, _tmp_80, 1);
        }
        /* T1 = (h + bsigma1(e) + Ch(e,f,g) + sha256K(i) + w[i]) & 0xFFFFFFFF */
        bsigma1_3ef37508f43ed7df(ctx, _retbsigma1_1, e);
        Fr_add(_tmp_81, h, _retbsigma1_1);
        Ch_090f5607b5a6f48e(ctx, _retCh_1, e,f,g);
        Fr_add(_tmp_82, _tmp_81, _retCh_1);
        sha256K_e17a6b8897b9b0e3(ctx, _retsha256K, i_1);
        Fr_add(_tmp_83, _tmp_82, _retsha256K);
        _offset_162 = Fr_toInt(i_1);
        _v_58 = w + _offset_162;
        Fr_add(_tmp_84, _tmp_83, _v_58);
        Fr_band(_tmp_85, _tmp_84, (ctx->circuit->constants + 40));
        Fr_copyn(T1, _tmp_85, 1);
        /* T2 = (bsigma0(a) + Maj(a,b,c)) & 0xFFFFFFFF */
        bsigma0_3ef37408f43ed62c(ctx, _retbsigma0_1, a);
        Maj_1e187f19b5264423(ctx, _retMaj_1, a,b,c);
        Fr_add(_tmp_86, _retbsigma0_1, _retMaj_1);
        Fr_band(_tmp_87, _tmp_86, (ctx->circuit->constants + 40));
        Fr_copyn(T2, _tmp_87, 1);
        /* h=g */
        Fr_copyn(h, g, 1);
        /* g=f */
        Fr_copyn(g, f, 1);
        /* f=e */
        Fr_copyn(f, e, 1);
        /* e=(d+T1) & 0xFFFFFFFF */
        Fr_add(_tmp_88, d, T1);
        Fr_band(_tmp_89, _tmp_88, (ctx->circuit->constants + 40));
        Fr_copyn(e, _tmp_89, 1);
        /* d=c */
        Fr_copyn(d, c, 1);
        /* c=b */
        Fr_copyn(c, b, 1);
        /* b=a */
        Fr_copyn(b, a, 1);
        /* a=(T1+T2) & 0xFFFFFFFF */
        Fr_add(_tmp_90, T1, T2);
        Fr_band(_tmp_91, _tmp_90, (ctx->circuit->constants + 40));
        Fr_copyn(a, _tmp_91, 1);
        Fr_copyn(_tmp_93, i_1, 1);
        Fr_add(_tmp_92, i_1, (ctx->circuit->constants + 1));
        Fr_copyn(i_1, _tmp_92, 1);
        Fr_lt(_tmp_94, i_1, (ctx->circuit->constants + 17));
        _loopCond_4 = _tmp_94;
    }
    /* H[0] = H[0] + a */
    _v_59 = H;
    Fr_add(_tmp_95, _v_59, a);
    Fr_copyn(H, _tmp_95, 1);
    /* H[1] = H[1] + b */
    _v_60 = H + 1;
    Fr_add(_tmp_96, _v_60, b);
    Fr_copyn(H+1, _tmp_96, 1);
    /* H[2] = H[2] + c */
    _v_61 = H + 2;
    Fr_add(_tmp_97, _v_61, c);
    Fr_copyn(H+2, _tmp_97, 1);
    /* H[3] = H[3] + d */
    _v_62 = H + 3;
    Fr_add(_tmp_98, _v_62, d);
    Fr_copyn(H+3, _tmp_98, 1);
    /* H[4] = H[4] + e */
    _v_63 = H + 4;
    Fr_add(_tmp_99, _v_63, e);
    Fr_copyn(H+4, _tmp_99, 1);
    /* H[5] = H[5] + f */
    _v_64 = H + 5;
    Fr_add(_tmp_100, _v_64, f);
    Fr_copyn(H+5, _tmp_100, 1);
    /* H[6] = H[6] + g */
    _v_65 = H + 6;
    Fr_add(_tmp_101, _v_65, g);
    Fr_copyn(H+6, _tmp_101, 1);
    /* H[7] = H[7] + h */
    _v_66 = H + 7;
    Fr_add(_tmp_102, _v_66, h);
    Fr_copyn(H+7, _tmp_102, 1);
    /* for (var i=0;i<8;i++) */
    /* for (var j=0;j<32;j++) */
    /* out[i*32+31-j] = (H[i] >> j) & 1 */
    _v_70 = H;
    Fr_shr(_tmp_105, _v_70, (ctx->circuit->constants + 0));
    Fr_band(_tmp_106, _tmp_105, (ctx->circuit->constants + 1));
    Fr_copyn(out+31, _tmp_106, 1);
    _loopCond_6 = _tmp_112;
    while (Fr_isTrue(_loopCond_6)) {
        /* out[i*32+31-j] = (H[i] >> j) & 1 */
        _v_77 = H;
        Fr_shr(_tmp_113, _v_77, j_2);
        Fr_band(_tmp_114, _tmp_113, (ctx->circuit->constants + 1));
        Fr_sub(_tmp_117, (ctx->circuit->constants + 8), j_2);
        _offset_232 = Fr_toInt(_tmp_117);
        Fr_copyn(out+_offset_232, _tmp_114, 1);
        Fr_copyn(_tmp_119, j_2, 1);
        Fr_add(_tmp_118, j_2, (ctx->circuit->constants + 1));
        Fr_copyn(j_2, _tmp_118, 1);
        Fr_lt(_tmp_120, j_2, (ctx->circuit->constants + 9));
        _loopCond_6 = _tmp_120;
    }
    _loopCond_7 = _tmp_123;
    while (Fr_isTrue(_loopCond_7)) {
        /* for (var j=0;j<32;j++) */
        Fr_copyn(j_2, _num_90, 1);
        Fr_lt(_tmp_124, j_2, (ctx->circuit->constants + 9));
        _loopCond_8 = _tmp_124;
        while (Fr_isTrue(_loopCond_8)) {
            /* out[i*32+31-j] = (H[i] >> j) & 1 */
            _offset_242 = Fr_toInt(i_2);
            _v_81 = H + _offset_242;
            Fr_shr(_tmp_125, _v_81, j_2);
            Fr_band(_tmp_126, _tmp_125, (ctx->circuit->constants + 1));
            Fr_mul(_tmp_127, i_2, (ctx->circuit->constants + 9));
            Fr_add(_tmp_128, _tmp_127, (ctx->circuit->constants + 8));
            Fr_sub(_tmp_129, _tmp_128, j_2);
            _offset_246 = Fr_toInt(_tmp_129);
            Fr_copyn(out+_offset_246, _tmp_126, 1);
            Fr_copyn(_tmp_131, j_2, 1);
            Fr_add(_tmp_130, j_2, (ctx->circuit->constants + 1));
            Fr_copyn(j_2, _tmp_130, 1);
            Fr_lt(_tmp_132, j_2, (ctx->circuit->constants + 9));
            _loopCond_8 = _tmp_132;
        }
        Fr_copyn(_tmp_134, i_2, 1);
        Fr_add(_tmp_133, i_2, (ctx->circuit->constants + 1));
        Fr_copyn(i_2, _tmp_133, 1);
        Fr_lt(_tmp_135, i_2, (ctx->circuit->constants + 37));
        _loopCond_7 = _tmp_135;
    }
    /* return out; */
    Fr_copyn(__retValue, out, 256);
    goto returnFunc;
    returnFunc: ;
}
/*
Sha256compression
hin[0]=1
hin[100]=1
hin[101]=1
hin[102]=0
hin[103]=0
hin[104]=1
hin[105]=0
hin[106]=1
hin[107]=0
hin[108]=1
hin[109]=1
hin[10]=1
hin[110]=1
hin[111]=1
hin[112]=1
hin[113]=1
hin[114]=1
hin[115]=1
hin[116]=0
hin[117]=0
hin[118]=1
hin[119]=0
hin[11]=0
hin[120]=1
hin[121]=0
hin[122]=1
hin[123]=0
hin[124]=0
hin[125]=1
hin[126]=0
hin[127]=1
hin[128]=1
hin[129]=1
hin[12]=0
hin[130]=1
hin[131]=1
hin[132]=1
hin[133]=1
hin[134]=1
hin[135]=0
hin[136]=0
hin[137]=1
hin[138]=0
hin[139]=0
hin[13]=1
hin[140]=1
hin[141]=0
hin[142]=1
hin[143]=0
hin[144]=0
hin[145]=1
hin[146]=1
hin[147]=1
hin[148]=0
hin[149]=0
hin[14]=1
hin[150]=0
hin[151]=0
hin[152]=1
hin[153]=0
hin[154]=0
hin[155]=0
hin[156]=1
hin[157]=0
hin[158]=1
hin[159]=0
hin[15]=1
hin[160]=0
hin[161]=0
hin[162]=1
hin[163]=1
hin[164]=0
hin[165]=0
hin[166]=0
hin[167]=1
hin[168]=0
hin[169]=0
hin[16]=1
hin[170]=0
hin[171]=1
hin[172]=0
hin[173]=1
hin[174]=1
hin[175]=0
hin[176]=1
hin[177]=0
hin[178]=1
hin[179]=0
hin[17]=0
hin[180]=0
hin[181]=0
hin[182]=0
hin[183]=0
hin[184]=1
hin[185]=1
hin[186]=0
hin[187]=1
hin[188]=1
hin[189]=0
hin[18]=0
hin[190]=0
hin[191]=1
hin[192]=1
hin[193]=1
hin[194]=0
hin[195]=1
hin[196]=0
hin[197]=1
hin[198]=0
hin[199]=1
hin[19]=1
hin[1]=1
hin[200]=1
hin[201]=0
hin[202]=0
hin[203]=1
hin[204]=1
hin[205]=0
hin[206]=1
hin[207]=1
hin[208]=1
hin[209]=1
hin[20]=0
hin[210]=0
hin[211]=0
hin[212]=0
hin[213]=0
hin[214]=0
hin[215]=1
hin[216]=1
hin[217]=1
hin[218]=1
hin[219]=1
hin[21]=0
hin[220]=1
hin[221]=0
hin[222]=0
hin[223]=0
hin[224]=1
hin[225]=0
hin[226]=0
hin[227]=1
hin[228]=1
hin[229]=0
hin[22]=0
hin[230]=0
hin[231]=0
hin[232]=1
hin[233]=0
hin[234]=1
hin[235]=1
hin[236]=0
hin[237]=0
hin[238]=1
hin[239]=1
hin[23]=0
hin[240]=0
hin[241]=0
hin[242]=0
hin[243]=0
hin[244]=0
hin[245]=1
hin[246]=1
hin[247]=1
hin[248]=1
hin[249]=1
hin[24]=0
hin[250]=0
hin[251]=1
hin[252]=1
hin[253]=0
hin[254]=1
hin[255]=0
hin[25]=1
hin[26]=0
hin[27]=1
hin[28]=0
hin[29]=1
hin[2]=1
hin[30]=1
hin[31]=0
hin[32]=1
hin[33]=0
hin[34]=1
hin[35]=0
hin[36]=0
hin[37]=0
hin[38]=0
hin[39]=1
hin[3]=0
hin[40]=0
hin[41]=1
hin[42]=1
hin[43]=1
hin[44]=0
hin[45]=1
hin[46]=0
hin[47]=1
hin[48]=1
hin[49]=1
hin[4]=0
hin[50]=1
hin[51]=0
hin[52]=0
hin[53]=1
hin[54]=1
hin[55]=0
hin[56]=1
hin[57]=1
hin[58]=0
hin[59]=1
hin[5]=1
hin[60]=1
hin[61]=1
hin[62]=0
hin[63]=1
hin[64]=0
hin[65]=1
hin[66]=0
hin[67]=0
hin[68]=1
hin[69]=1
hin[6]=1
hin[70]=1
hin[71]=0
hin[72]=1
hin[73]=1
hin[74]=0
hin[75]=0
hin[76]=1
hin[77]=1
hin[78]=1
hin[79]=1
hin[7]=0
hin[80]=0
hin[81]=1
hin[82]=1
hin[83]=1
hin[84]=0
hin[85]=1
hin[86]=1
hin[87]=0
hin[88]=0
hin[89]=0
hin[8]=0
hin[90]=1
hin[91]=1
hin[92]=1
hin[93]=1
hin[94]=0
hin[95]=0
hin[96]=0
hin[97]=1
hin[98]=0
hin[99]=1
hin[9]=1
*/
void Sha256compression_a10f2c6bd24bc76e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[256];
    FrElement _sigValue_1[512];
    FrElement _retsha256compression[256];
    FrElement outCalc[256];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_26[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_29[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _num_32[1];
    FrElement _tmp_15[1];
    FrElement _tmp_17[1];
    FrElement _tmp_16[1];
    FrElement _tmp_18[1];
    FrElement _num_35[1];
    FrElement _tmp_19[1];
    FrElement _tmp_21[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _num_38[1];
    FrElement _tmp_23[1];
    FrElement _tmp_25[1];
    FrElement _tmp_24[1];
    FrElement _tmp_26[1];
    FrElement _num_41[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    FrElement _num_44[1];
    FrElement _tmp_31[1];
    FrElement _tmp_33[1];
    FrElement _tmp_32[1];
    FrElement _tmp_34[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_43[1];
    FrElement k[1];
    FrElement _tmp_46[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_48[1];
    FrElement _tmp_47[1];
    FrElement _tmp_49[1];
    FrElement _tmp_52[1];
    FrElement t[1];
    FrElement _tmp_53[1];
    FrElement _num_60[1];
    FrElement _tmp_54[1];
    FrElement _tmp_55[1];
    FrElement _tmp_56[1];
    FrElement _tmp_57[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_59[1];
    FrElement _tmp_58[1];
    FrElement _tmp_60[1];
    FrElement _num_65[1];
    FrElement _tmp_61[1];
    FrElement _tmp_62[1];
    FrElement _tmp_63[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_64[1];
    FrElement _tmp_65[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_66[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_68[1];
    FrElement _tmp_69[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_71[1];
    FrElement _tmp_70[1];
    FrElement _tmp_72[1];
    FrElement _num_76[1];
    FrElement _tmp_73[1];
    FrElement _tmp_74[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_76[1];
    FrElement _tmp_75[1];
    FrElement _tmp_77[1];
    FrElement _tmp_79[1];
    FrElement _tmp_78[1];
    FrElement _tmp_80[1];
    FrElement _num_81[1];
    FrElement _tmp_81[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_83[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_85[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_87[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_89[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_91[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_93[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_95[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_97[1];
    FrElement _tmp_96[1];
    FrElement _tmp_98[1];
    FrElement _num_106[1];
    FrElement _tmp_99[1];
    FrElement _num_108[1];
    FrElement _tmp_100[1];
    FrElement _sigValue_18[1];
    FrElement _sigValue_19[1];
    FrElement _sigValue_20[1];
    FrElement _sigValue_21[1];
    FrElement _sigValue_22[1];
    FrElement _sigValue_23[1];
    FrElement _sigValue_24[1];
    FrElement _sigValue_25[1];
    FrElement _sigValue_26[1];
    FrElement _tmp_102[1];
    FrElement _tmp_101[1];
    FrElement _tmp_103[1];
    FrElement _num_111[1];
    FrElement _tmp_104[1];
    FrElement _sigValue_27[1];
    FrElement _sigValue_28[1];
    FrElement _sigValue_29[1];
    FrElement _sigValue_30[1];
    FrElement _tmp_106[1];
    FrElement _tmp_105[1];
    FrElement _tmp_107[1];
    FrElement _num_118[1];
    FrElement _tmp_108[1];
    FrElement _sigValue_31[1];
    FrElement _tmp_109[1];
    FrElement _sigValue_32[1];
    FrElement _tmp_110[1];
    FrElement _sigValue_33[1];
    FrElement _tmp_111[1];
    FrElement _sigValue_34[1];
    FrElement _tmp_112[1];
    FrElement _sigValue_35[1];
    FrElement _tmp_113[1];
    FrElement _sigValue_36[1];
    FrElement _tmp_114[1];
    FrElement _sigValue_37[1];
    FrElement _tmp_115[1];
    FrElement _sigValue_38[1];
    FrElement _tmp_116[1];
    FrElement _tmp_118[1];
    FrElement _tmp_117[1];
    FrElement _tmp_119[1];
    FrElement _tmp_121[1];
    FrElement _tmp_120[1];
    FrElement _tmp_122[1];
    FrElement _num_130[1];
    FrElement _tmp_123[1];
    FrElement _tmp_125[1];
    FrElement _sigValue_39[1];
    FrElement _sigValue_40[1];
    FrElement _tmp_127[1];
    FrElement _sigValue_41[1];
    FrElement _sigValue_42[1];
    FrElement _tmp_129[1];
    FrElement _sigValue_43[1];
    FrElement _sigValue_44[1];
    FrElement _tmp_131[1];
    FrElement _sigValue_45[1];
    FrElement _sigValue_46[1];
    FrElement _tmp_133[1];
    FrElement _sigValue_47[1];
    FrElement _sigValue_48[1];
    FrElement _tmp_135[1];
    FrElement _sigValue_49[1];
    FrElement _sigValue_50[1];
    FrElement _tmp_137[1];
    FrElement _sigValue_51[1];
    FrElement _sigValue_52[1];
    FrElement _tmp_139[1];
    FrElement _sigValue_53[1];
    FrElement _sigValue_54[1];
    FrElement _tmp_141[1];
    FrElement _tmp_140[1];
    FrElement _tmp_142[1];
    FrElement _num_189[1];
    FrElement _tmp_143[1];
    FrElement _tmp_144[1];
    FrElement _sigValue_55[1];
    FrElement _sigValue_56[1];
    FrElement _tmp_146[1];
    FrElement _sigValue_57[1];
    FrElement _sigValue_58[1];
    FrElement _tmp_148[1];
    FrElement _sigValue_59[1];
    FrElement _sigValue_60[1];
    FrElement _tmp_150[1];
    FrElement _sigValue_61[1];
    FrElement _sigValue_62[1];
    FrElement _tmp_152[1];
    FrElement _sigValue_63[1];
    FrElement _sigValue_64[1];
    FrElement _tmp_154[1];
    FrElement _sigValue_65[1];
    FrElement _sigValue_66[1];
    FrElement _tmp_156[1];
    FrElement _sigValue_67[1];
    FrElement _sigValue_68[1];
    FrElement _tmp_158[1];
    FrElement _sigValue_69[1];
    FrElement _sigValue_70[1];
    FrElement _tmp_160[1];
    FrElement _tmp_159[1];
    FrElement _tmp_161[1];
    int _hin_sigIdx_;
    int _inp_sigIdx_;
    int _out_sigIdx_;
    int _offset_6;
    int _offset_11;
    int _offset_13;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_62;
    int _offset_68;
    int _offset_71;
    int _offset_83;
    int _offset_86;
    int _compIdx;
    int _offset_93;
    int _in2_sigIdx_;
    int _offset_95;
    int _offset_98;
    int _compIdx_1;
    int _offset_100;
    int _in7_sigIdx_;
    int _offset_102;
    int _offset_105;
    int _compIdx_2;
    int _offset_107;
    int _in15_sigIdx_;
    int _offset_109;
    int _offset_112;
    int _compIdx_3;
    int _offset_114;
    int _in16_sigIdx_;
    int _offset_116;
    int _offset_119;
    int _compIdx_4;
    int _offset_126;
    int _out_sigIdx__1;
    int _offset_128;
    int _offset_131;
    int _offset_141;
    int _a_sigIdx_;
    int _offset_143;
    int _offset_145;
    int _b_sigIdx_;
    int _offset_147;
    int _offset_149;
    int _c_sigIdx_;
    int _offset_151;
    int _offset_153;
    int _d_sigIdx_;
    int _offset_155;
    int _offset_157;
    int _e_sigIdx_;
    int _offset_159;
    int _offset_161;
    int _f_sigIdx_;
    int _offset_163;
    int _offset_165;
    int _g_sigIdx_;
    int _offset_167;
    int _offset_169;
    int _h_sigIdx_;
    int _offset_171;
    int _compIdx_5;
    int _offset_180;
    int _h_sigIdx__1;
    int _offset_182;
    int _offset_185;
    int _compIdx_6;
    int _offset_187;
    int _e_sigIdx__1;
    int _offset_189;
    int _offset_192;
    int _compIdx_7;
    int _offset_194;
    int _f_sigIdx__1;
    int _offset_196;
    int _offset_199;
    int _compIdx_8;
    int _offset_201;
    int _g_sigIdx__1;
    int _offset_203;
    int _offset_206;
    int _compIdx_9;
    int _offset_208;
    int _k_sigIdx_;
    int _offset_210;
    int _compIdx_10;
    int _offset_212;
    int _out_sigIdx__2;
    int _offset_214;
    int _compIdx_11;
    int _offset_216;
    int _w_sigIdx__1;
    int _offset_218;
    int _offset_221;
    int _compIdx_12;
    int _offset_223;
    int _a_sigIdx__1;
    int _offset_225;
    int _offset_228;
    int _compIdx_13;
    int _offset_230;
    int _b_sigIdx__1;
    int _offset_232;
    int _offset_235;
    int _compIdx_14;
    int _offset_237;
    int _c_sigIdx__1;
    int _offset_239;
    int _offset_242;
    int _compIdx_15;
    int _offset_249;
    int _in_sigIdx_;
    int _offset_251;
    int _offset_254;
    int _compIdx_16;
    int _offset_256;
    int _in_sigIdx__1;
    int _offset_258;
    int _compIdx_17;
    int _offset_260;
    int _out_sigIdx__3;
    int _offset_262;
    int _compIdx_18;
    int _offset_264;
    int _in_sigIdx__2;
    int _offset_266;
    int _compIdx_19;
    int _offset_268;
    int _out_sigIdx__4;
    int _offset_270;
    int _compIdx_20;
    int _offset_272;
    int _in_sigIdx__3;
    int _offset_274;
    int _compIdx_21;
    int _offset_276;
    int _out_sigIdx__5;
    int _offset_278;
    int _offset_286;
    int _offset_289;
    int _offset_292;
    int _offset_295;
    int _offset_298;
    int _offset_301;
    int _compIdx_22;
    int _offset_303;
    int _out_sigIdx__6;
    int _offset_305;
    int _offset_308;
    int _offset_311;
    int _offset_314;
    int _offset_317;
    int _offset_320;
    int _offset_323;
    int _offset_326;
    int _compIdx_23;
    int _offset_328;
    int _out_sigIdx__7;
    int _offset_330;
    int _offset_333;
    int _compIdx_24;
    int _offset_342;
    int _in_sigIdx__4;
    int _offset_344;
    int _offset_346;
    int _compIdx_25;
    int _offset_347;
    int _in_sigIdx__5;
    int _offset_349;
    int _offset_351;
    int _compIdx_26;
    int _offset_352;
    int _in_sigIdx__6;
    int _offset_354;
    int _offset_356;
    int _compIdx_27;
    int _offset_357;
    int _in_sigIdx__7;
    int _offset_359;
    int _offset_361;
    int _compIdx_28;
    int _offset_362;
    int _in_sigIdx__8;
    int _offset_364;
    int _offset_366;
    int _compIdx_29;
    int _offset_367;
    int _in_sigIdx__9;
    int _offset_369;
    int _offset_371;
    int _compIdx_30;
    int _offset_372;
    int _in_sigIdx__10;
    int _offset_374;
    int _offset_376;
    int _compIdx_31;
    int _offset_377;
    int _in_sigIdx__11;
    int _offset_379;
    int _offset_381;
    int _compIdx_32;
    int _offset_382;
    int _in_sigIdx__12;
    int _offset_384;
    int _offset_386;
    int _compIdx_33;
    int _offset_387;
    int _in_sigIdx__13;
    int _offset_389;
    int _offset_391;
    int _compIdx_34;
    int _offset_392;
    int _in_sigIdx__14;
    int _offset_394;
    int _offset_396;
    int _compIdx_35;
    int _offset_397;
    int _in_sigIdx__15;
    int _offset_399;
    int _offset_401;
    int _compIdx_36;
    int _offset_402;
    int _in_sigIdx__16;
    int _offset_404;
    int _offset_406;
    int _compIdx_37;
    int _offset_407;
    int _in_sigIdx__17;
    int _offset_409;
    int _offset_411;
    int _compIdx_38;
    int _offset_412;
    int _in_sigIdx__18;
    int _offset_414;
    int _offset_416;
    int _compIdx_39;
    int _offset_417;
    int _in_sigIdx__19;
    int _offset_419;
    int _offset_421;
    int _offset_428;
    int _compIdx_40;
    int _offset_429;
    int _out_sigIdx__8;
    int _offset_431;
    int _offset_433;
    int _compIdx_41;
    int _offset_434;
    int _out_sigIdx__9;
    int _offset_436;
    int _offset_438;
    int _compIdx_42;
    int _offset_439;
    int _out_sigIdx__10;
    int _offset_441;
    int _offset_443;
    int _compIdx_43;
    int _offset_444;
    int _out_sigIdx__11;
    int _offset_446;
    int _offset_448;
    int _compIdx_44;
    int _offset_449;
    int _out_sigIdx__12;
    int _offset_451;
    int _offset_453;
    int _compIdx_45;
    int _offset_454;
    int _out_sigIdx__13;
    int _offset_456;
    int _offset_458;
    int _compIdx_46;
    int _offset_459;
    int _out_sigIdx__14;
    int _offset_461;
    int _offset_463;
    int _compIdx_47;
    int _offset_464;
    int _out_sigIdx__15;
    int _offset_466;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_inp;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in2;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in7;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_in15;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_in16;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_hin;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_d;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_h_1;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_e_1;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_f_1;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_g_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_w_1;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _sigSizes_out_6;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_out_7;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _compSizes_26;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _compSizes_27;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _compSizes_28;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _compSizes_29;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _compSizes_30;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _compSizes_31;
    Circom_Sizes _sigSizes_in_11;
    Circom_Sizes _compSizes_32;
    Circom_Sizes _sigSizes_in_12;
    Circom_Sizes _compSizes_33;
    Circom_Sizes _sigSizes_in_13;
    Circom_Sizes _compSizes_34;
    Circom_Sizes _sigSizes_in_14;
    Circom_Sizes _compSizes_35;
    Circom_Sizes _sigSizes_in_15;
    Circom_Sizes _compSizes_36;
    Circom_Sizes _sigSizes_in_16;
    Circom_Sizes _compSizes_37;
    Circom_Sizes _sigSizes_in_17;
    Circom_Sizes _compSizes_38;
    Circom_Sizes _sigSizes_in_18;
    Circom_Sizes _compSizes_39;
    Circom_Sizes _sigSizes_in_19;
    Circom_Sizes _compSizes_40;
    Circom_Sizes _sigSizes_out_8;
    Circom_Sizes _compSizes_41;
    Circom_Sizes _sigSizes_out_9;
    Circom_Sizes _compSizes_42;
    Circom_Sizes _sigSizes_out_10;
    Circom_Sizes _compSizes_43;
    Circom_Sizes _sigSizes_out_11;
    Circom_Sizes _compSizes_44;
    Circom_Sizes _sigSizes_out_12;
    Circom_Sizes _compSizes_45;
    Circom_Sizes _sigSizes_out_13;
    Circom_Sizes _compSizes_46;
    Circom_Sizes _sigSizes_out_14;
    Circom_Sizes _compSizes_47;
    Circom_Sizes _sigSizes_out_15;
    PFrElement _v_2;
    PFrElement _loopCond;
    PFrElement _v_6;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _loopCond_6;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _loopCond_9;
    PFrElement _loopCond_10;
    PFrElement _loopCond_11;
    PFrElement _loopCond_12;
    PFrElement _loopCond_13;
    PFrElement _loopCond_14;
    PFrElement _loopCond_15;
    PFrElement _loopCond_16;
    PFrElement _loopCond_17;
    PFrElement _loopCond_18;
    PFrElement _loopCond_19;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_26[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_29[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_32[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_35[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_38[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_41[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_44[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_43[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_52[0]), ctx->circuit->constants +1);
    Fr_copy(&(t[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_60[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_65[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_76[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_81[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_106[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_108[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_111[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_118[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_130[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_189[0]), ctx->circuit->constants +0);
    _hin_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x33732e1930068adcLL /* hin */);
    _inp_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _d_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_inp = ctx->getSignalSizes(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_hin = ctx->getSignalSizes(__cIdx, 0x33732e1930068adcLL /* hin */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_d = ctx->getSignalSizes(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    /* signal input hin[256] */
    /* signal input inp[512] */
    /* signal output out[256] */
    /* signal a[65][32] */
    /* signal b[65][32] */
    /* signal c[65][32] */
    /* signal d[65][32] */
    /* signal e[65][32] */
    /* signal f[65][32] */
    /* signal g[65][32] */
    /* signal h[65][32] */
    /* signal w[64][32] */
    /* var outCalc[256] = sha256compression(hin, inp) */
    ctx->multiGetSignal(__cIdx, __cIdx, _hin_sigIdx_, _sigValue, 256);
    ctx->multiGetSignal(__cIdx, __cIdx, _inp_sigIdx_, _sigValue_1, 512);
    sha256compression_ed3059d4e7ba1c14(ctx, _retsha256compression, _sigValue,_sigValue_1);
    Fr_copyn(outCalc, _retsha256compression, 256);
    /* var i */
    /* for (i=0;i<256;i++) */
    /* out[i] <-- outCalc[i] */
    _v_2 = outCalc;
    _offset_6 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_6, _v_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- outCalc[i] */
        _offset_11 = Fr_toInt(i);
        _v_6 = outCalc + _offset_11;
        _offset_13 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_13, _v_6);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 13));
        _loopCond = _tmp_6;
    }
    /* component sigmaPlus[48] */
    /* for (i=0;i<48;i++) */
    Fr_copyn(i, _num_26, 1);
    Fr_lt(_tmp_7, i, (ctx->circuit->constants + 118));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sigmaPlus[i] = SigmaPlus() */
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 118));
        _loopCond_1 = _tmp_10;
    }
    /* component ct_k[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_29, 1);
    Fr_lt(_tmp_11, i, (ctx->circuit->constants + 17));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* ct_k[i] = K(i) */
        Fr_copyn(_tmp_13, i, 1);
        Fr_add(_tmp_12, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_12, 1);
        Fr_lt(_tmp_14, i, (ctx->circuit->constants + 17));
        _loopCond_2 = _tmp_14;
    }
    /* component t1[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_32, 1);
    Fr_lt(_tmp_15, i, (ctx->circuit->constants + 17));
    _loopCond_3 = _tmp_15;
    while (Fr_isTrue(_loopCond_3)) {
        /* t1[i] = T1() */
        Fr_copyn(_tmp_17, i, 1);
        Fr_add(_tmp_16, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_16, 1);
        Fr_lt(_tmp_18, i, (ctx->circuit->constants + 17));
        _loopCond_3 = _tmp_18;
    }
    /* component t2[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_35, 1);
    Fr_lt(_tmp_19, i, (ctx->circuit->constants + 17));
    _loopCond_4 = _tmp_19;
    while (Fr_isTrue(_loopCond_4)) {
        /* t2[i] = T2() */
        Fr_copyn(_tmp_21, i, 1);
        Fr_add(_tmp_20, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_20, 1);
        Fr_lt(_tmp_22, i, (ctx->circuit->constants + 17));
        _loopCond_4 = _tmp_22;
    }
    /* component suma[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_38, 1);
    Fr_lt(_tmp_23, i, (ctx->circuit->constants + 17));
    _loopCond_5 = _tmp_23;
    while (Fr_isTrue(_loopCond_5)) {
        /* suma[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_25, i, 1);
        Fr_add(_tmp_24, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_24, 1);
        Fr_lt(_tmp_26, i, (ctx->circuit->constants + 17));
        _loopCond_5 = _tmp_26;
    }
    /* component sume[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_41, 1);
    Fr_lt(_tmp_27, i, (ctx->circuit->constants + 17));
    _loopCond_6 = _tmp_27;
    while (Fr_isTrue(_loopCond_6)) {
        /* sume[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_29, i, 1);
        Fr_add(_tmp_28, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_28, 1);
        Fr_lt(_tmp_30, i, (ctx->circuit->constants + 17));
        _loopCond_6 = _tmp_30;
    }
    /* component fsum[8] */
    /* for (i=0;i<8;i++) */
    Fr_copyn(i, _num_44, 1);
    Fr_lt(_tmp_31, i, (ctx->circuit->constants + 37));
    _loopCond_7 = _tmp_31;
    while (Fr_isTrue(_loopCond_7)) {
        /* fsum[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_33, i, 1);
        Fr_add(_tmp_32, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_32, 1);
        Fr_lt(_tmp_34, i, (ctx->circuit->constants + 37));
        _loopCond_7 = _tmp_34;
    }
    /* var k */
    /* var t */
    /* for (t=0;t<64;t++) */
    /* if (t<16) */
    /* for (k=0;k<32;k++) */
    /* w[t][k] <== inp[t*32+31-k] */
    _offset_59 = _inp_sigIdx_ + 31*_sigSizes_inp[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_59, _sigValue_2, 1);
    _offset_62 = _w_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_62, _sigValue_2);
    _loopCond_8 = _tmp_43;
    while (Fr_isTrue(_loopCond_8)) {
        /* w[t][k] <== inp[t*32+31-k] */
        Fr_sub(_tmp_46, (ctx->circuit->constants + 8), k);
        _offset_68 = _inp_sigIdx_ + Fr_toInt(_tmp_46)*_sigSizes_inp[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_68, _sigValue_3, 1);
        _offset_71 = _w_sigIdx_ + Fr_toInt(k)*_sigSizes_w[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_71, _sigValue_3);
        Fr_copyn(_tmp_48, k, 1);
        Fr_add(_tmp_47, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_47, 1);
        Fr_lt(_tmp_49, k, (ctx->circuit->constants + 9));
        _loopCond_8 = _tmp_49;
    }
    _loopCond_9 = _tmp_52;
    while (Fr_isTrue(_loopCond_9)) {
        /* if (t<16) */
        Fr_lt(_tmp_53, t, (ctx->circuit->constants + 50));
        if (Fr_isTrue(_tmp_53)) {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_60, 1);
            Fr_lt(_tmp_54, k, (ctx->circuit->constants + 9));
            _loopCond_10 = _tmp_54;
            while (Fr_isTrue(_loopCond_10)) {
                /* w[t][k] <== inp[t*32+31-k] */
                Fr_mul(_tmp_55, t, (ctx->circuit->constants + 9));
                Fr_add(_tmp_56, _tmp_55, (ctx->circuit->constants + 8));
                Fr_sub(_tmp_57, _tmp_56, k);
                _offset_83 = _inp_sigIdx_ + Fr_toInt(_tmp_57)*_sigSizes_inp[1];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_83, _sigValue_4, 1);
                _offset_86 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_86, _sigValue_4);
                Fr_copyn(_tmp_59, k, 1);
                Fr_add(_tmp_58, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_58, 1);
                Fr_lt(_tmp_60, k, (ctx->circuit->constants + 9));
                _loopCond_10 = _tmp_60;
            }
        } else {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_65, 1);
            Fr_lt(_tmp_61, k, (ctx->circuit->constants + 9));
            _loopCond_11 = _tmp_61;
            while (Fr_isTrue(_loopCond_11)) {
                /* sigmaPlus[t-16].in2[k] <== w[t-2][k] */
                _compIdx = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_62, t, (ctx->circuit->constants + 50));
                _offset_93 = _compIdx + Fr_toInt(_tmp_62)*_compSizes[1];
                _in2_sigIdx_ = ctx->getSignalOffset(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _sigSizes_in2 = ctx->getSignalSizes(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _offset_95 = _in2_sigIdx_ + Fr_toInt(k)*_sigSizes_in2[1];
                Fr_sub(_tmp_63, t, (ctx->circuit->constants + 2));
                _offset_98 = _w_sigIdx_ + Fr_toInt(_tmp_63)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_98, _sigValue_5, 1);
                ctx->setSignal(__cIdx, _offset_93, _offset_95, _sigValue_5);
                /* sigmaPlus[t-16].in7[k] <== w[t-7][k] */
                _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_64, t, (ctx->circuit->constants + 50));
                _offset_100 = _compIdx_1 + Fr_toInt(_tmp_64)*_compSizes_1[1];
                _in7_sigIdx_ = ctx->getSignalOffset(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _sigSizes_in7 = ctx->getSignalSizes(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _offset_102 = _in7_sigIdx_ + Fr_toInt(k)*_sigSizes_in7[1];
                Fr_sub(_tmp_65, t, (ctx->circuit->constants + 44));
                _offset_105 = _w_sigIdx_ + Fr_toInt(_tmp_65)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_105, _sigValue_6, 1);
                ctx->setSignal(__cIdx, _offset_100, _offset_102, _sigValue_6);
                /* sigmaPlus[t-16].in15[k] <== w[t-15][k] */
                _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_66, t, (ctx->circuit->constants + 50));
                _offset_107 = _compIdx_2 + Fr_toInt(_tmp_66)*_compSizes_2[1];
                _in15_sigIdx_ = ctx->getSignalOffset(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _sigSizes_in15 = ctx->getSignalSizes(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _offset_109 = _in15_sigIdx_ + Fr_toInt(k)*_sigSizes_in15[1];
                Fr_sub(_tmp_67, t, (ctx->circuit->constants + 52));
                _offset_112 = _w_sigIdx_ + Fr_toInt(_tmp_67)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_112, _sigValue_7, 1);
                ctx->setSignal(__cIdx, _offset_107, _offset_109, _sigValue_7);
                /* sigmaPlus[t-16].in16[k] <== w[t-16][k] */
                _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_68, t, (ctx->circuit->constants + 50));
                _offset_114 = _compIdx_3 + Fr_toInt(_tmp_68)*_compSizes_3[1];
                _in16_sigIdx_ = ctx->getSignalOffset(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _sigSizes_in16 = ctx->getSignalSizes(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _offset_116 = _in16_sigIdx_ + Fr_toInt(k)*_sigSizes_in16[1];
                Fr_sub(_tmp_69, t, (ctx->circuit->constants + 50));
                _offset_119 = _w_sigIdx_ + Fr_toInt(_tmp_69)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_119, _sigValue_8, 1);
                ctx->setSignal(__cIdx, _offset_114, _offset_116, _sigValue_8);
                Fr_copyn(_tmp_71, k, 1);
                Fr_add(_tmp_70, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_70, 1);
                Fr_lt(_tmp_72, k, (ctx->circuit->constants + 9));
                _loopCond_11 = _tmp_72;
            }
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_76, 1);
            Fr_lt(_tmp_73, k, (ctx->circuit->constants + 9));
            _loopCond_12 = _tmp_73;
            while (Fr_isTrue(_loopCond_12)) {
                /* w[t][k] <== sigmaPlus[t-16].out[k] */
                _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_74, t, (ctx->circuit->constants + 50));
                _offset_126 = _compIdx_4 + Fr_toInt(_tmp_74)*_compSizes_4[1];
                _out_sigIdx__1 = ctx->getSignalOffset(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_1 = ctx->getSignalSizes(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _offset_128 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
                ctx->multiGetSignal(__cIdx, _offset_126, _offset_128, _sigValue_9, 1);
                _offset_131 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_131, _sigValue_9);
                Fr_copyn(_tmp_76, k, 1);
                Fr_add(_tmp_75, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_75, 1);
                Fr_lt(_tmp_77, k, (ctx->circuit->constants + 9));
                _loopCond_12 = _tmp_77;
            }
        }
        Fr_copyn(_tmp_79, t, 1);
        Fr_add(_tmp_78, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_78, 1);
        Fr_lt(_tmp_80, t, (ctx->circuit->constants + 17));
        _loopCond_9 = _tmp_80;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_81, 1);
    Fr_lt(_tmp_81, k, (ctx->circuit->constants + 9));
    _loopCond_13 = _tmp_81;
    while (Fr_isTrue(_loopCond_13)) {
        /* a[0][k] <== hin[k] */
        _offset_141 = _hin_sigIdx_ + Fr_toInt(k)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_141, _sigValue_10, 1);
        _offset_143 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_143, _sigValue_10);
        /* b[0][k] <== hin[32*1 + k] */
        Fr_add(_tmp_83, (ctx->circuit->constants + 9), k);
        _offset_145 = _hin_sigIdx_ + Fr_toInt(_tmp_83)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_145, _sigValue_11, 1);
        _offset_147 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_147, _sigValue_11);
        /* c[0][k] <== hin[32*2 + k] */
        Fr_add(_tmp_85, (ctx->circuit->constants + 17), k);
        _offset_149 = _hin_sigIdx_ + Fr_toInt(_tmp_85)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_149, _sigValue_12, 1);
        _offset_151 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_151, _sigValue_12);
        /* d[0][k] <== hin[32*3 + k] */
        Fr_add(_tmp_87, (ctx->circuit->constants + 19), k);
        _offset_153 = _hin_sigIdx_ + Fr_toInt(_tmp_87)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_153, _sigValue_13, 1);
        _offset_155 = _d_sigIdx_ + Fr_toInt(k)*_sigSizes_d[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_155, _sigValue_13);
        /* e[0][k] <== hin[32*4 + k] */
        Fr_add(_tmp_89, (ctx->circuit->constants + 20), k);
        _offset_157 = _hin_sigIdx_ + Fr_toInt(_tmp_89)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_157, _sigValue_14, 1);
        _offset_159 = _e_sigIdx_ + Fr_toInt(k)*_sigSizes_e[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_159, _sigValue_14);
        /* f[0][k] <== hin[32*5 + k] */
        Fr_add(_tmp_91, (ctx->circuit->constants + 11), k);
        _offset_161 = _hin_sigIdx_ + Fr_toInt(_tmp_91)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_161, _sigValue_15, 1);
        _offset_163 = _f_sigIdx_ + Fr_toInt(k)*_sigSizes_f[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_163, _sigValue_15);
        /* g[0][k] <== hin[32*6 + k] */
        Fr_add(_tmp_93, (ctx->circuit->constants + 21), k);
        _offset_165 = _hin_sigIdx_ + Fr_toInt(_tmp_93)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_165, _sigValue_16, 1);
        _offset_167 = _g_sigIdx_ + Fr_toInt(k)*_sigSizes_g[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_167, _sigValue_16);
        /* h[0][k] <== hin[32*7 + k] */
        Fr_add(_tmp_95, (ctx->circuit->constants + 22), k);
        _offset_169 = _hin_sigIdx_ + Fr_toInt(_tmp_95)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_169, _sigValue_17, 1);
        _offset_171 = _h_sigIdx_ + Fr_toInt(k)*_sigSizes_h[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_171, _sigValue_17);
        Fr_copyn(_tmp_97, k, 1);
        Fr_add(_tmp_96, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_96, 1);
        Fr_lt(_tmp_98, k, (ctx->circuit->constants + 9));
        _loopCond_13 = _tmp_98;
    }
    /* for (t = 0;t<64;t++) */
    Fr_copyn(t, _num_106, 1);
    Fr_lt(_tmp_99, t, (ctx->circuit->constants + 17));
    _loopCond_14 = _tmp_99;
    while (Fr_isTrue(_loopCond_14)) {
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_108, 1);
        Fr_lt(_tmp_100, k, (ctx->circuit->constants + 9));
        _loopCond_15 = _tmp_100;
        while (Fr_isTrue(_loopCond_15)) {
            /* t1[t].h[k] <== h[t][k] */
            _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_180 = _compIdx_5 + Fr_toInt(t)*_compSizes_5[1];
            _h_sigIdx__1 = ctx->getSignalOffset(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _sigSizes_h_1 = ctx->getSignalSizes(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _offset_182 = _h_sigIdx__1 + Fr_toInt(k)*_sigSizes_h_1[1];
            _offset_185 = _h_sigIdx_ + Fr_toInt(t)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_185, _sigValue_18, 1);
            ctx->setSignal(__cIdx, _offset_180, _offset_182, _sigValue_18);
            /* t1[t].e[k] <== e[t][k] */
            _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_187 = _compIdx_6 + Fr_toInt(t)*_compSizes_6[1];
            _e_sigIdx__1 = ctx->getSignalOffset(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _sigSizes_e_1 = ctx->getSignalSizes(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _offset_189 = _e_sigIdx__1 + Fr_toInt(k)*_sigSizes_e_1[1];
            _offset_192 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_192, _sigValue_19, 1);
            ctx->setSignal(__cIdx, _offset_187, _offset_189, _sigValue_19);
            /* t1[t].f[k] <== f[t][k] */
            _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_194 = _compIdx_7 + Fr_toInt(t)*_compSizes_7[1];
            _f_sigIdx__1 = ctx->getSignalOffset(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _sigSizes_f_1 = ctx->getSignalSizes(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _offset_196 = _f_sigIdx__1 + Fr_toInt(k)*_sigSizes_f_1[1];
            _offset_199 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_199, _sigValue_20, 1);
            ctx->setSignal(__cIdx, _offset_194, _offset_196, _sigValue_20);
            /* t1[t].g[k] <== g[t][k] */
            _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_201 = _compIdx_8 + Fr_toInt(t)*_compSizes_8[1];
            _g_sigIdx__1 = ctx->getSignalOffset(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _sigSizes_g_1 = ctx->getSignalSizes(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _offset_203 = _g_sigIdx__1 + Fr_toInt(k)*_sigSizes_g_1[1];
            _offset_206 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_206, _sigValue_21, 1);
            ctx->setSignal(__cIdx, _offset_201, _offset_203, _sigValue_21);
            /* t1[t].k[k] <== ct_k[t].out[k] */
            _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_208 = _compIdx_9 + Fr_toInt(t)*_compSizes_9[1];
            _k_sigIdx_ = ctx->getSignalOffset(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _sigSizes_k = ctx->getSignalSizes(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _offset_210 = _k_sigIdx_ + Fr_toInt(k)*_sigSizes_k[1];
            _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _offset_212 = _compIdx_10 + Fr_toInt(t)*_compSizes_10[1];
            _out_sigIdx__2 = ctx->getSignalOffset(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_2 = ctx->getSignalSizes(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _offset_214 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
            ctx->multiGetSignal(__cIdx, _offset_212, _offset_214, _sigValue_22, 1);
            ctx->setSignal(__cIdx, _offset_208, _offset_210, _sigValue_22);
            /* t1[t].w[k] <== w[t][k] */
            _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_216 = _compIdx_11 + Fr_toInt(t)*_compSizes_11[1];
            _w_sigIdx__1 = ctx->getSignalOffset(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _sigSizes_w_1 = ctx->getSignalSizes(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _offset_218 = _w_sigIdx__1 + Fr_toInt(k)*_sigSizes_w_1[1];
            _offset_221 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_221, _sigValue_23, 1);
            ctx->setSignal(__cIdx, _offset_216, _offset_218, _sigValue_23);
            /* t2[t].a[k] <== a[t][k] */
            _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_223 = _compIdx_12 + Fr_toInt(t)*_compSizes_12[1];
            _a_sigIdx__1 = ctx->getSignalOffset(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _sigSizes_a_1 = ctx->getSignalSizes(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _offset_225 = _a_sigIdx__1 + Fr_toInt(k)*_sigSizes_a_1[1];
            _offset_228 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_228, _sigValue_24, 1);
            ctx->setSignal(__cIdx, _offset_223, _offset_225, _sigValue_24);
            /* t2[t].b[k] <== b[t][k] */
            _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_230 = _compIdx_13 + Fr_toInt(t)*_compSizes_13[1];
            _b_sigIdx__1 = ctx->getSignalOffset(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _sigSizes_b_1 = ctx->getSignalSizes(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _offset_232 = _b_sigIdx__1 + Fr_toInt(k)*_sigSizes_b_1[1];
            _offset_235 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_235, _sigValue_25, 1);
            ctx->setSignal(__cIdx, _offset_230, _offset_232, _sigValue_25);
            /* t2[t].c[k] <== c[t][k] */
            _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_237 = _compIdx_14 + Fr_toInt(t)*_compSizes_14[1];
            _c_sigIdx__1 = ctx->getSignalOffset(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _sigSizes_c_1 = ctx->getSignalSizes(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _offset_239 = _c_sigIdx__1 + Fr_toInt(k)*_sigSizes_c_1[1];
            _offset_242 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_242, _sigValue_26, 1);
            ctx->setSignal(__cIdx, _offset_237, _offset_239, _sigValue_26);
            Fr_copyn(_tmp_102, k, 1);
            Fr_add(_tmp_101, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_101, 1);
            Fr_lt(_tmp_103, k, (ctx->circuit->constants + 9));
            _loopCond_15 = _tmp_103;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_111, 1);
        Fr_lt(_tmp_104, k, (ctx->circuit->constants + 9));
        _loopCond_16 = _tmp_104;
        while (Fr_isTrue(_loopCond_16)) {
            /* sume[t].in[0][k] <== d[t][k] */
            _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_249 = _compIdx_15 + Fr_toInt(t)*_compSizes_15[1];
            _in_sigIdx_ = ctx->getSignalOffset(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in = ctx->getSignalSizes(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _offset_251 = _in_sigIdx_ + Fr_toInt(k)*_sigSizes_in[2];
            _offset_254 = _d_sigIdx_ + Fr_toInt(t)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_254, _sigValue_27, 1);
            ctx->setSignal(__cIdx, _offset_249, _offset_251, _sigValue_27);
            /* sume[t].in[1][k] <== t1[t].out[k] */
            _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_256 = _compIdx_16 + Fr_toInt(t)*_compSizes_16[1];
            _in_sigIdx__1 = ctx->getSignalOffset(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_1 = ctx->getSignalSizes(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _offset_258 = _in_sigIdx__1 + 1*_sigSizes_in_1[1] + Fr_toInt(k)*_sigSizes_in_1[2];
            _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_260 = _compIdx_17 + Fr_toInt(t)*_compSizes_17[1];
            _out_sigIdx__3 = ctx->getSignalOffset(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_3 = ctx->getSignalSizes(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _offset_262 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
            ctx->multiGetSignal(__cIdx, _offset_260, _offset_262, _sigValue_28, 1);
            ctx->setSignal(__cIdx, _offset_256, _offset_258, _sigValue_28);
            /* suma[t].in[0][k] <== t1[t].out[k] */
            _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_264 = _compIdx_18 + Fr_toInt(t)*_compSizes_18[1];
            _in_sigIdx__2 = ctx->getSignalOffset(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_2 = ctx->getSignalSizes(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _offset_266 = _in_sigIdx__2 + Fr_toInt(k)*_sigSizes_in_2[2];
            _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_268 = _compIdx_19 + Fr_toInt(t)*_compSizes_19[1];
            _out_sigIdx__4 = ctx->getSignalOffset(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_4 = ctx->getSignalSizes(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _offset_270 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
            ctx->multiGetSignal(__cIdx, _offset_268, _offset_270, _sigValue_29, 1);
            ctx->setSignal(__cIdx, _offset_264, _offset_266, _sigValue_29);
            /* suma[t].in[1][k] <== t2[t].out[k] */
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_272 = _compIdx_20 + Fr_toInt(t)*_compSizes_20[1];
            _in_sigIdx__3 = ctx->getSignalOffset(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_3 = ctx->getSignalSizes(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _offset_274 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(k)*_sigSizes_in_3[2];
            _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_276 = _compIdx_21 + Fr_toInt(t)*_compSizes_21[1];
            _out_sigIdx__5 = ctx->getSignalOffset(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_5 = ctx->getSignalSizes(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _offset_278 = _out_sigIdx__5 + Fr_toInt(k)*_sigSizes_out_5[1];
            ctx->multiGetSignal(__cIdx, _offset_276, _offset_278, _sigValue_30, 1);
            ctx->setSignal(__cIdx, _offset_272, _offset_274, _sigValue_30);
            Fr_copyn(_tmp_106, k, 1);
            Fr_add(_tmp_105, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_105, 1);
            Fr_lt(_tmp_107, k, (ctx->circuit->constants + 9));
            _loopCond_16 = _tmp_107;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_118, 1);
        Fr_lt(_tmp_108, k, (ctx->circuit->constants + 9));
        _loopCond_17 = _tmp_108;
        while (Fr_isTrue(_loopCond_17)) {
            /* h[t+1][k] <== g[t][k] */
            _offset_286 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_286, _sigValue_31, 1);
            Fr_add(_tmp_109, t, (ctx->circuit->constants + 1));
            _offset_289 = _h_sigIdx_ + Fr_toInt(_tmp_109)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_289, _sigValue_31);
            /* g[t+1][k] <== f[t][k] */
            _offset_292 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_292, _sigValue_32, 1);
            Fr_add(_tmp_110, t, (ctx->circuit->constants + 1));
            _offset_295 = _g_sigIdx_ + Fr_toInt(_tmp_110)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_295, _sigValue_32);
            /* f[t+1][k] <== e[t][k] */
            _offset_298 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_298, _sigValue_33, 1);
            Fr_add(_tmp_111, t, (ctx->circuit->constants + 1));
            _offset_301 = _f_sigIdx_ + Fr_toInt(_tmp_111)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_301, _sigValue_33);
            /* e[t+1][k] <== sume[t].out[k] */
            _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_303 = _compIdx_22 + Fr_toInt(t)*_compSizes_22[1];
            _out_sigIdx__6 = ctx->getSignalOffset(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_6 = ctx->getSignalSizes(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _offset_305 = _out_sigIdx__6 + Fr_toInt(k)*_sigSizes_out_6[1];
            ctx->multiGetSignal(__cIdx, _offset_303, _offset_305, _sigValue_34, 1);
            Fr_add(_tmp_112, t, (ctx->circuit->constants + 1));
            _offset_308 = _e_sigIdx_ + Fr_toInt(_tmp_112)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_308, _sigValue_34);
            /* d[t+1][k] <== c[t][k] */
            _offset_311 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_311, _sigValue_35, 1);
            Fr_add(_tmp_113, t, (ctx->circuit->constants + 1));
            _offset_314 = _d_sigIdx_ + Fr_toInt(_tmp_113)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_314, _sigValue_35);
            /* c[t+1][k] <== b[t][k] */
            _offset_317 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_317, _sigValue_36, 1);
            Fr_add(_tmp_114, t, (ctx->circuit->constants + 1));
            _offset_320 = _c_sigIdx_ + Fr_toInt(_tmp_114)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_320, _sigValue_36);
            /* b[t+1][k] <== a[t][k] */
            _offset_323 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_323, _sigValue_37, 1);
            Fr_add(_tmp_115, t, (ctx->circuit->constants + 1));
            _offset_326 = _b_sigIdx_ + Fr_toInt(_tmp_115)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_326, _sigValue_37);
            /* a[t+1][k] <== suma[t].out[k] */
            _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_328 = _compIdx_23 + Fr_toInt(t)*_compSizes_23[1];
            _out_sigIdx__7 = ctx->getSignalOffset(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_7 = ctx->getSignalSizes(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _offset_330 = _out_sigIdx__7 + Fr_toInt(k)*_sigSizes_out_7[1];
            ctx->multiGetSignal(__cIdx, _offset_328, _offset_330, _sigValue_38, 1);
            Fr_add(_tmp_116, t, (ctx->circuit->constants + 1));
            _offset_333 = _a_sigIdx_ + Fr_toInt(_tmp_116)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_333, _sigValue_38);
            Fr_copyn(_tmp_118, k, 1);
            Fr_add(_tmp_117, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_117, 1);
            Fr_lt(_tmp_119, k, (ctx->circuit->constants + 9));
            _loopCond_17 = _tmp_119;
        }
        Fr_copyn(_tmp_121, t, 1);
        Fr_add(_tmp_120, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_120, 1);
        Fr_lt(_tmp_122, t, (ctx->circuit->constants + 17));
        _loopCond_14 = _tmp_122;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_130, 1);
    Fr_lt(_tmp_123, k, (ctx->circuit->constants + 9));
    _loopCond_18 = _tmp_123;
    while (Fr_isTrue(_loopCond_18)) {
        /* fsum[0].in[0][k] <==  hin[32*0+k] */
        _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_342 = _compIdx_24;
        _in_sigIdx__4 = ctx->getSignalOffset(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _offset_344 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[2];
        Fr_add(_tmp_125, (ctx->circuit->constants + 0), k);
        _offset_346 = _hin_sigIdx_ + Fr_toInt(_tmp_125)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_346, _sigValue_39, 1);
        ctx->setSignal(__cIdx, _offset_342, _offset_344, _sigValue_39);
        /* fsum[0].in[1][k] <==  a[64][k] */
        _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_347 = _compIdx_25;
        _in_sigIdx__5 = ctx->getSignalOffset(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _offset_349 = _in_sigIdx__5 + 1*_sigSizes_in_5[1] + Fr_toInt(k)*_sigSizes_in_5[2];
        _offset_351 = _a_sigIdx_ + 64*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_351, _sigValue_40, 1);
        ctx->setSignal(__cIdx, _offset_347, _offset_349, _sigValue_40);
        /* fsum[1].in[0][k] <==  hin[32*1+k] */
        _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_26 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_352 = _compIdx_26 + 1*_compSizes_26[1];
        _in_sigIdx__6 = ctx->getSignalOffset(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _offset_354 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[2];
        Fr_add(_tmp_127, (ctx->circuit->constants + 9), k);
        _offset_356 = _hin_sigIdx_ + Fr_toInt(_tmp_127)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_356, _sigValue_41, 1);
        ctx->setSignal(__cIdx, _offset_352, _offset_354, _sigValue_41);
        /* fsum[1].in[1][k] <==  b[64][k] */
        _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_27 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_357 = _compIdx_27 + 1*_compSizes_27[1];
        _in_sigIdx__7 = ctx->getSignalOffset(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_7 = ctx->getSignalSizes(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _offset_359 = _in_sigIdx__7 + 1*_sigSizes_in_7[1] + Fr_toInt(k)*_sigSizes_in_7[2];
        _offset_361 = _b_sigIdx_ + 64*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_361, _sigValue_42, 1);
        ctx->setSignal(__cIdx, _offset_357, _offset_359, _sigValue_42);
        /* fsum[2].in[0][k] <==  hin[32*2+k] */
        _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_28 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_362 = _compIdx_28 + 2*_compSizes_28[1];
        _in_sigIdx__8 = ctx->getSignalOffset(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_8 = ctx->getSignalSizes(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _offset_364 = _in_sigIdx__8 + Fr_toInt(k)*_sigSizes_in_8[2];
        Fr_add(_tmp_129, (ctx->circuit->constants + 17), k);
        _offset_366 = _hin_sigIdx_ + Fr_toInt(_tmp_129)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_366, _sigValue_43, 1);
        ctx->setSignal(__cIdx, _offset_362, _offset_364, _sigValue_43);
        /* fsum[2].in[1][k] <==  c[64][k] */
        _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_29 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_367 = _compIdx_29 + 2*_compSizes_29[1];
        _in_sigIdx__9 = ctx->getSignalOffset(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_9 = ctx->getSignalSizes(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _offset_369 = _in_sigIdx__9 + 1*_sigSizes_in_9[1] + Fr_toInt(k)*_sigSizes_in_9[2];
        _offset_371 = _c_sigIdx_ + 64*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_371, _sigValue_44, 1);
        ctx->setSignal(__cIdx, _offset_367, _offset_369, _sigValue_44);
        /* fsum[3].in[0][k] <==  hin[32*3+k] */
        _compIdx_30 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_30 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_372 = _compIdx_30 + 3*_compSizes_30[1];
        _in_sigIdx__10 = ctx->getSignalOffset(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_10 = ctx->getSignalSizes(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _offset_374 = _in_sigIdx__10 + Fr_toInt(k)*_sigSizes_in_10[2];
        Fr_add(_tmp_131, (ctx->circuit->constants + 19), k);
        _offset_376 = _hin_sigIdx_ + Fr_toInt(_tmp_131)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_376, _sigValue_45, 1);
        ctx->setSignal(__cIdx, _offset_372, _offset_374, _sigValue_45);
        /* fsum[3].in[1][k] <==  d[64][k] */
        _compIdx_31 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_31 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_377 = _compIdx_31 + 3*_compSizes_31[1];
        _in_sigIdx__11 = ctx->getSignalOffset(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_11 = ctx->getSignalSizes(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _offset_379 = _in_sigIdx__11 + 1*_sigSizes_in_11[1] + Fr_toInt(k)*_sigSizes_in_11[2];
        _offset_381 = _d_sigIdx_ + 64*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_381, _sigValue_46, 1);
        ctx->setSignal(__cIdx, _offset_377, _offset_379, _sigValue_46);
        /* fsum[4].in[0][k] <==  hin[32*4+k] */
        _compIdx_32 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_32 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_382 = _compIdx_32 + 4*_compSizes_32[1];
        _in_sigIdx__12 = ctx->getSignalOffset(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_12 = ctx->getSignalSizes(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _offset_384 = _in_sigIdx__12 + Fr_toInt(k)*_sigSizes_in_12[2];
        Fr_add(_tmp_133, (ctx->circuit->constants + 20), k);
        _offset_386 = _hin_sigIdx_ + Fr_toInt(_tmp_133)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_386, _sigValue_47, 1);
        ctx->setSignal(__cIdx, _offset_382, _offset_384, _sigValue_47);
        /* fsum[4].in[1][k] <==  e[64][k] */
        _compIdx_33 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_33 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_387 = _compIdx_33 + 4*_compSizes_33[1];
        _in_sigIdx__13 = ctx->getSignalOffset(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_13 = ctx->getSignalSizes(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _offset_389 = _in_sigIdx__13 + 1*_sigSizes_in_13[1] + Fr_toInt(k)*_sigSizes_in_13[2];
        _offset_391 = _e_sigIdx_ + 64*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_391, _sigValue_48, 1);
        ctx->setSignal(__cIdx, _offset_387, _offset_389, _sigValue_48);
        /* fsum[5].in[0][k] <==  hin[32*5+k] */
        _compIdx_34 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_34 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_392 = _compIdx_34 + 5*_compSizes_34[1];
        _in_sigIdx__14 = ctx->getSignalOffset(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_14 = ctx->getSignalSizes(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _offset_394 = _in_sigIdx__14 + Fr_toInt(k)*_sigSizes_in_14[2];
        Fr_add(_tmp_135, (ctx->circuit->constants + 11), k);
        _offset_396 = _hin_sigIdx_ + Fr_toInt(_tmp_135)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_396, _sigValue_49, 1);
        ctx->setSignal(__cIdx, _offset_392, _offset_394, _sigValue_49);
        /* fsum[5].in[1][k] <==  f[64][k] */
        _compIdx_35 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_35 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_397 = _compIdx_35 + 5*_compSizes_35[1];
        _in_sigIdx__15 = ctx->getSignalOffset(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_15 = ctx->getSignalSizes(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _offset_399 = _in_sigIdx__15 + 1*_sigSizes_in_15[1] + Fr_toInt(k)*_sigSizes_in_15[2];
        _offset_401 = _f_sigIdx_ + 64*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_401, _sigValue_50, 1);
        ctx->setSignal(__cIdx, _offset_397, _offset_399, _sigValue_50);
        /* fsum[6].in[0][k] <==  hin[32*6+k] */
        _compIdx_36 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_36 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_402 = _compIdx_36 + 6*_compSizes_36[1];
        _in_sigIdx__16 = ctx->getSignalOffset(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_16 = ctx->getSignalSizes(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _offset_404 = _in_sigIdx__16 + Fr_toInt(k)*_sigSizes_in_16[2];
        Fr_add(_tmp_137, (ctx->circuit->constants + 21), k);
        _offset_406 = _hin_sigIdx_ + Fr_toInt(_tmp_137)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_406, _sigValue_51, 1);
        ctx->setSignal(__cIdx, _offset_402, _offset_404, _sigValue_51);
        /* fsum[6].in[1][k] <==  g[64][k] */
        _compIdx_37 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_37 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_407 = _compIdx_37 + 6*_compSizes_37[1];
        _in_sigIdx__17 = ctx->getSignalOffset(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_17 = ctx->getSignalSizes(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _offset_409 = _in_sigIdx__17 + 1*_sigSizes_in_17[1] + Fr_toInt(k)*_sigSizes_in_17[2];
        _offset_411 = _g_sigIdx_ + 64*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_411, _sigValue_52, 1);
        ctx->setSignal(__cIdx, _offset_407, _offset_409, _sigValue_52);
        /* fsum[7].in[0][k] <==  hin[32*7+k] */
        _compIdx_38 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_38 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_412 = _compIdx_38 + 7*_compSizes_38[1];
        _in_sigIdx__18 = ctx->getSignalOffset(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_18 = ctx->getSignalSizes(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _offset_414 = _in_sigIdx__18 + Fr_toInt(k)*_sigSizes_in_18[2];
        Fr_add(_tmp_139, (ctx->circuit->constants + 22), k);
        _offset_416 = _hin_sigIdx_ + Fr_toInt(_tmp_139)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_416, _sigValue_53, 1);
        ctx->setSignal(__cIdx, _offset_412, _offset_414, _sigValue_53);
        /* fsum[7].in[1][k] <==  h[64][k] */
        _compIdx_39 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_39 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_417 = _compIdx_39 + 7*_compSizes_39[1];
        _in_sigIdx__19 = ctx->getSignalOffset(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_19 = ctx->getSignalSizes(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _offset_419 = _in_sigIdx__19 + 1*_sigSizes_in_19[1] + Fr_toInt(k)*_sigSizes_in_19[2];
        _offset_421 = _h_sigIdx_ + 64*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_421, _sigValue_54, 1);
        ctx->setSignal(__cIdx, _offset_417, _offset_419, _sigValue_54);
        Fr_copyn(_tmp_141, k, 1);
        Fr_add(_tmp_140, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_140, 1);
        Fr_lt(_tmp_142, k, (ctx->circuit->constants + 9));
        _loopCond_18 = _tmp_142;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_189, 1);
    Fr_lt(_tmp_143, k, (ctx->circuit->constants + 9));
    _loopCond_19 = _tmp_143;
    while (Fr_isTrue(_loopCond_19)) {
        /* out[31-k]     === fsum[0].out[k] */
        Fr_sub(_tmp_144, (ctx->circuit->constants + 8), k);
        _offset_428 = _out_sigIdx_ + Fr_toInt(_tmp_144)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_428, _sigValue_55, 1);
        _compIdx_40 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_40 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_429 = _compIdx_40;
        _out_sigIdx__8 = ctx->getSignalOffset(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_8 = ctx->getSignalSizes(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _offset_431 = _out_sigIdx__8 + Fr_toInt(k)*_sigSizes_out_8[1];
        ctx->multiGetSignal(__cIdx, _offset_429, _offset_431, _sigValue_56, 1);
        ctx->checkConstraint(__cIdx, _sigValue_55, _sigValue_56, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:156:8");
        /* out[32+31-k]  === fsum[1].out[k] */
        Fr_sub(_tmp_146, (ctx->circuit->constants + 24), k);
        _offset_433 = _out_sigIdx_ + Fr_toInt(_tmp_146)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_433, _sigValue_57, 1);
        _compIdx_41 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_41 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_434 = _compIdx_41 + 1*_compSizes_41[1];
        _out_sigIdx__9 = ctx->getSignalOffset(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_9 = ctx->getSignalSizes(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _offset_436 = _out_sigIdx__9 + Fr_toInt(k)*_sigSizes_out_9[1];
        ctx->multiGetSignal(__cIdx, _offset_434, _offset_436, _sigValue_58, 1);
        ctx->checkConstraint(__cIdx, _sigValue_57, _sigValue_58, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:157:8");
        /* out[64+31-k]  === fsum[2].out[k] */
        Fr_sub(_tmp_148, (ctx->circuit->constants + 25), k);
        _offset_438 = _out_sigIdx_ + Fr_toInt(_tmp_148)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_438, _sigValue_59, 1);
        _compIdx_42 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_42 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_439 = _compIdx_42 + 2*_compSizes_42[1];
        _out_sigIdx__10 = ctx->getSignalOffset(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_10 = ctx->getSignalSizes(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _offset_441 = _out_sigIdx__10 + Fr_toInt(k)*_sigSizes_out_10[1];
        ctx->multiGetSignal(__cIdx, _offset_439, _offset_441, _sigValue_60, 1);
        ctx->checkConstraint(__cIdx, _sigValue_59, _sigValue_60, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:158:8");
        /* out[96+31-k]  === fsum[3].out[k] */
        Fr_sub(_tmp_150, (ctx->circuit->constants + 26), k);
        _offset_443 = _out_sigIdx_ + Fr_toInt(_tmp_150)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_443, _sigValue_61, 1);
        _compIdx_43 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_43 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_444 = _compIdx_43 + 3*_compSizes_43[1];
        _out_sigIdx__11 = ctx->getSignalOffset(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_11 = ctx->getSignalSizes(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _offset_446 = _out_sigIdx__11 + Fr_toInt(k)*_sigSizes_out_11[1];
        ctx->multiGetSignal(__cIdx, _offset_444, _offset_446, _sigValue_62, 1);
        ctx->checkConstraint(__cIdx, _sigValue_61, _sigValue_62, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:159:8");
        /* out[128+31-k] === fsum[4].out[k] */
        Fr_sub(_tmp_152, (ctx->circuit->constants + 10), k);
        _offset_448 = _out_sigIdx_ + Fr_toInt(_tmp_152)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_448, _sigValue_63, 1);
        _compIdx_44 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_44 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_449 = _compIdx_44 + 4*_compSizes_44[1];
        _out_sigIdx__12 = ctx->getSignalOffset(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_12 = ctx->getSignalSizes(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _offset_451 = _out_sigIdx__12 + Fr_toInt(k)*_sigSizes_out_12[1];
        ctx->multiGetSignal(__cIdx, _offset_449, _offset_451, _sigValue_64, 1);
        ctx->checkConstraint(__cIdx, _sigValue_63, _sigValue_64, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:160:8");
        /* out[160+31-k] === fsum[5].out[k] */
        Fr_sub(_tmp_154, (ctx->circuit->constants + 27), k);
        _offset_453 = _out_sigIdx_ + Fr_toInt(_tmp_154)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_453, _sigValue_65, 1);
        _compIdx_45 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_45 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_454 = _compIdx_45 + 5*_compSizes_45[1];
        _out_sigIdx__13 = ctx->getSignalOffset(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_13 = ctx->getSignalSizes(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _offset_456 = _out_sigIdx__13 + Fr_toInt(k)*_sigSizes_out_13[1];
        ctx->multiGetSignal(__cIdx, _offset_454, _offset_456, _sigValue_66, 1);
        ctx->checkConstraint(__cIdx, _sigValue_65, _sigValue_66, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:161:8");
        /* out[192+31-k] === fsum[6].out[k] */
        Fr_sub(_tmp_156, (ctx->circuit->constants + 28), k);
        _offset_458 = _out_sigIdx_ + Fr_toInt(_tmp_156)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_458, _sigValue_67, 1);
        _compIdx_46 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_46 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_459 = _compIdx_46 + 6*_compSizes_46[1];
        _out_sigIdx__14 = ctx->getSignalOffset(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_14 = ctx->getSignalSizes(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _offset_461 = _out_sigIdx__14 + Fr_toInt(k)*_sigSizes_out_14[1];
        ctx->multiGetSignal(__cIdx, _offset_459, _offset_461, _sigValue_68, 1);
        ctx->checkConstraint(__cIdx, _sigValue_67, _sigValue_68, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:162:8");
        /* out[224+31-k] === fsum[7].out[k] */
        Fr_sub(_tmp_158, (ctx->circuit->constants + 12), k);
        _offset_463 = _out_sigIdx_ + Fr_toInt(_tmp_158)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_463, _sigValue_69, 1);
        _compIdx_47 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_47 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_464 = _compIdx_47 + 7*_compSizes_47[1];
        _out_sigIdx__15 = ctx->getSignalOffset(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_15 = ctx->getSignalSizes(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _offset_466 = _out_sigIdx__15 + Fr_toInt(k)*_sigSizes_out_15[1];
        ctx->multiGetSignal(__cIdx, _offset_464, _offset_466, _sigValue_70, 1);
        ctx->checkConstraint(__cIdx, _sigValue_69, _sigValue_70, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:163:8");
        Fr_copyn(_tmp_160, k, 1);
        Fr_add(_tmp_159, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_159, 1);
        Fr_lt(_tmp_161, k, (ctx->circuit->constants + 9));
        _loopCond_19 = _tmp_161;
    }
    ctx->finished(__cIdx);
}
/*
Sha256compression
*/
void Sha256compression_1a9baabf875686f4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[256];
    FrElement _sigValue_1[512];
    FrElement _retsha256compression[256];
    FrElement outCalc[256];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_26[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_29[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _num_32[1];
    FrElement _tmp_15[1];
    FrElement _tmp_17[1];
    FrElement _tmp_16[1];
    FrElement _tmp_18[1];
    FrElement _num_35[1];
    FrElement _tmp_19[1];
    FrElement _tmp_21[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _num_38[1];
    FrElement _tmp_23[1];
    FrElement _tmp_25[1];
    FrElement _tmp_24[1];
    FrElement _tmp_26[1];
    FrElement _num_41[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    FrElement _num_44[1];
    FrElement _tmp_31[1];
    FrElement _tmp_33[1];
    FrElement _tmp_32[1];
    FrElement _tmp_34[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_43[1];
    FrElement k[1];
    FrElement _tmp_46[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_48[1];
    FrElement _tmp_47[1];
    FrElement _tmp_49[1];
    FrElement _tmp_52[1];
    FrElement t[1];
    FrElement _tmp_53[1];
    FrElement _num_60[1];
    FrElement _tmp_54[1];
    FrElement _tmp_55[1];
    FrElement _tmp_56[1];
    FrElement _tmp_57[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_59[1];
    FrElement _tmp_58[1];
    FrElement _tmp_60[1];
    FrElement _num_65[1];
    FrElement _tmp_61[1];
    FrElement _tmp_62[1];
    FrElement _tmp_63[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_64[1];
    FrElement _tmp_65[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_66[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_68[1];
    FrElement _tmp_69[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_71[1];
    FrElement _tmp_70[1];
    FrElement _tmp_72[1];
    FrElement _num_76[1];
    FrElement _tmp_73[1];
    FrElement _tmp_74[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_76[1];
    FrElement _tmp_75[1];
    FrElement _tmp_77[1];
    FrElement _tmp_79[1];
    FrElement _tmp_78[1];
    FrElement _tmp_80[1];
    FrElement _num_81[1];
    FrElement _tmp_81[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_83[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_85[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_87[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_89[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_91[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_93[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_95[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_97[1];
    FrElement _tmp_96[1];
    FrElement _tmp_98[1];
    FrElement _num_106[1];
    FrElement _tmp_99[1];
    FrElement _num_108[1];
    FrElement _tmp_100[1];
    FrElement _sigValue_18[1];
    FrElement _sigValue_19[1];
    FrElement _sigValue_20[1];
    FrElement _sigValue_21[1];
    FrElement _sigValue_22[1];
    FrElement _sigValue_23[1];
    FrElement _sigValue_24[1];
    FrElement _sigValue_25[1];
    FrElement _sigValue_26[1];
    FrElement _tmp_102[1];
    FrElement _tmp_101[1];
    FrElement _tmp_103[1];
    FrElement _num_111[1];
    FrElement _tmp_104[1];
    FrElement _sigValue_27[1];
    FrElement _sigValue_28[1];
    FrElement _sigValue_29[1];
    FrElement _sigValue_30[1];
    FrElement _tmp_106[1];
    FrElement _tmp_105[1];
    FrElement _tmp_107[1];
    FrElement _num_118[1];
    FrElement _tmp_108[1];
    FrElement _sigValue_31[1];
    FrElement _tmp_109[1];
    FrElement _sigValue_32[1];
    FrElement _tmp_110[1];
    FrElement _sigValue_33[1];
    FrElement _tmp_111[1];
    FrElement _sigValue_34[1];
    FrElement _tmp_112[1];
    FrElement _sigValue_35[1];
    FrElement _tmp_113[1];
    FrElement _sigValue_36[1];
    FrElement _tmp_114[1];
    FrElement _sigValue_37[1];
    FrElement _tmp_115[1];
    FrElement _sigValue_38[1];
    FrElement _tmp_116[1];
    FrElement _tmp_118[1];
    FrElement _tmp_117[1];
    FrElement _tmp_119[1];
    FrElement _tmp_121[1];
    FrElement _tmp_120[1];
    FrElement _tmp_122[1];
    FrElement _num_130[1];
    FrElement _tmp_123[1];
    FrElement _tmp_125[1];
    FrElement _sigValue_39[1];
    FrElement _sigValue_40[1];
    FrElement _tmp_127[1];
    FrElement _sigValue_41[1];
    FrElement _sigValue_42[1];
    FrElement _tmp_129[1];
    FrElement _sigValue_43[1];
    FrElement _sigValue_44[1];
    FrElement _tmp_131[1];
    FrElement _sigValue_45[1];
    FrElement _sigValue_46[1];
    FrElement _tmp_133[1];
    FrElement _sigValue_47[1];
    FrElement _sigValue_48[1];
    FrElement _tmp_135[1];
    FrElement _sigValue_49[1];
    FrElement _sigValue_50[1];
    FrElement _tmp_137[1];
    FrElement _sigValue_51[1];
    FrElement _sigValue_52[1];
    FrElement _tmp_139[1];
    FrElement _sigValue_53[1];
    FrElement _sigValue_54[1];
    FrElement _tmp_141[1];
    FrElement _tmp_140[1];
    FrElement _tmp_142[1];
    FrElement _num_189[1];
    FrElement _tmp_143[1];
    FrElement _tmp_144[1];
    FrElement _sigValue_55[1];
    FrElement _sigValue_56[1];
    FrElement _tmp_146[1];
    FrElement _sigValue_57[1];
    FrElement _sigValue_58[1];
    FrElement _tmp_148[1];
    FrElement _sigValue_59[1];
    FrElement _sigValue_60[1];
    FrElement _tmp_150[1];
    FrElement _sigValue_61[1];
    FrElement _sigValue_62[1];
    FrElement _tmp_152[1];
    FrElement _sigValue_63[1];
    FrElement _sigValue_64[1];
    FrElement _tmp_154[1];
    FrElement _sigValue_65[1];
    FrElement _sigValue_66[1];
    FrElement _tmp_156[1];
    FrElement _sigValue_67[1];
    FrElement _sigValue_68[1];
    FrElement _tmp_158[1];
    FrElement _sigValue_69[1];
    FrElement _sigValue_70[1];
    FrElement _tmp_160[1];
    FrElement _tmp_159[1];
    FrElement _tmp_161[1];
    int _hin_sigIdx_;
    int _inp_sigIdx_;
    int _out_sigIdx_;
    int _offset_6;
    int _offset_11;
    int _offset_13;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_62;
    int _offset_68;
    int _offset_71;
    int _offset_83;
    int _offset_86;
    int _compIdx;
    int _offset_93;
    int _in2_sigIdx_;
    int _offset_95;
    int _offset_98;
    int _compIdx_1;
    int _offset_100;
    int _in7_sigIdx_;
    int _offset_102;
    int _offset_105;
    int _compIdx_2;
    int _offset_107;
    int _in15_sigIdx_;
    int _offset_109;
    int _offset_112;
    int _compIdx_3;
    int _offset_114;
    int _in16_sigIdx_;
    int _offset_116;
    int _offset_119;
    int _compIdx_4;
    int _offset_126;
    int _out_sigIdx__1;
    int _offset_128;
    int _offset_131;
    int _offset_141;
    int _a_sigIdx_;
    int _offset_143;
    int _offset_145;
    int _b_sigIdx_;
    int _offset_147;
    int _offset_149;
    int _c_sigIdx_;
    int _offset_151;
    int _offset_153;
    int _d_sigIdx_;
    int _offset_155;
    int _offset_157;
    int _e_sigIdx_;
    int _offset_159;
    int _offset_161;
    int _f_sigIdx_;
    int _offset_163;
    int _offset_165;
    int _g_sigIdx_;
    int _offset_167;
    int _offset_169;
    int _h_sigIdx_;
    int _offset_171;
    int _compIdx_5;
    int _offset_180;
    int _h_sigIdx__1;
    int _offset_182;
    int _offset_185;
    int _compIdx_6;
    int _offset_187;
    int _e_sigIdx__1;
    int _offset_189;
    int _offset_192;
    int _compIdx_7;
    int _offset_194;
    int _f_sigIdx__1;
    int _offset_196;
    int _offset_199;
    int _compIdx_8;
    int _offset_201;
    int _g_sigIdx__1;
    int _offset_203;
    int _offset_206;
    int _compIdx_9;
    int _offset_208;
    int _k_sigIdx_;
    int _offset_210;
    int _compIdx_10;
    int _offset_212;
    int _out_sigIdx__2;
    int _offset_214;
    int _compIdx_11;
    int _offset_216;
    int _w_sigIdx__1;
    int _offset_218;
    int _offset_221;
    int _compIdx_12;
    int _offset_223;
    int _a_sigIdx__1;
    int _offset_225;
    int _offset_228;
    int _compIdx_13;
    int _offset_230;
    int _b_sigIdx__1;
    int _offset_232;
    int _offset_235;
    int _compIdx_14;
    int _offset_237;
    int _c_sigIdx__1;
    int _offset_239;
    int _offset_242;
    int _compIdx_15;
    int _offset_249;
    int _in_sigIdx_;
    int _offset_251;
    int _offset_254;
    int _compIdx_16;
    int _offset_256;
    int _in_sigIdx__1;
    int _offset_258;
    int _compIdx_17;
    int _offset_260;
    int _out_sigIdx__3;
    int _offset_262;
    int _compIdx_18;
    int _offset_264;
    int _in_sigIdx__2;
    int _offset_266;
    int _compIdx_19;
    int _offset_268;
    int _out_sigIdx__4;
    int _offset_270;
    int _compIdx_20;
    int _offset_272;
    int _in_sigIdx__3;
    int _offset_274;
    int _compIdx_21;
    int _offset_276;
    int _out_sigIdx__5;
    int _offset_278;
    int _offset_286;
    int _offset_289;
    int _offset_292;
    int _offset_295;
    int _offset_298;
    int _offset_301;
    int _compIdx_22;
    int _offset_303;
    int _out_sigIdx__6;
    int _offset_305;
    int _offset_308;
    int _offset_311;
    int _offset_314;
    int _offset_317;
    int _offset_320;
    int _offset_323;
    int _offset_326;
    int _compIdx_23;
    int _offset_328;
    int _out_sigIdx__7;
    int _offset_330;
    int _offset_333;
    int _compIdx_24;
    int _offset_342;
    int _in_sigIdx__4;
    int _offset_344;
    int _offset_346;
    int _compIdx_25;
    int _offset_347;
    int _in_sigIdx__5;
    int _offset_349;
    int _offset_351;
    int _compIdx_26;
    int _offset_352;
    int _in_sigIdx__6;
    int _offset_354;
    int _offset_356;
    int _compIdx_27;
    int _offset_357;
    int _in_sigIdx__7;
    int _offset_359;
    int _offset_361;
    int _compIdx_28;
    int _offset_362;
    int _in_sigIdx__8;
    int _offset_364;
    int _offset_366;
    int _compIdx_29;
    int _offset_367;
    int _in_sigIdx__9;
    int _offset_369;
    int _offset_371;
    int _compIdx_30;
    int _offset_372;
    int _in_sigIdx__10;
    int _offset_374;
    int _offset_376;
    int _compIdx_31;
    int _offset_377;
    int _in_sigIdx__11;
    int _offset_379;
    int _offset_381;
    int _compIdx_32;
    int _offset_382;
    int _in_sigIdx__12;
    int _offset_384;
    int _offset_386;
    int _compIdx_33;
    int _offset_387;
    int _in_sigIdx__13;
    int _offset_389;
    int _offset_391;
    int _compIdx_34;
    int _offset_392;
    int _in_sigIdx__14;
    int _offset_394;
    int _offset_396;
    int _compIdx_35;
    int _offset_397;
    int _in_sigIdx__15;
    int _offset_399;
    int _offset_401;
    int _compIdx_36;
    int _offset_402;
    int _in_sigIdx__16;
    int _offset_404;
    int _offset_406;
    int _compIdx_37;
    int _offset_407;
    int _in_sigIdx__17;
    int _offset_409;
    int _offset_411;
    int _compIdx_38;
    int _offset_412;
    int _in_sigIdx__18;
    int _offset_414;
    int _offset_416;
    int _compIdx_39;
    int _offset_417;
    int _in_sigIdx__19;
    int _offset_419;
    int _offset_421;
    int _offset_428;
    int _compIdx_40;
    int _offset_429;
    int _out_sigIdx__8;
    int _offset_431;
    int _offset_433;
    int _compIdx_41;
    int _offset_434;
    int _out_sigIdx__9;
    int _offset_436;
    int _offset_438;
    int _compIdx_42;
    int _offset_439;
    int _out_sigIdx__10;
    int _offset_441;
    int _offset_443;
    int _compIdx_43;
    int _offset_444;
    int _out_sigIdx__11;
    int _offset_446;
    int _offset_448;
    int _compIdx_44;
    int _offset_449;
    int _out_sigIdx__12;
    int _offset_451;
    int _offset_453;
    int _compIdx_45;
    int _offset_454;
    int _out_sigIdx__13;
    int _offset_456;
    int _offset_458;
    int _compIdx_46;
    int _offset_459;
    int _out_sigIdx__14;
    int _offset_461;
    int _offset_463;
    int _compIdx_47;
    int _offset_464;
    int _out_sigIdx__15;
    int _offset_466;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_inp;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in2;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in7;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_in15;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_in16;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_hin;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_d;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_h_1;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_e_1;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_f_1;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_g_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_w_1;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _sigSizes_out_6;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_out_7;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _compSizes_26;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _compSizes_27;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _compSizes_28;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _compSizes_29;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _compSizes_30;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _compSizes_31;
    Circom_Sizes _sigSizes_in_11;
    Circom_Sizes _compSizes_32;
    Circom_Sizes _sigSizes_in_12;
    Circom_Sizes _compSizes_33;
    Circom_Sizes _sigSizes_in_13;
    Circom_Sizes _compSizes_34;
    Circom_Sizes _sigSizes_in_14;
    Circom_Sizes _compSizes_35;
    Circom_Sizes _sigSizes_in_15;
    Circom_Sizes _compSizes_36;
    Circom_Sizes _sigSizes_in_16;
    Circom_Sizes _compSizes_37;
    Circom_Sizes _sigSizes_in_17;
    Circom_Sizes _compSizes_38;
    Circom_Sizes _sigSizes_in_18;
    Circom_Sizes _compSizes_39;
    Circom_Sizes _sigSizes_in_19;
    Circom_Sizes _compSizes_40;
    Circom_Sizes _sigSizes_out_8;
    Circom_Sizes _compSizes_41;
    Circom_Sizes _sigSizes_out_9;
    Circom_Sizes _compSizes_42;
    Circom_Sizes _sigSizes_out_10;
    Circom_Sizes _compSizes_43;
    Circom_Sizes _sigSizes_out_11;
    Circom_Sizes _compSizes_44;
    Circom_Sizes _sigSizes_out_12;
    Circom_Sizes _compSizes_45;
    Circom_Sizes _sigSizes_out_13;
    Circom_Sizes _compSizes_46;
    Circom_Sizes _sigSizes_out_14;
    Circom_Sizes _compSizes_47;
    Circom_Sizes _sigSizes_out_15;
    PFrElement _v_2;
    PFrElement _loopCond;
    PFrElement _v_6;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _loopCond_6;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _loopCond_9;
    PFrElement _loopCond_10;
    PFrElement _loopCond_11;
    PFrElement _loopCond_12;
    PFrElement _loopCond_13;
    PFrElement _loopCond_14;
    PFrElement _loopCond_15;
    PFrElement _loopCond_16;
    PFrElement _loopCond_17;
    PFrElement _loopCond_18;
    PFrElement _loopCond_19;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_26[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_29[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_32[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_35[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_38[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_41[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_44[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_43[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_52[0]), ctx->circuit->constants +1);
    Fr_copy(&(t[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_60[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_65[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_76[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_81[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_106[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_108[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_111[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_118[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_130[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_189[0]), ctx->circuit->constants +0);
    _hin_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x33732e1930068adcLL /* hin */);
    _inp_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _d_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_inp = ctx->getSignalSizes(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_hin = ctx->getSignalSizes(__cIdx, 0x33732e1930068adcLL /* hin */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_d = ctx->getSignalSizes(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    /* signal input hin[256] */
    /* signal input inp[512] */
    /* signal output out[256] */
    /* signal a[65][32] */
    /* signal b[65][32] */
    /* signal c[65][32] */
    /* signal d[65][32] */
    /* signal e[65][32] */
    /* signal f[65][32] */
    /* signal g[65][32] */
    /* signal h[65][32] */
    /* signal w[64][32] */
    /* var outCalc[256] = sha256compression(hin, inp) */
    ctx->multiGetSignal(__cIdx, __cIdx, _hin_sigIdx_, _sigValue, 256);
    ctx->multiGetSignal(__cIdx, __cIdx, _inp_sigIdx_, _sigValue_1, 512);
    sha256compression_ed3059d4e7ba1c14(ctx, _retsha256compression, _sigValue,_sigValue_1);
    Fr_copyn(outCalc, _retsha256compression, 256);
    /* var i */
    /* for (i=0;i<256;i++) */
    /* out[i] <-- outCalc[i] */
    _v_2 = outCalc;
    _offset_6 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_6, _v_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- outCalc[i] */
        _offset_11 = Fr_toInt(i);
        _v_6 = outCalc + _offset_11;
        _offset_13 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_13, _v_6);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 13));
        _loopCond = _tmp_6;
    }
    /* component sigmaPlus[48] */
    /* for (i=0;i<48;i++) */
    Fr_copyn(i, _num_26, 1);
    Fr_lt(_tmp_7, i, (ctx->circuit->constants + 118));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sigmaPlus[i] = SigmaPlus() */
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 118));
        _loopCond_1 = _tmp_10;
    }
    /* component ct_k[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_29, 1);
    Fr_lt(_tmp_11, i, (ctx->circuit->constants + 17));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* ct_k[i] = K(i) */
        Fr_copyn(_tmp_13, i, 1);
        Fr_add(_tmp_12, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_12, 1);
        Fr_lt(_tmp_14, i, (ctx->circuit->constants + 17));
        _loopCond_2 = _tmp_14;
    }
    /* component t1[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_32, 1);
    Fr_lt(_tmp_15, i, (ctx->circuit->constants + 17));
    _loopCond_3 = _tmp_15;
    while (Fr_isTrue(_loopCond_3)) {
        /* t1[i] = T1() */
        Fr_copyn(_tmp_17, i, 1);
        Fr_add(_tmp_16, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_16, 1);
        Fr_lt(_tmp_18, i, (ctx->circuit->constants + 17));
        _loopCond_3 = _tmp_18;
    }
    /* component t2[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_35, 1);
    Fr_lt(_tmp_19, i, (ctx->circuit->constants + 17));
    _loopCond_4 = _tmp_19;
    while (Fr_isTrue(_loopCond_4)) {
        /* t2[i] = T2() */
        Fr_copyn(_tmp_21, i, 1);
        Fr_add(_tmp_20, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_20, 1);
        Fr_lt(_tmp_22, i, (ctx->circuit->constants + 17));
        _loopCond_4 = _tmp_22;
    }
    /* component suma[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_38, 1);
    Fr_lt(_tmp_23, i, (ctx->circuit->constants + 17));
    _loopCond_5 = _tmp_23;
    while (Fr_isTrue(_loopCond_5)) {
        /* suma[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_25, i, 1);
        Fr_add(_tmp_24, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_24, 1);
        Fr_lt(_tmp_26, i, (ctx->circuit->constants + 17));
        _loopCond_5 = _tmp_26;
    }
    /* component sume[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_41, 1);
    Fr_lt(_tmp_27, i, (ctx->circuit->constants + 17));
    _loopCond_6 = _tmp_27;
    while (Fr_isTrue(_loopCond_6)) {
        /* sume[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_29, i, 1);
        Fr_add(_tmp_28, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_28, 1);
        Fr_lt(_tmp_30, i, (ctx->circuit->constants + 17));
        _loopCond_6 = _tmp_30;
    }
    /* component fsum[8] */
    /* for (i=0;i<8;i++) */
    Fr_copyn(i, _num_44, 1);
    Fr_lt(_tmp_31, i, (ctx->circuit->constants + 37));
    _loopCond_7 = _tmp_31;
    while (Fr_isTrue(_loopCond_7)) {
        /* fsum[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_33, i, 1);
        Fr_add(_tmp_32, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_32, 1);
        Fr_lt(_tmp_34, i, (ctx->circuit->constants + 37));
        _loopCond_7 = _tmp_34;
    }
    /* var k */
    /* var t */
    /* for (t=0;t<64;t++) */
    /* if (t<16) */
    /* for (k=0;k<32;k++) */
    /* w[t][k] <== inp[t*32+31-k] */
    _offset_59 = _inp_sigIdx_ + 31*_sigSizes_inp[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_59, _sigValue_2, 1);
    _offset_62 = _w_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_62, _sigValue_2);
    _loopCond_8 = _tmp_43;
    while (Fr_isTrue(_loopCond_8)) {
        /* w[t][k] <== inp[t*32+31-k] */
        Fr_sub(_tmp_46, (ctx->circuit->constants + 8), k);
        _offset_68 = _inp_sigIdx_ + Fr_toInt(_tmp_46)*_sigSizes_inp[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_68, _sigValue_3, 1);
        _offset_71 = _w_sigIdx_ + Fr_toInt(k)*_sigSizes_w[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_71, _sigValue_3);
        Fr_copyn(_tmp_48, k, 1);
        Fr_add(_tmp_47, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_47, 1);
        Fr_lt(_tmp_49, k, (ctx->circuit->constants + 9));
        _loopCond_8 = _tmp_49;
    }
    _loopCond_9 = _tmp_52;
    while (Fr_isTrue(_loopCond_9)) {
        /* if (t<16) */
        Fr_lt(_tmp_53, t, (ctx->circuit->constants + 50));
        if (Fr_isTrue(_tmp_53)) {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_60, 1);
            Fr_lt(_tmp_54, k, (ctx->circuit->constants + 9));
            _loopCond_10 = _tmp_54;
            while (Fr_isTrue(_loopCond_10)) {
                /* w[t][k] <== inp[t*32+31-k] */
                Fr_mul(_tmp_55, t, (ctx->circuit->constants + 9));
                Fr_add(_tmp_56, _tmp_55, (ctx->circuit->constants + 8));
                Fr_sub(_tmp_57, _tmp_56, k);
                _offset_83 = _inp_sigIdx_ + Fr_toInt(_tmp_57)*_sigSizes_inp[1];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_83, _sigValue_4, 1);
                _offset_86 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_86, _sigValue_4);
                Fr_copyn(_tmp_59, k, 1);
                Fr_add(_tmp_58, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_58, 1);
                Fr_lt(_tmp_60, k, (ctx->circuit->constants + 9));
                _loopCond_10 = _tmp_60;
            }
        } else {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_65, 1);
            Fr_lt(_tmp_61, k, (ctx->circuit->constants + 9));
            _loopCond_11 = _tmp_61;
            while (Fr_isTrue(_loopCond_11)) {
                /* sigmaPlus[t-16].in2[k] <== w[t-2][k] */
                _compIdx = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_62, t, (ctx->circuit->constants + 50));
                _offset_93 = _compIdx + Fr_toInt(_tmp_62)*_compSizes[1];
                _in2_sigIdx_ = ctx->getSignalOffset(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _sigSizes_in2 = ctx->getSignalSizes(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _offset_95 = _in2_sigIdx_ + Fr_toInt(k)*_sigSizes_in2[1];
                Fr_sub(_tmp_63, t, (ctx->circuit->constants + 2));
                _offset_98 = _w_sigIdx_ + Fr_toInt(_tmp_63)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_98, _sigValue_5, 1);
                ctx->setSignal(__cIdx, _offset_93, _offset_95, _sigValue_5);
                /* sigmaPlus[t-16].in7[k] <== w[t-7][k] */
                _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_64, t, (ctx->circuit->constants + 50));
                _offset_100 = _compIdx_1 + Fr_toInt(_tmp_64)*_compSizes_1[1];
                _in7_sigIdx_ = ctx->getSignalOffset(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _sigSizes_in7 = ctx->getSignalSizes(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _offset_102 = _in7_sigIdx_ + Fr_toInt(k)*_sigSizes_in7[1];
                Fr_sub(_tmp_65, t, (ctx->circuit->constants + 44));
                _offset_105 = _w_sigIdx_ + Fr_toInt(_tmp_65)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_105, _sigValue_6, 1);
                ctx->setSignal(__cIdx, _offset_100, _offset_102, _sigValue_6);
                /* sigmaPlus[t-16].in15[k] <== w[t-15][k] */
                _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_66, t, (ctx->circuit->constants + 50));
                _offset_107 = _compIdx_2 + Fr_toInt(_tmp_66)*_compSizes_2[1];
                _in15_sigIdx_ = ctx->getSignalOffset(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _sigSizes_in15 = ctx->getSignalSizes(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _offset_109 = _in15_sigIdx_ + Fr_toInt(k)*_sigSizes_in15[1];
                Fr_sub(_tmp_67, t, (ctx->circuit->constants + 52));
                _offset_112 = _w_sigIdx_ + Fr_toInt(_tmp_67)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_112, _sigValue_7, 1);
                ctx->setSignal(__cIdx, _offset_107, _offset_109, _sigValue_7);
                /* sigmaPlus[t-16].in16[k] <== w[t-16][k] */
                _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_68, t, (ctx->circuit->constants + 50));
                _offset_114 = _compIdx_3 + Fr_toInt(_tmp_68)*_compSizes_3[1];
                _in16_sigIdx_ = ctx->getSignalOffset(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _sigSizes_in16 = ctx->getSignalSizes(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _offset_116 = _in16_sigIdx_ + Fr_toInt(k)*_sigSizes_in16[1];
                Fr_sub(_tmp_69, t, (ctx->circuit->constants + 50));
                _offset_119 = _w_sigIdx_ + Fr_toInt(_tmp_69)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_119, _sigValue_8, 1);
                ctx->setSignal(__cIdx, _offset_114, _offset_116, _sigValue_8);
                Fr_copyn(_tmp_71, k, 1);
                Fr_add(_tmp_70, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_70, 1);
                Fr_lt(_tmp_72, k, (ctx->circuit->constants + 9));
                _loopCond_11 = _tmp_72;
            }
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_76, 1);
            Fr_lt(_tmp_73, k, (ctx->circuit->constants + 9));
            _loopCond_12 = _tmp_73;
            while (Fr_isTrue(_loopCond_12)) {
                /* w[t][k] <== sigmaPlus[t-16].out[k] */
                _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_74, t, (ctx->circuit->constants + 50));
                _offset_126 = _compIdx_4 + Fr_toInt(_tmp_74)*_compSizes_4[1];
                _out_sigIdx__1 = ctx->getSignalOffset(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_1 = ctx->getSignalSizes(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _offset_128 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
                ctx->multiGetSignal(__cIdx, _offset_126, _offset_128, _sigValue_9, 1);
                _offset_131 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_131, _sigValue_9);
                Fr_copyn(_tmp_76, k, 1);
                Fr_add(_tmp_75, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_75, 1);
                Fr_lt(_tmp_77, k, (ctx->circuit->constants + 9));
                _loopCond_12 = _tmp_77;
            }
        }
        Fr_copyn(_tmp_79, t, 1);
        Fr_add(_tmp_78, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_78, 1);
        Fr_lt(_tmp_80, t, (ctx->circuit->constants + 17));
        _loopCond_9 = _tmp_80;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_81, 1);
    Fr_lt(_tmp_81, k, (ctx->circuit->constants + 9));
    _loopCond_13 = _tmp_81;
    while (Fr_isTrue(_loopCond_13)) {
        /* a[0][k] <== hin[k] */
        _offset_141 = _hin_sigIdx_ + Fr_toInt(k)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_141, _sigValue_10, 1);
        _offset_143 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_143, _sigValue_10);
        /* b[0][k] <== hin[32*1 + k] */
        Fr_add(_tmp_83, (ctx->circuit->constants + 9), k);
        _offset_145 = _hin_sigIdx_ + Fr_toInt(_tmp_83)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_145, _sigValue_11, 1);
        _offset_147 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_147, _sigValue_11);
        /* c[0][k] <== hin[32*2 + k] */
        Fr_add(_tmp_85, (ctx->circuit->constants + 17), k);
        _offset_149 = _hin_sigIdx_ + Fr_toInt(_tmp_85)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_149, _sigValue_12, 1);
        _offset_151 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_151, _sigValue_12);
        /* d[0][k] <== hin[32*3 + k] */
        Fr_add(_tmp_87, (ctx->circuit->constants + 19), k);
        _offset_153 = _hin_sigIdx_ + Fr_toInt(_tmp_87)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_153, _sigValue_13, 1);
        _offset_155 = _d_sigIdx_ + Fr_toInt(k)*_sigSizes_d[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_155, _sigValue_13);
        /* e[0][k] <== hin[32*4 + k] */
        Fr_add(_tmp_89, (ctx->circuit->constants + 20), k);
        _offset_157 = _hin_sigIdx_ + Fr_toInt(_tmp_89)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_157, _sigValue_14, 1);
        _offset_159 = _e_sigIdx_ + Fr_toInt(k)*_sigSizes_e[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_159, _sigValue_14);
        /* f[0][k] <== hin[32*5 + k] */
        Fr_add(_tmp_91, (ctx->circuit->constants + 11), k);
        _offset_161 = _hin_sigIdx_ + Fr_toInt(_tmp_91)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_161, _sigValue_15, 1);
        _offset_163 = _f_sigIdx_ + Fr_toInt(k)*_sigSizes_f[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_163, _sigValue_15);
        /* g[0][k] <== hin[32*6 + k] */
        Fr_add(_tmp_93, (ctx->circuit->constants + 21), k);
        _offset_165 = _hin_sigIdx_ + Fr_toInt(_tmp_93)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_165, _sigValue_16, 1);
        _offset_167 = _g_sigIdx_ + Fr_toInt(k)*_sigSizes_g[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_167, _sigValue_16);
        /* h[0][k] <== hin[32*7 + k] */
        Fr_add(_tmp_95, (ctx->circuit->constants + 22), k);
        _offset_169 = _hin_sigIdx_ + Fr_toInt(_tmp_95)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_169, _sigValue_17, 1);
        _offset_171 = _h_sigIdx_ + Fr_toInt(k)*_sigSizes_h[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_171, _sigValue_17);
        Fr_copyn(_tmp_97, k, 1);
        Fr_add(_tmp_96, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_96, 1);
        Fr_lt(_tmp_98, k, (ctx->circuit->constants + 9));
        _loopCond_13 = _tmp_98;
    }
    /* for (t = 0;t<64;t++) */
    Fr_copyn(t, _num_106, 1);
    Fr_lt(_tmp_99, t, (ctx->circuit->constants + 17));
    _loopCond_14 = _tmp_99;
    while (Fr_isTrue(_loopCond_14)) {
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_108, 1);
        Fr_lt(_tmp_100, k, (ctx->circuit->constants + 9));
        _loopCond_15 = _tmp_100;
        while (Fr_isTrue(_loopCond_15)) {
            /* t1[t].h[k] <== h[t][k] */
            _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_180 = _compIdx_5 + Fr_toInt(t)*_compSizes_5[1];
            _h_sigIdx__1 = ctx->getSignalOffset(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _sigSizes_h_1 = ctx->getSignalSizes(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _offset_182 = _h_sigIdx__1 + Fr_toInt(k)*_sigSizes_h_1[1];
            _offset_185 = _h_sigIdx_ + Fr_toInt(t)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_185, _sigValue_18, 1);
            ctx->setSignal(__cIdx, _offset_180, _offset_182, _sigValue_18);
            /* t1[t].e[k] <== e[t][k] */
            _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_187 = _compIdx_6 + Fr_toInt(t)*_compSizes_6[1];
            _e_sigIdx__1 = ctx->getSignalOffset(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _sigSizes_e_1 = ctx->getSignalSizes(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _offset_189 = _e_sigIdx__1 + Fr_toInt(k)*_sigSizes_e_1[1];
            _offset_192 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_192, _sigValue_19, 1);
            ctx->setSignal(__cIdx, _offset_187, _offset_189, _sigValue_19);
            /* t1[t].f[k] <== f[t][k] */
            _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_194 = _compIdx_7 + Fr_toInt(t)*_compSizes_7[1];
            _f_sigIdx__1 = ctx->getSignalOffset(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _sigSizes_f_1 = ctx->getSignalSizes(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _offset_196 = _f_sigIdx__1 + Fr_toInt(k)*_sigSizes_f_1[1];
            _offset_199 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_199, _sigValue_20, 1);
            ctx->setSignal(__cIdx, _offset_194, _offset_196, _sigValue_20);
            /* t1[t].g[k] <== g[t][k] */
            _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_201 = _compIdx_8 + Fr_toInt(t)*_compSizes_8[1];
            _g_sigIdx__1 = ctx->getSignalOffset(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _sigSizes_g_1 = ctx->getSignalSizes(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _offset_203 = _g_sigIdx__1 + Fr_toInt(k)*_sigSizes_g_1[1];
            _offset_206 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_206, _sigValue_21, 1);
            ctx->setSignal(__cIdx, _offset_201, _offset_203, _sigValue_21);
            /* t1[t].k[k] <== ct_k[t].out[k] */
            _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_208 = _compIdx_9 + Fr_toInt(t)*_compSizes_9[1];
            _k_sigIdx_ = ctx->getSignalOffset(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _sigSizes_k = ctx->getSignalSizes(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _offset_210 = _k_sigIdx_ + Fr_toInt(k)*_sigSizes_k[1];
            _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _offset_212 = _compIdx_10 + Fr_toInt(t)*_compSizes_10[1];
            _out_sigIdx__2 = ctx->getSignalOffset(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_2 = ctx->getSignalSizes(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _offset_214 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
            ctx->multiGetSignal(__cIdx, _offset_212, _offset_214, _sigValue_22, 1);
            ctx->setSignal(__cIdx, _offset_208, _offset_210, _sigValue_22);
            /* t1[t].w[k] <== w[t][k] */
            _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_216 = _compIdx_11 + Fr_toInt(t)*_compSizes_11[1];
            _w_sigIdx__1 = ctx->getSignalOffset(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _sigSizes_w_1 = ctx->getSignalSizes(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _offset_218 = _w_sigIdx__1 + Fr_toInt(k)*_sigSizes_w_1[1];
            _offset_221 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_221, _sigValue_23, 1);
            ctx->setSignal(__cIdx, _offset_216, _offset_218, _sigValue_23);
            /* t2[t].a[k] <== a[t][k] */
            _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_223 = _compIdx_12 + Fr_toInt(t)*_compSizes_12[1];
            _a_sigIdx__1 = ctx->getSignalOffset(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _sigSizes_a_1 = ctx->getSignalSizes(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _offset_225 = _a_sigIdx__1 + Fr_toInt(k)*_sigSizes_a_1[1];
            _offset_228 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_228, _sigValue_24, 1);
            ctx->setSignal(__cIdx, _offset_223, _offset_225, _sigValue_24);
            /* t2[t].b[k] <== b[t][k] */
            _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_230 = _compIdx_13 + Fr_toInt(t)*_compSizes_13[1];
            _b_sigIdx__1 = ctx->getSignalOffset(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _sigSizes_b_1 = ctx->getSignalSizes(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _offset_232 = _b_sigIdx__1 + Fr_toInt(k)*_sigSizes_b_1[1];
            _offset_235 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_235, _sigValue_25, 1);
            ctx->setSignal(__cIdx, _offset_230, _offset_232, _sigValue_25);
            /* t2[t].c[k] <== c[t][k] */
            _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_237 = _compIdx_14 + Fr_toInt(t)*_compSizes_14[1];
            _c_sigIdx__1 = ctx->getSignalOffset(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _sigSizes_c_1 = ctx->getSignalSizes(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _offset_239 = _c_sigIdx__1 + Fr_toInt(k)*_sigSizes_c_1[1];
            _offset_242 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_242, _sigValue_26, 1);
            ctx->setSignal(__cIdx, _offset_237, _offset_239, _sigValue_26);
            Fr_copyn(_tmp_102, k, 1);
            Fr_add(_tmp_101, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_101, 1);
            Fr_lt(_tmp_103, k, (ctx->circuit->constants + 9));
            _loopCond_15 = _tmp_103;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_111, 1);
        Fr_lt(_tmp_104, k, (ctx->circuit->constants + 9));
        _loopCond_16 = _tmp_104;
        while (Fr_isTrue(_loopCond_16)) {
            /* sume[t].in[0][k] <== d[t][k] */
            _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_249 = _compIdx_15 + Fr_toInt(t)*_compSizes_15[1];
            _in_sigIdx_ = ctx->getSignalOffset(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in = ctx->getSignalSizes(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _offset_251 = _in_sigIdx_ + Fr_toInt(k)*_sigSizes_in[2];
            _offset_254 = _d_sigIdx_ + Fr_toInt(t)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_254, _sigValue_27, 1);
            ctx->setSignal(__cIdx, _offset_249, _offset_251, _sigValue_27);
            /* sume[t].in[1][k] <== t1[t].out[k] */
            _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_256 = _compIdx_16 + Fr_toInt(t)*_compSizes_16[1];
            _in_sigIdx__1 = ctx->getSignalOffset(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_1 = ctx->getSignalSizes(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _offset_258 = _in_sigIdx__1 + 1*_sigSizes_in_1[1] + Fr_toInt(k)*_sigSizes_in_1[2];
            _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_260 = _compIdx_17 + Fr_toInt(t)*_compSizes_17[1];
            _out_sigIdx__3 = ctx->getSignalOffset(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_3 = ctx->getSignalSizes(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _offset_262 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
            ctx->multiGetSignal(__cIdx, _offset_260, _offset_262, _sigValue_28, 1);
            ctx->setSignal(__cIdx, _offset_256, _offset_258, _sigValue_28);
            /* suma[t].in[0][k] <== t1[t].out[k] */
            _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_264 = _compIdx_18 + Fr_toInt(t)*_compSizes_18[1];
            _in_sigIdx__2 = ctx->getSignalOffset(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_2 = ctx->getSignalSizes(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _offset_266 = _in_sigIdx__2 + Fr_toInt(k)*_sigSizes_in_2[2];
            _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_268 = _compIdx_19 + Fr_toInt(t)*_compSizes_19[1];
            _out_sigIdx__4 = ctx->getSignalOffset(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_4 = ctx->getSignalSizes(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _offset_270 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
            ctx->multiGetSignal(__cIdx, _offset_268, _offset_270, _sigValue_29, 1);
            ctx->setSignal(__cIdx, _offset_264, _offset_266, _sigValue_29);
            /* suma[t].in[1][k] <== t2[t].out[k] */
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_272 = _compIdx_20 + Fr_toInt(t)*_compSizes_20[1];
            _in_sigIdx__3 = ctx->getSignalOffset(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_3 = ctx->getSignalSizes(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _offset_274 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(k)*_sigSizes_in_3[2];
            _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_276 = _compIdx_21 + Fr_toInt(t)*_compSizes_21[1];
            _out_sigIdx__5 = ctx->getSignalOffset(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_5 = ctx->getSignalSizes(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _offset_278 = _out_sigIdx__5 + Fr_toInt(k)*_sigSizes_out_5[1];
            ctx->multiGetSignal(__cIdx, _offset_276, _offset_278, _sigValue_30, 1);
            ctx->setSignal(__cIdx, _offset_272, _offset_274, _sigValue_30);
            Fr_copyn(_tmp_106, k, 1);
            Fr_add(_tmp_105, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_105, 1);
            Fr_lt(_tmp_107, k, (ctx->circuit->constants + 9));
            _loopCond_16 = _tmp_107;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_118, 1);
        Fr_lt(_tmp_108, k, (ctx->circuit->constants + 9));
        _loopCond_17 = _tmp_108;
        while (Fr_isTrue(_loopCond_17)) {
            /* h[t+1][k] <== g[t][k] */
            _offset_286 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_286, _sigValue_31, 1);
            Fr_add(_tmp_109, t, (ctx->circuit->constants + 1));
            _offset_289 = _h_sigIdx_ + Fr_toInt(_tmp_109)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_289, _sigValue_31);
            /* g[t+1][k] <== f[t][k] */
            _offset_292 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_292, _sigValue_32, 1);
            Fr_add(_tmp_110, t, (ctx->circuit->constants + 1));
            _offset_295 = _g_sigIdx_ + Fr_toInt(_tmp_110)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_295, _sigValue_32);
            /* f[t+1][k] <== e[t][k] */
            _offset_298 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_298, _sigValue_33, 1);
            Fr_add(_tmp_111, t, (ctx->circuit->constants + 1));
            _offset_301 = _f_sigIdx_ + Fr_toInt(_tmp_111)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_301, _sigValue_33);
            /* e[t+1][k] <== sume[t].out[k] */
            _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_303 = _compIdx_22 + Fr_toInt(t)*_compSizes_22[1];
            _out_sigIdx__6 = ctx->getSignalOffset(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_6 = ctx->getSignalSizes(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _offset_305 = _out_sigIdx__6 + Fr_toInt(k)*_sigSizes_out_6[1];
            ctx->multiGetSignal(__cIdx, _offset_303, _offset_305, _sigValue_34, 1);
            Fr_add(_tmp_112, t, (ctx->circuit->constants + 1));
            _offset_308 = _e_sigIdx_ + Fr_toInt(_tmp_112)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_308, _sigValue_34);
            /* d[t+1][k] <== c[t][k] */
            _offset_311 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_311, _sigValue_35, 1);
            Fr_add(_tmp_113, t, (ctx->circuit->constants + 1));
            _offset_314 = _d_sigIdx_ + Fr_toInt(_tmp_113)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_314, _sigValue_35);
            /* c[t+1][k] <== b[t][k] */
            _offset_317 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_317, _sigValue_36, 1);
            Fr_add(_tmp_114, t, (ctx->circuit->constants + 1));
            _offset_320 = _c_sigIdx_ + Fr_toInt(_tmp_114)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_320, _sigValue_36);
            /* b[t+1][k] <== a[t][k] */
            _offset_323 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_323, _sigValue_37, 1);
            Fr_add(_tmp_115, t, (ctx->circuit->constants + 1));
            _offset_326 = _b_sigIdx_ + Fr_toInt(_tmp_115)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_326, _sigValue_37);
            /* a[t+1][k] <== suma[t].out[k] */
            _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_328 = _compIdx_23 + Fr_toInt(t)*_compSizes_23[1];
            _out_sigIdx__7 = ctx->getSignalOffset(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_7 = ctx->getSignalSizes(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _offset_330 = _out_sigIdx__7 + Fr_toInt(k)*_sigSizes_out_7[1];
            ctx->multiGetSignal(__cIdx, _offset_328, _offset_330, _sigValue_38, 1);
            Fr_add(_tmp_116, t, (ctx->circuit->constants + 1));
            _offset_333 = _a_sigIdx_ + Fr_toInt(_tmp_116)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_333, _sigValue_38);
            Fr_copyn(_tmp_118, k, 1);
            Fr_add(_tmp_117, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_117, 1);
            Fr_lt(_tmp_119, k, (ctx->circuit->constants + 9));
            _loopCond_17 = _tmp_119;
        }
        Fr_copyn(_tmp_121, t, 1);
        Fr_add(_tmp_120, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_120, 1);
        Fr_lt(_tmp_122, t, (ctx->circuit->constants + 17));
        _loopCond_14 = _tmp_122;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_130, 1);
    Fr_lt(_tmp_123, k, (ctx->circuit->constants + 9));
    _loopCond_18 = _tmp_123;
    while (Fr_isTrue(_loopCond_18)) {
        /* fsum[0].in[0][k] <==  hin[32*0+k] */
        _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_342 = _compIdx_24;
        _in_sigIdx__4 = ctx->getSignalOffset(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _offset_344 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[2];
        Fr_add(_tmp_125, (ctx->circuit->constants + 0), k);
        _offset_346 = _hin_sigIdx_ + Fr_toInt(_tmp_125)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_346, _sigValue_39, 1);
        ctx->setSignal(__cIdx, _offset_342, _offset_344, _sigValue_39);
        /* fsum[0].in[1][k] <==  a[64][k] */
        _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_347 = _compIdx_25;
        _in_sigIdx__5 = ctx->getSignalOffset(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _offset_349 = _in_sigIdx__5 + 1*_sigSizes_in_5[1] + Fr_toInt(k)*_sigSizes_in_5[2];
        _offset_351 = _a_sigIdx_ + 64*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_351, _sigValue_40, 1);
        ctx->setSignal(__cIdx, _offset_347, _offset_349, _sigValue_40);
        /* fsum[1].in[0][k] <==  hin[32*1+k] */
        _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_26 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_352 = _compIdx_26 + 1*_compSizes_26[1];
        _in_sigIdx__6 = ctx->getSignalOffset(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _offset_354 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[2];
        Fr_add(_tmp_127, (ctx->circuit->constants + 9), k);
        _offset_356 = _hin_sigIdx_ + Fr_toInt(_tmp_127)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_356, _sigValue_41, 1);
        ctx->setSignal(__cIdx, _offset_352, _offset_354, _sigValue_41);
        /* fsum[1].in[1][k] <==  b[64][k] */
        _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_27 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_357 = _compIdx_27 + 1*_compSizes_27[1];
        _in_sigIdx__7 = ctx->getSignalOffset(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_7 = ctx->getSignalSizes(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _offset_359 = _in_sigIdx__7 + 1*_sigSizes_in_7[1] + Fr_toInt(k)*_sigSizes_in_7[2];
        _offset_361 = _b_sigIdx_ + 64*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_361, _sigValue_42, 1);
        ctx->setSignal(__cIdx, _offset_357, _offset_359, _sigValue_42);
        /* fsum[2].in[0][k] <==  hin[32*2+k] */
        _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_28 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_362 = _compIdx_28 + 2*_compSizes_28[1];
        _in_sigIdx__8 = ctx->getSignalOffset(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_8 = ctx->getSignalSizes(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _offset_364 = _in_sigIdx__8 + Fr_toInt(k)*_sigSizes_in_8[2];
        Fr_add(_tmp_129, (ctx->circuit->constants + 17), k);
        _offset_366 = _hin_sigIdx_ + Fr_toInt(_tmp_129)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_366, _sigValue_43, 1);
        ctx->setSignal(__cIdx, _offset_362, _offset_364, _sigValue_43);
        /* fsum[2].in[1][k] <==  c[64][k] */
        _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_29 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_367 = _compIdx_29 + 2*_compSizes_29[1];
        _in_sigIdx__9 = ctx->getSignalOffset(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_9 = ctx->getSignalSizes(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _offset_369 = _in_sigIdx__9 + 1*_sigSizes_in_9[1] + Fr_toInt(k)*_sigSizes_in_9[2];
        _offset_371 = _c_sigIdx_ + 64*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_371, _sigValue_44, 1);
        ctx->setSignal(__cIdx, _offset_367, _offset_369, _sigValue_44);
        /* fsum[3].in[0][k] <==  hin[32*3+k] */
        _compIdx_30 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_30 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_372 = _compIdx_30 + 3*_compSizes_30[1];
        _in_sigIdx__10 = ctx->getSignalOffset(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_10 = ctx->getSignalSizes(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _offset_374 = _in_sigIdx__10 + Fr_toInt(k)*_sigSizes_in_10[2];
        Fr_add(_tmp_131, (ctx->circuit->constants + 19), k);
        _offset_376 = _hin_sigIdx_ + Fr_toInt(_tmp_131)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_376, _sigValue_45, 1);
        ctx->setSignal(__cIdx, _offset_372, _offset_374, _sigValue_45);
        /* fsum[3].in[1][k] <==  d[64][k] */
        _compIdx_31 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_31 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_377 = _compIdx_31 + 3*_compSizes_31[1];
        _in_sigIdx__11 = ctx->getSignalOffset(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_11 = ctx->getSignalSizes(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _offset_379 = _in_sigIdx__11 + 1*_sigSizes_in_11[1] + Fr_toInt(k)*_sigSizes_in_11[2];
        _offset_381 = _d_sigIdx_ + 64*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_381, _sigValue_46, 1);
        ctx->setSignal(__cIdx, _offset_377, _offset_379, _sigValue_46);
        /* fsum[4].in[0][k] <==  hin[32*4+k] */
        _compIdx_32 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_32 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_382 = _compIdx_32 + 4*_compSizes_32[1];
        _in_sigIdx__12 = ctx->getSignalOffset(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_12 = ctx->getSignalSizes(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _offset_384 = _in_sigIdx__12 + Fr_toInt(k)*_sigSizes_in_12[2];
        Fr_add(_tmp_133, (ctx->circuit->constants + 20), k);
        _offset_386 = _hin_sigIdx_ + Fr_toInt(_tmp_133)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_386, _sigValue_47, 1);
        ctx->setSignal(__cIdx, _offset_382, _offset_384, _sigValue_47);
        /* fsum[4].in[1][k] <==  e[64][k] */
        _compIdx_33 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_33 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_387 = _compIdx_33 + 4*_compSizes_33[1];
        _in_sigIdx__13 = ctx->getSignalOffset(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_13 = ctx->getSignalSizes(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _offset_389 = _in_sigIdx__13 + 1*_sigSizes_in_13[1] + Fr_toInt(k)*_sigSizes_in_13[2];
        _offset_391 = _e_sigIdx_ + 64*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_391, _sigValue_48, 1);
        ctx->setSignal(__cIdx, _offset_387, _offset_389, _sigValue_48);
        /* fsum[5].in[0][k] <==  hin[32*5+k] */
        _compIdx_34 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_34 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_392 = _compIdx_34 + 5*_compSizes_34[1];
        _in_sigIdx__14 = ctx->getSignalOffset(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_14 = ctx->getSignalSizes(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _offset_394 = _in_sigIdx__14 + Fr_toInt(k)*_sigSizes_in_14[2];
        Fr_add(_tmp_135, (ctx->circuit->constants + 11), k);
        _offset_396 = _hin_sigIdx_ + Fr_toInt(_tmp_135)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_396, _sigValue_49, 1);
        ctx->setSignal(__cIdx, _offset_392, _offset_394, _sigValue_49);
        /* fsum[5].in[1][k] <==  f[64][k] */
        _compIdx_35 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_35 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_397 = _compIdx_35 + 5*_compSizes_35[1];
        _in_sigIdx__15 = ctx->getSignalOffset(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_15 = ctx->getSignalSizes(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _offset_399 = _in_sigIdx__15 + 1*_sigSizes_in_15[1] + Fr_toInt(k)*_sigSizes_in_15[2];
        _offset_401 = _f_sigIdx_ + 64*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_401, _sigValue_50, 1);
        ctx->setSignal(__cIdx, _offset_397, _offset_399, _sigValue_50);
        /* fsum[6].in[0][k] <==  hin[32*6+k] */
        _compIdx_36 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_36 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_402 = _compIdx_36 + 6*_compSizes_36[1];
        _in_sigIdx__16 = ctx->getSignalOffset(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_16 = ctx->getSignalSizes(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _offset_404 = _in_sigIdx__16 + Fr_toInt(k)*_sigSizes_in_16[2];
        Fr_add(_tmp_137, (ctx->circuit->constants + 21), k);
        _offset_406 = _hin_sigIdx_ + Fr_toInt(_tmp_137)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_406, _sigValue_51, 1);
        ctx->setSignal(__cIdx, _offset_402, _offset_404, _sigValue_51);
        /* fsum[6].in[1][k] <==  g[64][k] */
        _compIdx_37 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_37 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_407 = _compIdx_37 + 6*_compSizes_37[1];
        _in_sigIdx__17 = ctx->getSignalOffset(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_17 = ctx->getSignalSizes(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _offset_409 = _in_sigIdx__17 + 1*_sigSizes_in_17[1] + Fr_toInt(k)*_sigSizes_in_17[2];
        _offset_411 = _g_sigIdx_ + 64*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_411, _sigValue_52, 1);
        ctx->setSignal(__cIdx, _offset_407, _offset_409, _sigValue_52);
        /* fsum[7].in[0][k] <==  hin[32*7+k] */
        _compIdx_38 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_38 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_412 = _compIdx_38 + 7*_compSizes_38[1];
        _in_sigIdx__18 = ctx->getSignalOffset(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_18 = ctx->getSignalSizes(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _offset_414 = _in_sigIdx__18 + Fr_toInt(k)*_sigSizes_in_18[2];
        Fr_add(_tmp_139, (ctx->circuit->constants + 22), k);
        _offset_416 = _hin_sigIdx_ + Fr_toInt(_tmp_139)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_416, _sigValue_53, 1);
        ctx->setSignal(__cIdx, _offset_412, _offset_414, _sigValue_53);
        /* fsum[7].in[1][k] <==  h[64][k] */
        _compIdx_39 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_39 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_417 = _compIdx_39 + 7*_compSizes_39[1];
        _in_sigIdx__19 = ctx->getSignalOffset(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_19 = ctx->getSignalSizes(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _offset_419 = _in_sigIdx__19 + 1*_sigSizes_in_19[1] + Fr_toInt(k)*_sigSizes_in_19[2];
        _offset_421 = _h_sigIdx_ + 64*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_421, _sigValue_54, 1);
        ctx->setSignal(__cIdx, _offset_417, _offset_419, _sigValue_54);
        Fr_copyn(_tmp_141, k, 1);
        Fr_add(_tmp_140, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_140, 1);
        Fr_lt(_tmp_142, k, (ctx->circuit->constants + 9));
        _loopCond_18 = _tmp_142;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_189, 1);
    Fr_lt(_tmp_143, k, (ctx->circuit->constants + 9));
    _loopCond_19 = _tmp_143;
    while (Fr_isTrue(_loopCond_19)) {
        /* out[31-k]     === fsum[0].out[k] */
        Fr_sub(_tmp_144, (ctx->circuit->constants + 8), k);
        _offset_428 = _out_sigIdx_ + Fr_toInt(_tmp_144)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_428, _sigValue_55, 1);
        _compIdx_40 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_40 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_429 = _compIdx_40;
        _out_sigIdx__8 = ctx->getSignalOffset(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_8 = ctx->getSignalSizes(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _offset_431 = _out_sigIdx__8 + Fr_toInt(k)*_sigSizes_out_8[1];
        ctx->multiGetSignal(__cIdx, _offset_429, _offset_431, _sigValue_56, 1);
        ctx->checkConstraint(__cIdx, _sigValue_55, _sigValue_56, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:156:8");
        /* out[32+31-k]  === fsum[1].out[k] */
        Fr_sub(_tmp_146, (ctx->circuit->constants + 24), k);
        _offset_433 = _out_sigIdx_ + Fr_toInt(_tmp_146)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_433, _sigValue_57, 1);
        _compIdx_41 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_41 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_434 = _compIdx_41 + 1*_compSizes_41[1];
        _out_sigIdx__9 = ctx->getSignalOffset(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_9 = ctx->getSignalSizes(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _offset_436 = _out_sigIdx__9 + Fr_toInt(k)*_sigSizes_out_9[1];
        ctx->multiGetSignal(__cIdx, _offset_434, _offset_436, _sigValue_58, 1);
        ctx->checkConstraint(__cIdx, _sigValue_57, _sigValue_58, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:157:8");
        /* out[64+31-k]  === fsum[2].out[k] */
        Fr_sub(_tmp_148, (ctx->circuit->constants + 25), k);
        _offset_438 = _out_sigIdx_ + Fr_toInt(_tmp_148)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_438, _sigValue_59, 1);
        _compIdx_42 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_42 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_439 = _compIdx_42 + 2*_compSizes_42[1];
        _out_sigIdx__10 = ctx->getSignalOffset(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_10 = ctx->getSignalSizes(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _offset_441 = _out_sigIdx__10 + Fr_toInt(k)*_sigSizes_out_10[1];
        ctx->multiGetSignal(__cIdx, _offset_439, _offset_441, _sigValue_60, 1);
        ctx->checkConstraint(__cIdx, _sigValue_59, _sigValue_60, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:158:8");
        /* out[96+31-k]  === fsum[3].out[k] */
        Fr_sub(_tmp_150, (ctx->circuit->constants + 26), k);
        _offset_443 = _out_sigIdx_ + Fr_toInt(_tmp_150)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_443, _sigValue_61, 1);
        _compIdx_43 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_43 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_444 = _compIdx_43 + 3*_compSizes_43[1];
        _out_sigIdx__11 = ctx->getSignalOffset(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_11 = ctx->getSignalSizes(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _offset_446 = _out_sigIdx__11 + Fr_toInt(k)*_sigSizes_out_11[1];
        ctx->multiGetSignal(__cIdx, _offset_444, _offset_446, _sigValue_62, 1);
        ctx->checkConstraint(__cIdx, _sigValue_61, _sigValue_62, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:159:8");
        /* out[128+31-k] === fsum[4].out[k] */
        Fr_sub(_tmp_152, (ctx->circuit->constants + 10), k);
        _offset_448 = _out_sigIdx_ + Fr_toInt(_tmp_152)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_448, _sigValue_63, 1);
        _compIdx_44 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_44 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_449 = _compIdx_44 + 4*_compSizes_44[1];
        _out_sigIdx__12 = ctx->getSignalOffset(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_12 = ctx->getSignalSizes(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _offset_451 = _out_sigIdx__12 + Fr_toInt(k)*_sigSizes_out_12[1];
        ctx->multiGetSignal(__cIdx, _offset_449, _offset_451, _sigValue_64, 1);
        ctx->checkConstraint(__cIdx, _sigValue_63, _sigValue_64, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:160:8");
        /* out[160+31-k] === fsum[5].out[k] */
        Fr_sub(_tmp_154, (ctx->circuit->constants + 27), k);
        _offset_453 = _out_sigIdx_ + Fr_toInt(_tmp_154)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_453, _sigValue_65, 1);
        _compIdx_45 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_45 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_454 = _compIdx_45 + 5*_compSizes_45[1];
        _out_sigIdx__13 = ctx->getSignalOffset(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_13 = ctx->getSignalSizes(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _offset_456 = _out_sigIdx__13 + Fr_toInt(k)*_sigSizes_out_13[1];
        ctx->multiGetSignal(__cIdx, _offset_454, _offset_456, _sigValue_66, 1);
        ctx->checkConstraint(__cIdx, _sigValue_65, _sigValue_66, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:161:8");
        /* out[192+31-k] === fsum[6].out[k] */
        Fr_sub(_tmp_156, (ctx->circuit->constants + 28), k);
        _offset_458 = _out_sigIdx_ + Fr_toInt(_tmp_156)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_458, _sigValue_67, 1);
        _compIdx_46 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_46 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_459 = _compIdx_46 + 6*_compSizes_46[1];
        _out_sigIdx__14 = ctx->getSignalOffset(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_14 = ctx->getSignalSizes(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _offset_461 = _out_sigIdx__14 + Fr_toInt(k)*_sigSizes_out_14[1];
        ctx->multiGetSignal(__cIdx, _offset_459, _offset_461, _sigValue_68, 1);
        ctx->checkConstraint(__cIdx, _sigValue_67, _sigValue_68, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:162:8");
        /* out[224+31-k] === fsum[7].out[k] */
        Fr_sub(_tmp_158, (ctx->circuit->constants + 12), k);
        _offset_463 = _out_sigIdx_ + Fr_toInt(_tmp_158)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_463, _sigValue_69, 1);
        _compIdx_47 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_47 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_464 = _compIdx_47 + 7*_compSizes_47[1];
        _out_sigIdx__15 = ctx->getSignalOffset(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_15 = ctx->getSignalSizes(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _offset_466 = _out_sigIdx__15 + Fr_toInt(k)*_sigSizes_out_15[1];
        ctx->multiGetSignal(__cIdx, _offset_464, _offset_466, _sigValue_70, 1);
        ctx->checkConstraint(__cIdx, _sigValue_69, _sigValue_70, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:163:8");
        Fr_copyn(_tmp_160, k, 1);
        Fr_add(_tmp_159, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_159, 1);
        Fr_lt(_tmp_161, k, (ctx->circuit->constants + 9));
        _loopCond_19 = _tmp_161;
    }
    ctx->finished(__cIdx);
}
/*
Sha256compression
inp[416]=1
inp[417]=0
inp[418]=0
inp[419]=0
inp[420]=0
inp[421]=0
inp[422]=0
inp[423]=0
inp[424]=0
inp[425]=0
inp[426]=0
inp[427]=0
inp[428]=0
inp[429]=0
inp[430]=0
inp[431]=0
inp[432]=0
inp[433]=0
inp[434]=0
inp[435]=0
inp[436]=0
inp[437]=0
inp[438]=0
inp[439]=0
inp[440]=0
inp[441]=0
inp[442]=0
inp[443]=0
inp[444]=0
inp[445]=0
inp[446]=0
inp[447]=0
inp[448]=0
inp[449]=0
inp[450]=0
inp[451]=0
inp[452]=0
inp[453]=0
inp[454]=0
inp[455]=0
inp[456]=0
inp[457]=0
inp[458]=0
inp[459]=0
inp[460]=0
inp[461]=0
inp[462]=0
inp[463]=0
inp[464]=0
inp[465]=0
inp[466]=0
inp[467]=0
inp[468]=0
inp[469]=0
inp[470]=0
inp[471]=0
inp[472]=0
inp[473]=0
inp[474]=0
inp[475]=0
inp[476]=0
inp[477]=0
inp[478]=0
inp[479]=0
inp[480]=0
inp[481]=0
inp[482]=0
inp[483]=0
inp[484]=0
inp[485]=0
inp[486]=0
inp[487]=0
inp[488]=0
inp[489]=0
inp[490]=0
inp[491]=0
inp[492]=0
inp[493]=0
inp[494]=0
inp[495]=0
inp[496]=0
inp[497]=0
inp[498]=0
inp[499]=0
inp[500]=0
inp[501]=1
inp[502]=0
inp[503]=1
inp[504]=1
inp[505]=0
inp[506]=1
inp[507]=0
inp[508]=0
inp[509]=0
inp[510]=0
inp[511]=0
*/
void Sha256compression_bfab0304ba8448a7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[256];
    FrElement _sigValue_1[512];
    FrElement _retsha256compression[256];
    FrElement outCalc[256];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_26[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_29[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _num_32[1];
    FrElement _tmp_15[1];
    FrElement _tmp_17[1];
    FrElement _tmp_16[1];
    FrElement _tmp_18[1];
    FrElement _num_35[1];
    FrElement _tmp_19[1];
    FrElement _tmp_21[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _num_38[1];
    FrElement _tmp_23[1];
    FrElement _tmp_25[1];
    FrElement _tmp_24[1];
    FrElement _tmp_26[1];
    FrElement _num_41[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    FrElement _num_44[1];
    FrElement _tmp_31[1];
    FrElement _tmp_33[1];
    FrElement _tmp_32[1];
    FrElement _tmp_34[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_43[1];
    FrElement k[1];
    FrElement _tmp_46[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_48[1];
    FrElement _tmp_47[1];
    FrElement _tmp_49[1];
    FrElement _tmp_52[1];
    FrElement t[1];
    FrElement _tmp_53[1];
    FrElement _num_60[1];
    FrElement _tmp_54[1];
    FrElement _tmp_55[1];
    FrElement _tmp_56[1];
    FrElement _tmp_57[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_59[1];
    FrElement _tmp_58[1];
    FrElement _tmp_60[1];
    FrElement _num_65[1];
    FrElement _tmp_61[1];
    FrElement _tmp_62[1];
    FrElement _tmp_63[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_64[1];
    FrElement _tmp_65[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_66[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_68[1];
    FrElement _tmp_69[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_71[1];
    FrElement _tmp_70[1];
    FrElement _tmp_72[1];
    FrElement _num_76[1];
    FrElement _tmp_73[1];
    FrElement _tmp_74[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_76[1];
    FrElement _tmp_75[1];
    FrElement _tmp_77[1];
    FrElement _tmp_79[1];
    FrElement _tmp_78[1];
    FrElement _tmp_80[1];
    FrElement _num_81[1];
    FrElement _tmp_81[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_83[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_85[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_87[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_89[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_91[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_93[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_95[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_97[1];
    FrElement _tmp_96[1];
    FrElement _tmp_98[1];
    FrElement _num_106[1];
    FrElement _tmp_99[1];
    FrElement _num_108[1];
    FrElement _tmp_100[1];
    FrElement _sigValue_18[1];
    FrElement _sigValue_19[1];
    FrElement _sigValue_20[1];
    FrElement _sigValue_21[1];
    FrElement _sigValue_22[1];
    FrElement _sigValue_23[1];
    FrElement _sigValue_24[1];
    FrElement _sigValue_25[1];
    FrElement _sigValue_26[1];
    FrElement _tmp_102[1];
    FrElement _tmp_101[1];
    FrElement _tmp_103[1];
    FrElement _num_111[1];
    FrElement _tmp_104[1];
    FrElement _sigValue_27[1];
    FrElement _sigValue_28[1];
    FrElement _sigValue_29[1];
    FrElement _sigValue_30[1];
    FrElement _tmp_106[1];
    FrElement _tmp_105[1];
    FrElement _tmp_107[1];
    FrElement _num_118[1];
    FrElement _tmp_108[1];
    FrElement _sigValue_31[1];
    FrElement _tmp_109[1];
    FrElement _sigValue_32[1];
    FrElement _tmp_110[1];
    FrElement _sigValue_33[1];
    FrElement _tmp_111[1];
    FrElement _sigValue_34[1];
    FrElement _tmp_112[1];
    FrElement _sigValue_35[1];
    FrElement _tmp_113[1];
    FrElement _sigValue_36[1];
    FrElement _tmp_114[1];
    FrElement _sigValue_37[1];
    FrElement _tmp_115[1];
    FrElement _sigValue_38[1];
    FrElement _tmp_116[1];
    FrElement _tmp_118[1];
    FrElement _tmp_117[1];
    FrElement _tmp_119[1];
    FrElement _tmp_121[1];
    FrElement _tmp_120[1];
    FrElement _tmp_122[1];
    FrElement _num_130[1];
    FrElement _tmp_123[1];
    FrElement _tmp_125[1];
    FrElement _sigValue_39[1];
    FrElement _sigValue_40[1];
    FrElement _tmp_127[1];
    FrElement _sigValue_41[1];
    FrElement _sigValue_42[1];
    FrElement _tmp_129[1];
    FrElement _sigValue_43[1];
    FrElement _sigValue_44[1];
    FrElement _tmp_131[1];
    FrElement _sigValue_45[1];
    FrElement _sigValue_46[1];
    FrElement _tmp_133[1];
    FrElement _sigValue_47[1];
    FrElement _sigValue_48[1];
    FrElement _tmp_135[1];
    FrElement _sigValue_49[1];
    FrElement _sigValue_50[1];
    FrElement _tmp_137[1];
    FrElement _sigValue_51[1];
    FrElement _sigValue_52[1];
    FrElement _tmp_139[1];
    FrElement _sigValue_53[1];
    FrElement _sigValue_54[1];
    FrElement _tmp_141[1];
    FrElement _tmp_140[1];
    FrElement _tmp_142[1];
    FrElement _num_189[1];
    FrElement _tmp_143[1];
    FrElement _tmp_144[1];
    FrElement _sigValue_55[1];
    FrElement _sigValue_56[1];
    FrElement _tmp_146[1];
    FrElement _sigValue_57[1];
    FrElement _sigValue_58[1];
    FrElement _tmp_148[1];
    FrElement _sigValue_59[1];
    FrElement _sigValue_60[1];
    FrElement _tmp_150[1];
    FrElement _sigValue_61[1];
    FrElement _sigValue_62[1];
    FrElement _tmp_152[1];
    FrElement _sigValue_63[1];
    FrElement _sigValue_64[1];
    FrElement _tmp_154[1];
    FrElement _sigValue_65[1];
    FrElement _sigValue_66[1];
    FrElement _tmp_156[1];
    FrElement _sigValue_67[1];
    FrElement _sigValue_68[1];
    FrElement _tmp_158[1];
    FrElement _sigValue_69[1];
    FrElement _sigValue_70[1];
    FrElement _tmp_160[1];
    FrElement _tmp_159[1];
    FrElement _tmp_161[1];
    int _hin_sigIdx_;
    int _inp_sigIdx_;
    int _out_sigIdx_;
    int _offset_6;
    int _offset_11;
    int _offset_13;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_62;
    int _offset_68;
    int _offset_71;
    int _offset_83;
    int _offset_86;
    int _compIdx;
    int _offset_93;
    int _in2_sigIdx_;
    int _offset_95;
    int _offset_98;
    int _compIdx_1;
    int _offset_100;
    int _in7_sigIdx_;
    int _offset_102;
    int _offset_105;
    int _compIdx_2;
    int _offset_107;
    int _in15_sigIdx_;
    int _offset_109;
    int _offset_112;
    int _compIdx_3;
    int _offset_114;
    int _in16_sigIdx_;
    int _offset_116;
    int _offset_119;
    int _compIdx_4;
    int _offset_126;
    int _out_sigIdx__1;
    int _offset_128;
    int _offset_131;
    int _offset_141;
    int _a_sigIdx_;
    int _offset_143;
    int _offset_145;
    int _b_sigIdx_;
    int _offset_147;
    int _offset_149;
    int _c_sigIdx_;
    int _offset_151;
    int _offset_153;
    int _d_sigIdx_;
    int _offset_155;
    int _offset_157;
    int _e_sigIdx_;
    int _offset_159;
    int _offset_161;
    int _f_sigIdx_;
    int _offset_163;
    int _offset_165;
    int _g_sigIdx_;
    int _offset_167;
    int _offset_169;
    int _h_sigIdx_;
    int _offset_171;
    int _compIdx_5;
    int _offset_180;
    int _h_sigIdx__1;
    int _offset_182;
    int _offset_185;
    int _compIdx_6;
    int _offset_187;
    int _e_sigIdx__1;
    int _offset_189;
    int _offset_192;
    int _compIdx_7;
    int _offset_194;
    int _f_sigIdx__1;
    int _offset_196;
    int _offset_199;
    int _compIdx_8;
    int _offset_201;
    int _g_sigIdx__1;
    int _offset_203;
    int _offset_206;
    int _compIdx_9;
    int _offset_208;
    int _k_sigIdx_;
    int _offset_210;
    int _compIdx_10;
    int _offset_212;
    int _out_sigIdx__2;
    int _offset_214;
    int _compIdx_11;
    int _offset_216;
    int _w_sigIdx__1;
    int _offset_218;
    int _offset_221;
    int _compIdx_12;
    int _offset_223;
    int _a_sigIdx__1;
    int _offset_225;
    int _offset_228;
    int _compIdx_13;
    int _offset_230;
    int _b_sigIdx__1;
    int _offset_232;
    int _offset_235;
    int _compIdx_14;
    int _offset_237;
    int _c_sigIdx__1;
    int _offset_239;
    int _offset_242;
    int _compIdx_15;
    int _offset_249;
    int _in_sigIdx_;
    int _offset_251;
    int _offset_254;
    int _compIdx_16;
    int _offset_256;
    int _in_sigIdx__1;
    int _offset_258;
    int _compIdx_17;
    int _offset_260;
    int _out_sigIdx__3;
    int _offset_262;
    int _compIdx_18;
    int _offset_264;
    int _in_sigIdx__2;
    int _offset_266;
    int _compIdx_19;
    int _offset_268;
    int _out_sigIdx__4;
    int _offset_270;
    int _compIdx_20;
    int _offset_272;
    int _in_sigIdx__3;
    int _offset_274;
    int _compIdx_21;
    int _offset_276;
    int _out_sigIdx__5;
    int _offset_278;
    int _offset_286;
    int _offset_289;
    int _offset_292;
    int _offset_295;
    int _offset_298;
    int _offset_301;
    int _compIdx_22;
    int _offset_303;
    int _out_sigIdx__6;
    int _offset_305;
    int _offset_308;
    int _offset_311;
    int _offset_314;
    int _offset_317;
    int _offset_320;
    int _offset_323;
    int _offset_326;
    int _compIdx_23;
    int _offset_328;
    int _out_sigIdx__7;
    int _offset_330;
    int _offset_333;
    int _compIdx_24;
    int _offset_342;
    int _in_sigIdx__4;
    int _offset_344;
    int _offset_346;
    int _compIdx_25;
    int _offset_347;
    int _in_sigIdx__5;
    int _offset_349;
    int _offset_351;
    int _compIdx_26;
    int _offset_352;
    int _in_sigIdx__6;
    int _offset_354;
    int _offset_356;
    int _compIdx_27;
    int _offset_357;
    int _in_sigIdx__7;
    int _offset_359;
    int _offset_361;
    int _compIdx_28;
    int _offset_362;
    int _in_sigIdx__8;
    int _offset_364;
    int _offset_366;
    int _compIdx_29;
    int _offset_367;
    int _in_sigIdx__9;
    int _offset_369;
    int _offset_371;
    int _compIdx_30;
    int _offset_372;
    int _in_sigIdx__10;
    int _offset_374;
    int _offset_376;
    int _compIdx_31;
    int _offset_377;
    int _in_sigIdx__11;
    int _offset_379;
    int _offset_381;
    int _compIdx_32;
    int _offset_382;
    int _in_sigIdx__12;
    int _offset_384;
    int _offset_386;
    int _compIdx_33;
    int _offset_387;
    int _in_sigIdx__13;
    int _offset_389;
    int _offset_391;
    int _compIdx_34;
    int _offset_392;
    int _in_sigIdx__14;
    int _offset_394;
    int _offset_396;
    int _compIdx_35;
    int _offset_397;
    int _in_sigIdx__15;
    int _offset_399;
    int _offset_401;
    int _compIdx_36;
    int _offset_402;
    int _in_sigIdx__16;
    int _offset_404;
    int _offset_406;
    int _compIdx_37;
    int _offset_407;
    int _in_sigIdx__17;
    int _offset_409;
    int _offset_411;
    int _compIdx_38;
    int _offset_412;
    int _in_sigIdx__18;
    int _offset_414;
    int _offset_416;
    int _compIdx_39;
    int _offset_417;
    int _in_sigIdx__19;
    int _offset_419;
    int _offset_421;
    int _offset_428;
    int _compIdx_40;
    int _offset_429;
    int _out_sigIdx__8;
    int _offset_431;
    int _offset_433;
    int _compIdx_41;
    int _offset_434;
    int _out_sigIdx__9;
    int _offset_436;
    int _offset_438;
    int _compIdx_42;
    int _offset_439;
    int _out_sigIdx__10;
    int _offset_441;
    int _offset_443;
    int _compIdx_43;
    int _offset_444;
    int _out_sigIdx__11;
    int _offset_446;
    int _offset_448;
    int _compIdx_44;
    int _offset_449;
    int _out_sigIdx__12;
    int _offset_451;
    int _offset_453;
    int _compIdx_45;
    int _offset_454;
    int _out_sigIdx__13;
    int _offset_456;
    int _offset_458;
    int _compIdx_46;
    int _offset_459;
    int _out_sigIdx__14;
    int _offset_461;
    int _offset_463;
    int _compIdx_47;
    int _offset_464;
    int _out_sigIdx__15;
    int _offset_466;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_inp;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in2;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in7;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_in15;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _sigSizes_in16;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_hin;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_d;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_h_1;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_e_1;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_f_1;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_g_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_w_1;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _sigSizes_out_6;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_out_7;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _compSizes_26;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _compSizes_27;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _compSizes_28;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _compSizes_29;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _compSizes_30;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _compSizes_31;
    Circom_Sizes _sigSizes_in_11;
    Circom_Sizes _compSizes_32;
    Circom_Sizes _sigSizes_in_12;
    Circom_Sizes _compSizes_33;
    Circom_Sizes _sigSizes_in_13;
    Circom_Sizes _compSizes_34;
    Circom_Sizes _sigSizes_in_14;
    Circom_Sizes _compSizes_35;
    Circom_Sizes _sigSizes_in_15;
    Circom_Sizes _compSizes_36;
    Circom_Sizes _sigSizes_in_16;
    Circom_Sizes _compSizes_37;
    Circom_Sizes _sigSizes_in_17;
    Circom_Sizes _compSizes_38;
    Circom_Sizes _sigSizes_in_18;
    Circom_Sizes _compSizes_39;
    Circom_Sizes _sigSizes_in_19;
    Circom_Sizes _compSizes_40;
    Circom_Sizes _sigSizes_out_8;
    Circom_Sizes _compSizes_41;
    Circom_Sizes _sigSizes_out_9;
    Circom_Sizes _compSizes_42;
    Circom_Sizes _sigSizes_out_10;
    Circom_Sizes _compSizes_43;
    Circom_Sizes _sigSizes_out_11;
    Circom_Sizes _compSizes_44;
    Circom_Sizes _sigSizes_out_12;
    Circom_Sizes _compSizes_45;
    Circom_Sizes _sigSizes_out_13;
    Circom_Sizes _compSizes_46;
    Circom_Sizes _sigSizes_out_14;
    Circom_Sizes _compSizes_47;
    Circom_Sizes _sigSizes_out_15;
    PFrElement _v_2;
    PFrElement _loopCond;
    PFrElement _v_6;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    PFrElement _loopCond_6;
    PFrElement _loopCond_7;
    PFrElement _loopCond_8;
    PFrElement _loopCond_9;
    PFrElement _loopCond_10;
    PFrElement _loopCond_11;
    PFrElement _loopCond_12;
    PFrElement _loopCond_13;
    PFrElement _loopCond_14;
    PFrElement _loopCond_15;
    PFrElement _loopCond_16;
    PFrElement _loopCond_17;
    PFrElement _loopCond_18;
    PFrElement _loopCond_19;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_26[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_29[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_32[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_35[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_38[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_41[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_44[0]), ctx->circuit->constants +0);
    Fr_copy(&(_tmp_43[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_52[0]), ctx->circuit->constants +1);
    Fr_copy(&(t[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_60[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_65[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_76[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_81[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_106[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_108[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_111[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_118[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_130[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_189[0]), ctx->circuit->constants +0);
    _hin_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x33732e1930068adcLL /* hin */);
    _inp_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _d_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_inp = ctx->getSignalSizes(__cIdx, 0x2ba003192bd4cf0aLL /* inp */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_hin = ctx->getSignalSizes(__cIdx, 0x33732e1930068adcLL /* hin */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_d = ctx->getSignalSizes(__cIdx, 0xaf63d94c8601e773LL /* d */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    /* signal input hin[256] */
    /* signal input inp[512] */
    /* signal output out[256] */
    /* signal a[65][32] */
    /* signal b[65][32] */
    /* signal c[65][32] */
    /* signal d[65][32] */
    /* signal e[65][32] */
    /* signal f[65][32] */
    /* signal g[65][32] */
    /* signal h[65][32] */
    /* signal w[64][32] */
    /* var outCalc[256] = sha256compression(hin, inp) */
    ctx->multiGetSignal(__cIdx, __cIdx, _hin_sigIdx_, _sigValue, 256);
    ctx->multiGetSignal(__cIdx, __cIdx, _inp_sigIdx_, _sigValue_1, 512);
    sha256compression_ed3059d4e7ba1c14(ctx, _retsha256compression, _sigValue,_sigValue_1);
    Fr_copyn(outCalc, _retsha256compression, 256);
    /* var i */
    /* for (i=0;i<256;i++) */
    /* out[i] <-- outCalc[i] */
    _v_2 = outCalc;
    _offset_6 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_6, _v_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- outCalc[i] */
        _offset_11 = Fr_toInt(i);
        _v_6 = outCalc + _offset_11;
        _offset_13 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_13, _v_6);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 13));
        _loopCond = _tmp_6;
    }
    /* component sigmaPlus[48] */
    /* for (i=0;i<48;i++) */
    Fr_copyn(i, _num_26, 1);
    Fr_lt(_tmp_7, i, (ctx->circuit->constants + 118));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sigmaPlus[i] = SigmaPlus() */
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 118));
        _loopCond_1 = _tmp_10;
    }
    /* component ct_k[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_29, 1);
    Fr_lt(_tmp_11, i, (ctx->circuit->constants + 17));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* ct_k[i] = K(i) */
        Fr_copyn(_tmp_13, i, 1);
        Fr_add(_tmp_12, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_12, 1);
        Fr_lt(_tmp_14, i, (ctx->circuit->constants + 17));
        _loopCond_2 = _tmp_14;
    }
    /* component t1[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_32, 1);
    Fr_lt(_tmp_15, i, (ctx->circuit->constants + 17));
    _loopCond_3 = _tmp_15;
    while (Fr_isTrue(_loopCond_3)) {
        /* t1[i] = T1() */
        Fr_copyn(_tmp_17, i, 1);
        Fr_add(_tmp_16, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_16, 1);
        Fr_lt(_tmp_18, i, (ctx->circuit->constants + 17));
        _loopCond_3 = _tmp_18;
    }
    /* component t2[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_35, 1);
    Fr_lt(_tmp_19, i, (ctx->circuit->constants + 17));
    _loopCond_4 = _tmp_19;
    while (Fr_isTrue(_loopCond_4)) {
        /* t2[i] = T2() */
        Fr_copyn(_tmp_21, i, 1);
        Fr_add(_tmp_20, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_20, 1);
        Fr_lt(_tmp_22, i, (ctx->circuit->constants + 17));
        _loopCond_4 = _tmp_22;
    }
    /* component suma[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_38, 1);
    Fr_lt(_tmp_23, i, (ctx->circuit->constants + 17));
    _loopCond_5 = _tmp_23;
    while (Fr_isTrue(_loopCond_5)) {
        /* suma[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_25, i, 1);
        Fr_add(_tmp_24, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_24, 1);
        Fr_lt(_tmp_26, i, (ctx->circuit->constants + 17));
        _loopCond_5 = _tmp_26;
    }
    /* component sume[64] */
    /* for (i=0;i<64;i++) */
    Fr_copyn(i, _num_41, 1);
    Fr_lt(_tmp_27, i, (ctx->circuit->constants + 17));
    _loopCond_6 = _tmp_27;
    while (Fr_isTrue(_loopCond_6)) {
        /* sume[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_29, i, 1);
        Fr_add(_tmp_28, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_28, 1);
        Fr_lt(_tmp_30, i, (ctx->circuit->constants + 17));
        _loopCond_6 = _tmp_30;
    }
    /* component fsum[8] */
    /* for (i=0;i<8;i++) */
    Fr_copyn(i, _num_44, 1);
    Fr_lt(_tmp_31, i, (ctx->circuit->constants + 37));
    _loopCond_7 = _tmp_31;
    while (Fr_isTrue(_loopCond_7)) {
        /* fsum[i] = BinSum(32, 2) */
        Fr_copyn(_tmp_33, i, 1);
        Fr_add(_tmp_32, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_32, 1);
        Fr_lt(_tmp_34, i, (ctx->circuit->constants + 37));
        _loopCond_7 = _tmp_34;
    }
    /* var k */
    /* var t */
    /* for (t=0;t<64;t++) */
    /* if (t<16) */
    /* for (k=0;k<32;k++) */
    /* w[t][k] <== inp[t*32+31-k] */
    _offset_59 = _inp_sigIdx_ + 31*_sigSizes_inp[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_59, _sigValue_2, 1);
    _offset_62 = _w_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_62, _sigValue_2);
    _loopCond_8 = _tmp_43;
    while (Fr_isTrue(_loopCond_8)) {
        /* w[t][k] <== inp[t*32+31-k] */
        Fr_sub(_tmp_46, (ctx->circuit->constants + 8), k);
        _offset_68 = _inp_sigIdx_ + Fr_toInt(_tmp_46)*_sigSizes_inp[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_68, _sigValue_3, 1);
        _offset_71 = _w_sigIdx_ + Fr_toInt(k)*_sigSizes_w[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_71, _sigValue_3);
        Fr_copyn(_tmp_48, k, 1);
        Fr_add(_tmp_47, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_47, 1);
        Fr_lt(_tmp_49, k, (ctx->circuit->constants + 9));
        _loopCond_8 = _tmp_49;
    }
    _loopCond_9 = _tmp_52;
    while (Fr_isTrue(_loopCond_9)) {
        /* if (t<16) */
        Fr_lt(_tmp_53, t, (ctx->circuit->constants + 50));
        if (Fr_isTrue(_tmp_53)) {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_60, 1);
            Fr_lt(_tmp_54, k, (ctx->circuit->constants + 9));
            _loopCond_10 = _tmp_54;
            while (Fr_isTrue(_loopCond_10)) {
                /* w[t][k] <== inp[t*32+31-k] */
                Fr_mul(_tmp_55, t, (ctx->circuit->constants + 9));
                Fr_add(_tmp_56, _tmp_55, (ctx->circuit->constants + 8));
                Fr_sub(_tmp_57, _tmp_56, k);
                _offset_83 = _inp_sigIdx_ + Fr_toInt(_tmp_57)*_sigSizes_inp[1];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_83, _sigValue_4, 1);
                _offset_86 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_86, _sigValue_4);
                Fr_copyn(_tmp_59, k, 1);
                Fr_add(_tmp_58, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_58, 1);
                Fr_lt(_tmp_60, k, (ctx->circuit->constants + 9));
                _loopCond_10 = _tmp_60;
            }
        } else {
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_65, 1);
            Fr_lt(_tmp_61, k, (ctx->circuit->constants + 9));
            _loopCond_11 = _tmp_61;
            while (Fr_isTrue(_loopCond_11)) {
                /* sigmaPlus[t-16].in2[k] <== w[t-2][k] */
                _compIdx = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_62, t, (ctx->circuit->constants + 50));
                _offset_93 = _compIdx + Fr_toInt(_tmp_62)*_compSizes[1];
                _in2_sigIdx_ = ctx->getSignalOffset(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _sigSizes_in2 = ctx->getSignalSizes(_offset_93, 0x2b9fc1192bd45ee4LL /* in2 */);
                _offset_95 = _in2_sigIdx_ + Fr_toInt(k)*_sigSizes_in2[1];
                Fr_sub(_tmp_63, t, (ctx->circuit->constants + 2));
                _offset_98 = _w_sigIdx_ + Fr_toInt(_tmp_63)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_98, _sigValue_5, 1);
                ctx->setSignal(__cIdx, _offset_93, _offset_95, _sigValue_5);
                /* sigmaPlus[t-16].in7[k] <== w[t-7][k] */
                _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_64, t, (ctx->circuit->constants + 50));
                _offset_100 = _compIdx_1 + Fr_toInt(_tmp_64)*_compSizes_1[1];
                _in7_sigIdx_ = ctx->getSignalOffset(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _sigSizes_in7 = ctx->getSignalSizes(_offset_100, 0x2b9fbe192bd459cbLL /* in7 */);
                _offset_102 = _in7_sigIdx_ + Fr_toInt(k)*_sigSizes_in7[1];
                Fr_sub(_tmp_65, t, (ctx->circuit->constants + 44));
                _offset_105 = _w_sigIdx_ + Fr_toInt(_tmp_65)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_105, _sigValue_6, 1);
                ctx->setSignal(__cIdx, _offset_100, _offset_102, _sigValue_6);
                /* sigmaPlus[t-16].in15[k] <== w[t-15][k] */
                _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_66, t, (ctx->circuit->constants + 50));
                _offset_107 = _compIdx_2 + Fr_toInt(_tmp_66)*_compSizes_2[1];
                _in15_sigIdx_ = ctx->getSignalOffset(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _sigSizes_in15 = ctx->getSignalSizes(_offset_107, 0xf4ddfec579e58cd8LL /* in15 */);
                _offset_109 = _in15_sigIdx_ + Fr_toInt(k)*_sigSizes_in15[1];
                Fr_sub(_tmp_67, t, (ctx->circuit->constants + 52));
                _offset_112 = _w_sigIdx_ + Fr_toInt(_tmp_67)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_112, _sigValue_7, 1);
                ctx->setSignal(__cIdx, _offset_107, _offset_109, _sigValue_7);
                /* sigmaPlus[t-16].in16[k] <== w[t-16][k] */
                _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_68, t, (ctx->circuit->constants + 50));
                _offset_114 = _compIdx_3 + Fr_toInt(_tmp_68)*_compSizes_3[1];
                _in16_sigIdx_ = ctx->getSignalOffset(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _sigSizes_in16 = ctx->getSignalSizes(_offset_114, 0xf4de01c579e591f1LL /* in16 */);
                _offset_116 = _in16_sigIdx_ + Fr_toInt(k)*_sigSizes_in16[1];
                Fr_sub(_tmp_69, t, (ctx->circuit->constants + 50));
                _offset_119 = _w_sigIdx_ + Fr_toInt(_tmp_69)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->multiGetSignal(__cIdx, __cIdx, _offset_119, _sigValue_8, 1);
                ctx->setSignal(__cIdx, _offset_114, _offset_116, _sigValue_8);
                Fr_copyn(_tmp_71, k, 1);
                Fr_add(_tmp_70, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_70, 1);
                Fr_lt(_tmp_72, k, (ctx->circuit->constants + 9));
                _loopCond_11 = _tmp_72;
            }
            /* for (k=0;k<32;k++) */
            Fr_copyn(k, _num_76, 1);
            Fr_lt(_tmp_73, k, (ctx->circuit->constants + 9));
            _loopCond_12 = _tmp_73;
            while (Fr_isTrue(_loopCond_12)) {
                /* w[t][k] <== sigmaPlus[t-16].out[k] */
                _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x7380a86066910094LL /* sigmaPlus */);
                Fr_sub(_tmp_74, t, (ctx->circuit->constants + 50));
                _offset_126 = _compIdx_4 + Fr_toInt(_tmp_74)*_compSizes_4[1];
                _out_sigIdx__1 = ctx->getSignalOffset(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_1 = ctx->getSignalSizes(_offset_126, 0x19f79b1921bbcfffLL /* out */);
                _offset_128 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
                ctx->multiGetSignal(__cIdx, _offset_126, _offset_128, _sigValue_9, 1);
                _offset_131 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
                ctx->setSignal(__cIdx, __cIdx, _offset_131, _sigValue_9);
                Fr_copyn(_tmp_76, k, 1);
                Fr_add(_tmp_75, k, (ctx->circuit->constants + 1));
                Fr_copyn(k, _tmp_75, 1);
                Fr_lt(_tmp_77, k, (ctx->circuit->constants + 9));
                _loopCond_12 = _tmp_77;
            }
        }
        Fr_copyn(_tmp_79, t, 1);
        Fr_add(_tmp_78, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_78, 1);
        Fr_lt(_tmp_80, t, (ctx->circuit->constants + 17));
        _loopCond_9 = _tmp_80;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_81, 1);
    Fr_lt(_tmp_81, k, (ctx->circuit->constants + 9));
    _loopCond_13 = _tmp_81;
    while (Fr_isTrue(_loopCond_13)) {
        /* a[0][k] <== hin[k] */
        _offset_141 = _hin_sigIdx_ + Fr_toInt(k)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_141, _sigValue_10, 1);
        _offset_143 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_143, _sigValue_10);
        /* b[0][k] <== hin[32*1 + k] */
        Fr_add(_tmp_83, (ctx->circuit->constants + 9), k);
        _offset_145 = _hin_sigIdx_ + Fr_toInt(_tmp_83)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_145, _sigValue_11, 1);
        _offset_147 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_147, _sigValue_11);
        /* c[0][k] <== hin[32*2 + k] */
        Fr_add(_tmp_85, (ctx->circuit->constants + 17), k);
        _offset_149 = _hin_sigIdx_ + Fr_toInt(_tmp_85)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_149, _sigValue_12, 1);
        _offset_151 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_151, _sigValue_12);
        /* d[0][k] <== hin[32*3 + k] */
        Fr_add(_tmp_87, (ctx->circuit->constants + 19), k);
        _offset_153 = _hin_sigIdx_ + Fr_toInt(_tmp_87)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_153, _sigValue_13, 1);
        _offset_155 = _d_sigIdx_ + Fr_toInt(k)*_sigSizes_d[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_155, _sigValue_13);
        /* e[0][k] <== hin[32*4 + k] */
        Fr_add(_tmp_89, (ctx->circuit->constants + 20), k);
        _offset_157 = _hin_sigIdx_ + Fr_toInt(_tmp_89)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_157, _sigValue_14, 1);
        _offset_159 = _e_sigIdx_ + Fr_toInt(k)*_sigSizes_e[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_159, _sigValue_14);
        /* f[0][k] <== hin[32*5 + k] */
        Fr_add(_tmp_91, (ctx->circuit->constants + 11), k);
        _offset_161 = _hin_sigIdx_ + Fr_toInt(_tmp_91)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_161, _sigValue_15, 1);
        _offset_163 = _f_sigIdx_ + Fr_toInt(k)*_sigSizes_f[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_163, _sigValue_15);
        /* g[0][k] <== hin[32*6 + k] */
        Fr_add(_tmp_93, (ctx->circuit->constants + 21), k);
        _offset_165 = _hin_sigIdx_ + Fr_toInt(_tmp_93)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_165, _sigValue_16, 1);
        _offset_167 = _g_sigIdx_ + Fr_toInt(k)*_sigSizes_g[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_167, _sigValue_16);
        /* h[0][k] <== hin[32*7 + k] */
        Fr_add(_tmp_95, (ctx->circuit->constants + 22), k);
        _offset_169 = _hin_sigIdx_ + Fr_toInt(_tmp_95)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_169, _sigValue_17, 1);
        _offset_171 = _h_sigIdx_ + Fr_toInt(k)*_sigSizes_h[2];
        ctx->setSignal(__cIdx, __cIdx, _offset_171, _sigValue_17);
        Fr_copyn(_tmp_97, k, 1);
        Fr_add(_tmp_96, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_96, 1);
        Fr_lt(_tmp_98, k, (ctx->circuit->constants + 9));
        _loopCond_13 = _tmp_98;
    }
    /* for (t = 0;t<64;t++) */
    Fr_copyn(t, _num_106, 1);
    Fr_lt(_tmp_99, t, (ctx->circuit->constants + 17));
    _loopCond_14 = _tmp_99;
    while (Fr_isTrue(_loopCond_14)) {
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_108, 1);
        Fr_lt(_tmp_100, k, (ctx->circuit->constants + 9));
        _loopCond_15 = _tmp_100;
        while (Fr_isTrue(_loopCond_15)) {
            /* t1[t].h[k] <== h[t][k] */
            _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_180 = _compIdx_5 + Fr_toInt(t)*_compSizes_5[1];
            _h_sigIdx__1 = ctx->getSignalOffset(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _sigSizes_h_1 = ctx->getSignalSizes(_offset_180, 0xaf63e54c8601fbd7LL /* h */);
            _offset_182 = _h_sigIdx__1 + Fr_toInt(k)*_sigSizes_h_1[1];
            _offset_185 = _h_sigIdx_ + Fr_toInt(t)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_185, _sigValue_18, 1);
            ctx->setSignal(__cIdx, _offset_180, _offset_182, _sigValue_18);
            /* t1[t].e[k] <== e[t][k] */
            _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_187 = _compIdx_6 + Fr_toInt(t)*_compSizes_6[1];
            _e_sigIdx__1 = ctx->getSignalOffset(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _sigSizes_e_1 = ctx->getSignalSizes(_offset_187, 0xaf63d84c8601e5c0LL /* e */);
            _offset_189 = _e_sigIdx__1 + Fr_toInt(k)*_sigSizes_e_1[1];
            _offset_192 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_192, _sigValue_19, 1);
            ctx->setSignal(__cIdx, _offset_187, _offset_189, _sigValue_19);
            /* t1[t].f[k] <== f[t][k] */
            _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_194 = _compIdx_7 + Fr_toInt(t)*_compSizes_7[1];
            _f_sigIdx__1 = ctx->getSignalOffset(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _sigSizes_f_1 = ctx->getSignalSizes(_offset_194, 0xaf63db4c8601ead9LL /* f */);
            _offset_196 = _f_sigIdx__1 + Fr_toInt(k)*_sigSizes_f_1[1];
            _offset_199 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_199, _sigValue_20, 1);
            ctx->setSignal(__cIdx, _offset_194, _offset_196, _sigValue_20);
            /* t1[t].g[k] <== g[t][k] */
            _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_201 = _compIdx_8 + Fr_toInt(t)*_compSizes_8[1];
            _g_sigIdx__1 = ctx->getSignalOffset(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _sigSizes_g_1 = ctx->getSignalSizes(_offset_201, 0xaf63da4c8601e926LL /* g */);
            _offset_203 = _g_sigIdx__1 + Fr_toInt(k)*_sigSizes_g_1[1];
            _offset_206 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_206, _sigValue_21, 1);
            ctx->setSignal(__cIdx, _offset_201, _offset_203, _sigValue_21);
            /* t1[t].k[k] <== ct_k[t].out[k] */
            _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_208 = _compIdx_9 + Fr_toInt(t)*_compSizes_9[1];
            _k_sigIdx_ = ctx->getSignalOffset(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _sigSizes_k = ctx->getSignalSizes(_offset_208, 0xaf63e64c8601fd8aLL /* k */);
            _offset_210 = _k_sigIdx_ + Fr_toInt(k)*_sigSizes_k[1];
            _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x45be6690a9868bd4LL /* ct_k */);
            _offset_212 = _compIdx_10 + Fr_toInt(t)*_compSizes_10[1];
            _out_sigIdx__2 = ctx->getSignalOffset(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_2 = ctx->getSignalSizes(_offset_212, 0x19f79b1921bbcfffLL /* out */);
            _offset_214 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
            ctx->multiGetSignal(__cIdx, _offset_212, _offset_214, _sigValue_22, 1);
            ctx->setSignal(__cIdx, _offset_208, _offset_210, _sigValue_22);
            /* t1[t].w[k] <== w[t][k] */
            _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_216 = _compIdx_11 + Fr_toInt(t)*_compSizes_11[1];
            _w_sigIdx__1 = ctx->getSignalOffset(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _sigSizes_w_1 = ctx->getSignalSizes(_offset_216, 0xaf63ea4c86020456LL /* w */);
            _offset_218 = _w_sigIdx__1 + Fr_toInt(k)*_sigSizes_w_1[1];
            _offset_221 = _w_sigIdx_ + Fr_toInt(t)*_sigSizes_w[1] + Fr_toInt(k)*_sigSizes_w[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_221, _sigValue_23, 1);
            ctx->setSignal(__cIdx, _offset_216, _offset_218, _sigValue_23);
            /* t2[t].a[k] <== a[t][k] */
            _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_223 = _compIdx_12 + Fr_toInt(t)*_compSizes_12[1];
            _a_sigIdx__1 = ctx->getSignalOffset(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _sigSizes_a_1 = ctx->getSignalSizes(_offset_223, 0xaf63dc4c8601ec8cLL /* a */);
            _offset_225 = _a_sigIdx__1 + Fr_toInt(k)*_sigSizes_a_1[1];
            _offset_228 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_228, _sigValue_24, 1);
            ctx->setSignal(__cIdx, _offset_223, _offset_225, _sigValue_24);
            /* t2[t].b[k] <== b[t][k] */
            _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_230 = _compIdx_13 + Fr_toInt(t)*_compSizes_13[1];
            _b_sigIdx__1 = ctx->getSignalOffset(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _sigSizes_b_1 = ctx->getSignalSizes(_offset_230, 0xaf63df4c8601f1a5LL /* b */);
            _offset_232 = _b_sigIdx__1 + Fr_toInt(k)*_sigSizes_b_1[1];
            _offset_235 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_235, _sigValue_25, 1);
            ctx->setSignal(__cIdx, _offset_230, _offset_232, _sigValue_25);
            /* t2[t].c[k] <== c[t][k] */
            _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_237 = _compIdx_14 + Fr_toInt(t)*_compSizes_14[1];
            _c_sigIdx__1 = ctx->getSignalOffset(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _sigSizes_c_1 = ctx->getSignalSizes(_offset_237, 0xaf63de4c8601eff2LL /* c */);
            _offset_239 = _c_sigIdx__1 + Fr_toInt(k)*_sigSizes_c_1[1];
            _offset_242 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_242, _sigValue_26, 1);
            ctx->setSignal(__cIdx, _offset_237, _offset_239, _sigValue_26);
            Fr_copyn(_tmp_102, k, 1);
            Fr_add(_tmp_101, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_101, 1);
            Fr_lt(_tmp_103, k, (ctx->circuit->constants + 9));
            _loopCond_15 = _tmp_103;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_111, 1);
        Fr_lt(_tmp_104, k, (ctx->circuit->constants + 9));
        _loopCond_16 = _tmp_104;
        while (Fr_isTrue(_loopCond_16)) {
            /* sume[t].in[0][k] <== d[t][k] */
            _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_249 = _compIdx_15 + Fr_toInt(t)*_compSizes_15[1];
            _in_sigIdx_ = ctx->getSignalOffset(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in = ctx->getSignalSizes(_offset_249, 0x08b73807b55c4bbeLL /* in */);
            _offset_251 = _in_sigIdx_ + Fr_toInt(k)*_sigSizes_in[2];
            _offset_254 = _d_sigIdx_ + Fr_toInt(t)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_254, _sigValue_27, 1);
            ctx->setSignal(__cIdx, _offset_249, _offset_251, _sigValue_27);
            /* sume[t].in[1][k] <== t1[t].out[k] */
            _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_256 = _compIdx_16 + Fr_toInt(t)*_compSizes_16[1];
            _in_sigIdx__1 = ctx->getSignalOffset(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_1 = ctx->getSignalSizes(_offset_256, 0x08b73807b55c4bbeLL /* in */);
            _offset_258 = _in_sigIdx__1 + 1*_sigSizes_in_1[1] + Fr_toInt(k)*_sigSizes_in_1[2];
            _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_260 = _compIdx_17 + Fr_toInt(t)*_compSizes_17[1];
            _out_sigIdx__3 = ctx->getSignalOffset(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_3 = ctx->getSignalSizes(_offset_260, 0x19f79b1921bbcfffLL /* out */);
            _offset_262 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
            ctx->multiGetSignal(__cIdx, _offset_260, _offset_262, _sigValue_28, 1);
            ctx->setSignal(__cIdx, _offset_256, _offset_258, _sigValue_28);
            /* suma[t].in[0][k] <== t1[t].out[k] */
            _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_264 = _compIdx_18 + Fr_toInt(t)*_compSizes_18[1];
            _in_sigIdx__2 = ctx->getSignalOffset(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_2 = ctx->getSignalSizes(_offset_264, 0x08b73807b55c4bbeLL /* in */);
            _offset_266 = _in_sigIdx__2 + Fr_toInt(k)*_sigSizes_in_2[2];
            _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0x08c7ff07b56a5e16LL /* t1 */);
            _offset_268 = _compIdx_19 + Fr_toInt(t)*_compSizes_19[1];
            _out_sigIdx__4 = ctx->getSignalOffset(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_4 = ctx->getSignalSizes(_offset_268, 0x19f79b1921bbcfffLL /* out */);
            _offset_270 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
            ctx->multiGetSignal(__cIdx, _offset_268, _offset_270, _sigValue_29, 1);
            ctx->setSignal(__cIdx, _offset_264, _offset_266, _sigValue_29);
            /* suma[t].in[1][k] <== t2[t].out[k] */
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_272 = _compIdx_20 + Fr_toInt(t)*_compSizes_20[1];
            _in_sigIdx__3 = ctx->getSignalOffset(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_3 = ctx->getSignalSizes(_offset_272, 0x08b73807b55c4bbeLL /* in */);
            _offset_274 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(k)*_sigSizes_in_3[2];
            _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0x08c7fe07b56a5c63LL /* t2 */);
            _offset_276 = _compIdx_21 + Fr_toInt(t)*_compSizes_21[1];
            _out_sigIdx__5 = ctx->getSignalOffset(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_5 = ctx->getSignalSizes(_offset_276, 0x19f79b1921bbcfffLL /* out */);
            _offset_278 = _out_sigIdx__5 + Fr_toInt(k)*_sigSizes_out_5[1];
            ctx->multiGetSignal(__cIdx, _offset_276, _offset_278, _sigValue_30, 1);
            ctx->setSignal(__cIdx, _offset_272, _offset_274, _sigValue_30);
            Fr_copyn(_tmp_106, k, 1);
            Fr_add(_tmp_105, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_105, 1);
            Fr_lt(_tmp_107, k, (ctx->circuit->constants + 9));
            _loopCond_16 = _tmp_107;
        }
        /* for (k=0;k<32;k++) */
        Fr_copyn(k, _num_118, 1);
        Fr_lt(_tmp_108, k, (ctx->circuit->constants + 9));
        _loopCond_17 = _tmp_108;
        while (Fr_isTrue(_loopCond_17)) {
            /* h[t+1][k] <== g[t][k] */
            _offset_286 = _g_sigIdx_ + Fr_toInt(t)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_286, _sigValue_31, 1);
            Fr_add(_tmp_109, t, (ctx->circuit->constants + 1));
            _offset_289 = _h_sigIdx_ + Fr_toInt(_tmp_109)*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_289, _sigValue_31);
            /* g[t+1][k] <== f[t][k] */
            _offset_292 = _f_sigIdx_ + Fr_toInt(t)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_292, _sigValue_32, 1);
            Fr_add(_tmp_110, t, (ctx->circuit->constants + 1));
            _offset_295 = _g_sigIdx_ + Fr_toInt(_tmp_110)*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_295, _sigValue_32);
            /* f[t+1][k] <== e[t][k] */
            _offset_298 = _e_sigIdx_ + Fr_toInt(t)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_298, _sigValue_33, 1);
            Fr_add(_tmp_111, t, (ctx->circuit->constants + 1));
            _offset_301 = _f_sigIdx_ + Fr_toInt(_tmp_111)*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_301, _sigValue_33);
            /* e[t+1][k] <== sume[t].out[k] */
            _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0xb6d4721921cb6857LL /* sume */);
            _offset_303 = _compIdx_22 + Fr_toInt(t)*_compSizes_22[1];
            _out_sigIdx__6 = ctx->getSignalOffset(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_6 = ctx->getSignalSizes(_offset_303, 0x19f79b1921bbcfffLL /* out */);
            _offset_305 = _out_sigIdx__6 + Fr_toInt(k)*_sigSizes_out_6[1];
            ctx->multiGetSignal(__cIdx, _offset_303, _offset_305, _sigValue_34, 1);
            Fr_add(_tmp_112, t, (ctx->circuit->constants + 1));
            _offset_308 = _e_sigIdx_ + Fr_toInt(_tmp_112)*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_308, _sigValue_34);
            /* d[t+1][k] <== c[t][k] */
            _offset_311 = _c_sigIdx_ + Fr_toInt(t)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_311, _sigValue_35, 1);
            Fr_add(_tmp_113, t, (ctx->circuit->constants + 1));
            _offset_314 = _d_sigIdx_ + Fr_toInt(_tmp_113)*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_314, _sigValue_35);
            /* c[t+1][k] <== b[t][k] */
            _offset_317 = _b_sigIdx_ + Fr_toInt(t)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_317, _sigValue_36, 1);
            Fr_add(_tmp_114, t, (ctx->circuit->constants + 1));
            _offset_320 = _c_sigIdx_ + Fr_toInt(_tmp_114)*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_320, _sigValue_36);
            /* b[t+1][k] <== a[t][k] */
            _offset_323 = _a_sigIdx_ + Fr_toInt(t)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_323, _sigValue_37, 1);
            Fr_add(_tmp_115, t, (ctx->circuit->constants + 1));
            _offset_326 = _b_sigIdx_ + Fr_toInt(_tmp_115)*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_326, _sigValue_37);
            /* a[t+1][k] <== suma[t].out[k] */
            _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0xb6d46e1921cb618bLL /* suma */);
            _offset_328 = _compIdx_23 + Fr_toInt(t)*_compSizes_23[1];
            _out_sigIdx__7 = ctx->getSignalOffset(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_7 = ctx->getSignalSizes(_offset_328, 0x19f79b1921bbcfffLL /* out */);
            _offset_330 = _out_sigIdx__7 + Fr_toInt(k)*_sigSizes_out_7[1];
            ctx->multiGetSignal(__cIdx, _offset_328, _offset_330, _sigValue_38, 1);
            Fr_add(_tmp_116, t, (ctx->circuit->constants + 1));
            _offset_333 = _a_sigIdx_ + Fr_toInt(_tmp_116)*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
            ctx->setSignal(__cIdx, __cIdx, _offset_333, _sigValue_38);
            Fr_copyn(_tmp_118, k, 1);
            Fr_add(_tmp_117, k, (ctx->circuit->constants + 1));
            Fr_copyn(k, _tmp_117, 1);
            Fr_lt(_tmp_119, k, (ctx->circuit->constants + 9));
            _loopCond_17 = _tmp_119;
        }
        Fr_copyn(_tmp_121, t, 1);
        Fr_add(_tmp_120, t, (ctx->circuit->constants + 1));
        Fr_copyn(t, _tmp_120, 1);
        Fr_lt(_tmp_122, t, (ctx->circuit->constants + 17));
        _loopCond_14 = _tmp_122;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_130, 1);
    Fr_lt(_tmp_123, k, (ctx->circuit->constants + 9));
    _loopCond_18 = _tmp_123;
    while (Fr_isTrue(_loopCond_18)) {
        /* fsum[0].in[0][k] <==  hin[32*0+k] */
        _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_342 = _compIdx_24;
        _in_sigIdx__4 = ctx->getSignalOffset(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_offset_342, 0x08b73807b55c4bbeLL /* in */);
        _offset_344 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[2];
        Fr_add(_tmp_125, (ctx->circuit->constants + 0), k);
        _offset_346 = _hin_sigIdx_ + Fr_toInt(_tmp_125)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_346, _sigValue_39, 1);
        ctx->setSignal(__cIdx, _offset_342, _offset_344, _sigValue_39);
        /* fsum[0].in[1][k] <==  a[64][k] */
        _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_347 = _compIdx_25;
        _in_sigIdx__5 = ctx->getSignalOffset(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_offset_347, 0x08b73807b55c4bbeLL /* in */);
        _offset_349 = _in_sigIdx__5 + 1*_sigSizes_in_5[1] + Fr_toInt(k)*_sigSizes_in_5[2];
        _offset_351 = _a_sigIdx_ + 64*_sigSizes_a[1] + Fr_toInt(k)*_sigSizes_a[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_351, _sigValue_40, 1);
        ctx->setSignal(__cIdx, _offset_347, _offset_349, _sigValue_40);
        /* fsum[1].in[0][k] <==  hin[32*1+k] */
        _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_26 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_352 = _compIdx_26 + 1*_compSizes_26[1];
        _in_sigIdx__6 = ctx->getSignalOffset(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_offset_352, 0x08b73807b55c4bbeLL /* in */);
        _offset_354 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[2];
        Fr_add(_tmp_127, (ctx->circuit->constants + 9), k);
        _offset_356 = _hin_sigIdx_ + Fr_toInt(_tmp_127)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_356, _sigValue_41, 1);
        ctx->setSignal(__cIdx, _offset_352, _offset_354, _sigValue_41);
        /* fsum[1].in[1][k] <==  b[64][k] */
        _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_27 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_357 = _compIdx_27 + 1*_compSizes_27[1];
        _in_sigIdx__7 = ctx->getSignalOffset(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_7 = ctx->getSignalSizes(_offset_357, 0x08b73807b55c4bbeLL /* in */);
        _offset_359 = _in_sigIdx__7 + 1*_sigSizes_in_7[1] + Fr_toInt(k)*_sigSizes_in_7[2];
        _offset_361 = _b_sigIdx_ + 64*_sigSizes_b[1] + Fr_toInt(k)*_sigSizes_b[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_361, _sigValue_42, 1);
        ctx->setSignal(__cIdx, _offset_357, _offset_359, _sigValue_42);
        /* fsum[2].in[0][k] <==  hin[32*2+k] */
        _compIdx_28 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_28 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_362 = _compIdx_28 + 2*_compSizes_28[1];
        _in_sigIdx__8 = ctx->getSignalOffset(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_8 = ctx->getSignalSizes(_offset_362, 0x08b73807b55c4bbeLL /* in */);
        _offset_364 = _in_sigIdx__8 + Fr_toInt(k)*_sigSizes_in_8[2];
        Fr_add(_tmp_129, (ctx->circuit->constants + 17), k);
        _offset_366 = _hin_sigIdx_ + Fr_toInt(_tmp_129)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_366, _sigValue_43, 1);
        ctx->setSignal(__cIdx, _offset_362, _offset_364, _sigValue_43);
        /* fsum[2].in[1][k] <==  c[64][k] */
        _compIdx_29 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_29 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_367 = _compIdx_29 + 2*_compSizes_29[1];
        _in_sigIdx__9 = ctx->getSignalOffset(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_9 = ctx->getSignalSizes(_offset_367, 0x08b73807b55c4bbeLL /* in */);
        _offset_369 = _in_sigIdx__9 + 1*_sigSizes_in_9[1] + Fr_toInt(k)*_sigSizes_in_9[2];
        _offset_371 = _c_sigIdx_ + 64*_sigSizes_c[1] + Fr_toInt(k)*_sigSizes_c[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_371, _sigValue_44, 1);
        ctx->setSignal(__cIdx, _offset_367, _offset_369, _sigValue_44);
        /* fsum[3].in[0][k] <==  hin[32*3+k] */
        _compIdx_30 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_30 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_372 = _compIdx_30 + 3*_compSizes_30[1];
        _in_sigIdx__10 = ctx->getSignalOffset(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_10 = ctx->getSignalSizes(_offset_372, 0x08b73807b55c4bbeLL /* in */);
        _offset_374 = _in_sigIdx__10 + Fr_toInt(k)*_sigSizes_in_10[2];
        Fr_add(_tmp_131, (ctx->circuit->constants + 19), k);
        _offset_376 = _hin_sigIdx_ + Fr_toInt(_tmp_131)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_376, _sigValue_45, 1);
        ctx->setSignal(__cIdx, _offset_372, _offset_374, _sigValue_45);
        /* fsum[3].in[1][k] <==  d[64][k] */
        _compIdx_31 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_31 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_377 = _compIdx_31 + 3*_compSizes_31[1];
        _in_sigIdx__11 = ctx->getSignalOffset(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_11 = ctx->getSignalSizes(_offset_377, 0x08b73807b55c4bbeLL /* in */);
        _offset_379 = _in_sigIdx__11 + 1*_sigSizes_in_11[1] + Fr_toInt(k)*_sigSizes_in_11[2];
        _offset_381 = _d_sigIdx_ + 64*_sigSizes_d[1] + Fr_toInt(k)*_sigSizes_d[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_381, _sigValue_46, 1);
        ctx->setSignal(__cIdx, _offset_377, _offset_379, _sigValue_46);
        /* fsum[4].in[0][k] <==  hin[32*4+k] */
        _compIdx_32 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_32 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_382 = _compIdx_32 + 4*_compSizes_32[1];
        _in_sigIdx__12 = ctx->getSignalOffset(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_12 = ctx->getSignalSizes(_offset_382, 0x08b73807b55c4bbeLL /* in */);
        _offset_384 = _in_sigIdx__12 + Fr_toInt(k)*_sigSizes_in_12[2];
        Fr_add(_tmp_133, (ctx->circuit->constants + 20), k);
        _offset_386 = _hin_sigIdx_ + Fr_toInt(_tmp_133)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_386, _sigValue_47, 1);
        ctx->setSignal(__cIdx, _offset_382, _offset_384, _sigValue_47);
        /* fsum[4].in[1][k] <==  e[64][k] */
        _compIdx_33 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_33 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_387 = _compIdx_33 + 4*_compSizes_33[1];
        _in_sigIdx__13 = ctx->getSignalOffset(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_13 = ctx->getSignalSizes(_offset_387, 0x08b73807b55c4bbeLL /* in */);
        _offset_389 = _in_sigIdx__13 + 1*_sigSizes_in_13[1] + Fr_toInt(k)*_sigSizes_in_13[2];
        _offset_391 = _e_sigIdx_ + 64*_sigSizes_e[1] + Fr_toInt(k)*_sigSizes_e[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_391, _sigValue_48, 1);
        ctx->setSignal(__cIdx, _offset_387, _offset_389, _sigValue_48);
        /* fsum[5].in[0][k] <==  hin[32*5+k] */
        _compIdx_34 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_34 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_392 = _compIdx_34 + 5*_compSizes_34[1];
        _in_sigIdx__14 = ctx->getSignalOffset(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_14 = ctx->getSignalSizes(_offset_392, 0x08b73807b55c4bbeLL /* in */);
        _offset_394 = _in_sigIdx__14 + Fr_toInt(k)*_sigSizes_in_14[2];
        Fr_add(_tmp_135, (ctx->circuit->constants + 11), k);
        _offset_396 = _hin_sigIdx_ + Fr_toInt(_tmp_135)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_396, _sigValue_49, 1);
        ctx->setSignal(__cIdx, _offset_392, _offset_394, _sigValue_49);
        /* fsum[5].in[1][k] <==  f[64][k] */
        _compIdx_35 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_35 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_397 = _compIdx_35 + 5*_compSizes_35[1];
        _in_sigIdx__15 = ctx->getSignalOffset(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_15 = ctx->getSignalSizes(_offset_397, 0x08b73807b55c4bbeLL /* in */);
        _offset_399 = _in_sigIdx__15 + 1*_sigSizes_in_15[1] + Fr_toInt(k)*_sigSizes_in_15[2];
        _offset_401 = _f_sigIdx_ + 64*_sigSizes_f[1] + Fr_toInt(k)*_sigSizes_f[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_401, _sigValue_50, 1);
        ctx->setSignal(__cIdx, _offset_397, _offset_399, _sigValue_50);
        /* fsum[6].in[0][k] <==  hin[32*6+k] */
        _compIdx_36 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_36 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_402 = _compIdx_36 + 6*_compSizes_36[1];
        _in_sigIdx__16 = ctx->getSignalOffset(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_16 = ctx->getSignalSizes(_offset_402, 0x08b73807b55c4bbeLL /* in */);
        _offset_404 = _in_sigIdx__16 + Fr_toInt(k)*_sigSizes_in_16[2];
        Fr_add(_tmp_137, (ctx->circuit->constants + 21), k);
        _offset_406 = _hin_sigIdx_ + Fr_toInt(_tmp_137)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_406, _sigValue_51, 1);
        ctx->setSignal(__cIdx, _offset_402, _offset_404, _sigValue_51);
        /* fsum[6].in[1][k] <==  g[64][k] */
        _compIdx_37 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_37 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_407 = _compIdx_37 + 6*_compSizes_37[1];
        _in_sigIdx__17 = ctx->getSignalOffset(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_17 = ctx->getSignalSizes(_offset_407, 0x08b73807b55c4bbeLL /* in */);
        _offset_409 = _in_sigIdx__17 + 1*_sigSizes_in_17[1] + Fr_toInt(k)*_sigSizes_in_17[2];
        _offset_411 = _g_sigIdx_ + 64*_sigSizes_g[1] + Fr_toInt(k)*_sigSizes_g[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_411, _sigValue_52, 1);
        ctx->setSignal(__cIdx, _offset_407, _offset_409, _sigValue_52);
        /* fsum[7].in[0][k] <==  hin[32*7+k] */
        _compIdx_38 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_38 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_412 = _compIdx_38 + 7*_compSizes_38[1];
        _in_sigIdx__18 = ctx->getSignalOffset(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_18 = ctx->getSignalSizes(_offset_412, 0x08b73807b55c4bbeLL /* in */);
        _offset_414 = _in_sigIdx__18 + Fr_toInt(k)*_sigSizes_in_18[2];
        Fr_add(_tmp_139, (ctx->circuit->constants + 22), k);
        _offset_416 = _hin_sigIdx_ + Fr_toInt(_tmp_139)*_sigSizes_hin[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_416, _sigValue_53, 1);
        ctx->setSignal(__cIdx, _offset_412, _offset_414, _sigValue_53);
        /* fsum[7].in[1][k] <==  h[64][k] */
        _compIdx_39 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_39 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_417 = _compIdx_39 + 7*_compSizes_39[1];
        _in_sigIdx__19 = ctx->getSignalOffset(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_19 = ctx->getSignalSizes(_offset_417, 0x08b73807b55c4bbeLL /* in */);
        _offset_419 = _in_sigIdx__19 + 1*_sigSizes_in_19[1] + Fr_toInt(k)*_sigSizes_in_19[2];
        _offset_421 = _h_sigIdx_ + 64*_sigSizes_h[1] + Fr_toInt(k)*_sigSizes_h[2];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_421, _sigValue_54, 1);
        ctx->setSignal(__cIdx, _offset_417, _offset_419, _sigValue_54);
        Fr_copyn(_tmp_141, k, 1);
        Fr_add(_tmp_140, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_140, 1);
        Fr_lt(_tmp_142, k, (ctx->circuit->constants + 9));
        _loopCond_18 = _tmp_142;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_189, 1);
    Fr_lt(_tmp_143, k, (ctx->circuit->constants + 9));
    _loopCond_19 = _tmp_143;
    while (Fr_isTrue(_loopCond_19)) {
        /* out[31-k]     === fsum[0].out[k] */
        Fr_sub(_tmp_144, (ctx->circuit->constants + 8), k);
        _offset_428 = _out_sigIdx_ + Fr_toInt(_tmp_144)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_428, _sigValue_55, 1);
        _compIdx_40 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_40 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_429 = _compIdx_40;
        _out_sigIdx__8 = ctx->getSignalOffset(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_8 = ctx->getSignalSizes(_offset_429, 0x19f79b1921bbcfffLL /* out */);
        _offset_431 = _out_sigIdx__8 + Fr_toInt(k)*_sigSizes_out_8[1];
        ctx->multiGetSignal(__cIdx, _offset_429, _offset_431, _sigValue_56, 1);
        ctx->checkConstraint(__cIdx, _sigValue_55, _sigValue_56, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:156:8");
        /* out[32+31-k]  === fsum[1].out[k] */
        Fr_sub(_tmp_146, (ctx->circuit->constants + 24), k);
        _offset_433 = _out_sigIdx_ + Fr_toInt(_tmp_146)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_433, _sigValue_57, 1);
        _compIdx_41 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_41 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_434 = _compIdx_41 + 1*_compSizes_41[1];
        _out_sigIdx__9 = ctx->getSignalOffset(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_9 = ctx->getSignalSizes(_offset_434, 0x19f79b1921bbcfffLL /* out */);
        _offset_436 = _out_sigIdx__9 + Fr_toInt(k)*_sigSizes_out_9[1];
        ctx->multiGetSignal(__cIdx, _offset_434, _offset_436, _sigValue_58, 1);
        ctx->checkConstraint(__cIdx, _sigValue_57, _sigValue_58, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:157:8");
        /* out[64+31-k]  === fsum[2].out[k] */
        Fr_sub(_tmp_148, (ctx->circuit->constants + 25), k);
        _offset_438 = _out_sigIdx_ + Fr_toInt(_tmp_148)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_438, _sigValue_59, 1);
        _compIdx_42 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_42 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_439 = _compIdx_42 + 2*_compSizes_42[1];
        _out_sigIdx__10 = ctx->getSignalOffset(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_10 = ctx->getSignalSizes(_offset_439, 0x19f79b1921bbcfffLL /* out */);
        _offset_441 = _out_sigIdx__10 + Fr_toInt(k)*_sigSizes_out_10[1];
        ctx->multiGetSignal(__cIdx, _offset_439, _offset_441, _sigValue_60, 1);
        ctx->checkConstraint(__cIdx, _sigValue_59, _sigValue_60, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:158:8");
        /* out[96+31-k]  === fsum[3].out[k] */
        Fr_sub(_tmp_150, (ctx->circuit->constants + 26), k);
        _offset_443 = _out_sigIdx_ + Fr_toInt(_tmp_150)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_443, _sigValue_61, 1);
        _compIdx_43 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_43 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_444 = _compIdx_43 + 3*_compSizes_43[1];
        _out_sigIdx__11 = ctx->getSignalOffset(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_11 = ctx->getSignalSizes(_offset_444, 0x19f79b1921bbcfffLL /* out */);
        _offset_446 = _out_sigIdx__11 + Fr_toInt(k)*_sigSizes_out_11[1];
        ctx->multiGetSignal(__cIdx, _offset_444, _offset_446, _sigValue_62, 1);
        ctx->checkConstraint(__cIdx, _sigValue_61, _sigValue_62, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:159:8");
        /* out[128+31-k] === fsum[4].out[k] */
        Fr_sub(_tmp_152, (ctx->circuit->constants + 10), k);
        _offset_448 = _out_sigIdx_ + Fr_toInt(_tmp_152)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_448, _sigValue_63, 1);
        _compIdx_44 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_44 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_449 = _compIdx_44 + 4*_compSizes_44[1];
        _out_sigIdx__12 = ctx->getSignalOffset(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_12 = ctx->getSignalSizes(_offset_449, 0x19f79b1921bbcfffLL /* out */);
        _offset_451 = _out_sigIdx__12 + Fr_toInt(k)*_sigSizes_out_12[1];
        ctx->multiGetSignal(__cIdx, _offset_449, _offset_451, _sigValue_64, 1);
        ctx->checkConstraint(__cIdx, _sigValue_63, _sigValue_64, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:160:8");
        /* out[160+31-k] === fsum[5].out[k] */
        Fr_sub(_tmp_154, (ctx->circuit->constants + 27), k);
        _offset_453 = _out_sigIdx_ + Fr_toInt(_tmp_154)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_453, _sigValue_65, 1);
        _compIdx_45 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_45 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_454 = _compIdx_45 + 5*_compSizes_45[1];
        _out_sigIdx__13 = ctx->getSignalOffset(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_13 = ctx->getSignalSizes(_offset_454, 0x19f79b1921bbcfffLL /* out */);
        _offset_456 = _out_sigIdx__13 + Fr_toInt(k)*_sigSizes_out_13[1];
        ctx->multiGetSignal(__cIdx, _offset_454, _offset_456, _sigValue_66, 1);
        ctx->checkConstraint(__cIdx, _sigValue_65, _sigValue_66, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:161:8");
        /* out[192+31-k] === fsum[6].out[k] */
        Fr_sub(_tmp_156, (ctx->circuit->constants + 28), k);
        _offset_458 = _out_sigIdx_ + Fr_toInt(_tmp_156)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_458, _sigValue_67, 1);
        _compIdx_46 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_46 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_459 = _compIdx_46 + 6*_compSizes_46[1];
        _out_sigIdx__14 = ctx->getSignalOffset(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_14 = ctx->getSignalSizes(_offset_459, 0x19f79b1921bbcfffLL /* out */);
        _offset_461 = _out_sigIdx__14 + Fr_toInt(k)*_sigSizes_out_14[1];
        ctx->multiGetSignal(__cIdx, _offset_459, _offset_461, _sigValue_68, 1);
        ctx->checkConstraint(__cIdx, _sigValue_67, _sigValue_68, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:162:8");
        /* out[224+31-k] === fsum[7].out[k] */
        Fr_sub(_tmp_158, (ctx->circuit->constants + 12), k);
        _offset_463 = _out_sigIdx_ + Fr_toInt(_tmp_158)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_463, _sigValue_69, 1);
        _compIdx_47 = ctx->getSubComponentOffset(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _compSizes_47 = ctx->getSubComponentSizes(__cIdx, 0x74bb2378d0efe034LL /* fsum */);
        _offset_464 = _compIdx_47 + 7*_compSizes_47[1];
        _out_sigIdx__15 = ctx->getSignalOffset(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_15 = ctx->getSignalSizes(_offset_464, 0x19f79b1921bbcfffLL /* out */);
        _offset_466 = _out_sigIdx__15 + Fr_toInt(k)*_sigSizes_out_15[1];
        ctx->multiGetSignal(__cIdx, _offset_464, _offset_466, _sigValue_70, 1);
        ctx->checkConstraint(__cIdx, _sigValue_69, _sigValue_70, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/sha256/sha256compression.circom:163:8");
        Fr_copyn(_tmp_160, k, 1);
        Fr_add(_tmp_159, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_159, 1);
        Fr_lt(_tmp_161, k, (ctx->circuit->constants + 9));
        _loopCond_19 = _tmp_161;
    }
    ctx->finished(__cIdx);
}
/*
SigmaPlus
*/
void SigmaPlus_1ce04c18a56db1b4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_9[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_16[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in2_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__1;
    int _offset_7;
    int _in15_sigIdx_;
    int _offset_9;
    int _compIdx_2;
    int _in_sigIdx__2;
    int _offset_14;
    int _offset_16;
    int _compIdx_3;
    int _in_sigIdx__3;
    int _offset_18;
    int _offset_20;
    int _compIdx_4;
    int _in_sigIdx__4;
    int _offset_27;
    int _compIdx_5;
    int _out_sigIdx_;
    int _offset_29;
    int _compIdx_6;
    int _in_sigIdx__5;
    int _offset_31;
    int _in7_sigIdx_;
    int _offset_33;
    int _compIdx_7;
    int _in_sigIdx__6;
    int _offset_35;
    int _compIdx_8;
    int _out_sigIdx__1;
    int _offset_37;
    int _compIdx_9;
    int _in_sigIdx__7;
    int _offset_39;
    int _in16_sigIdx_;
    int _offset_41;
    int _compIdx_10;
    int _out_sigIdx__2;
    int _offset_48;
    int _out_sigIdx__3;
    int _offset_50;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in2;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in15;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in7;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _sigSizes_in16;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_16[0]), ctx->circuit->constants +0);
    _in2_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2b9fc1192bd45ee4LL /* in2 */);
    _in15_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xf4ddfec579e58cd8LL /* in15 */);
    _in7_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2b9fbe192bd459cbLL /* in7 */);
    _in16_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xf4de01c579e591f1LL /* in16 */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in2 = ctx->getSignalSizes(__cIdx, 0x2b9fc1192bd45ee4LL /* in2 */);
    _sigSizes_in15 = ctx->getSignalSizes(__cIdx, 0xf4ddfec579e58cd8LL /* in15 */);
    _sigSizes_in7 = ctx->getSignalSizes(__cIdx, 0x2b9fbe192bd459cbLL /* in7 */);
    _sigSizes_in16 = ctx->getSignalSizes(__cIdx, 0xf4de01c579e591f1LL /* in16 */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in2[32] */
    /* signal input in7[32] */
    /* signal input in15[32] */
    /* signal input in16[32] */
    /* signal output out[32] */
    /* var k */
    /* component sigma1 = SmallSigma(17,19,10) */
    /* component sigma0 = SmallSigma(7, 18, 3) */
    /* for (k=0;k<32;k++) */
    /* sigma1.in[k] <== in2[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x6a58ef8f8932dd5fLL /* sigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in2_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* sigma0.in[k] <== in15[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x6a58ee8f8932dbacLL /* sigma0 */);
    _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__1;
    _offset_9 = _in15_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* sigma1.in[k] <== in2[k] */
        _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x6a58ef8f8932dd5fLL /* sigma1 */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
        _offset_14 = _in_sigIdx__2 + Fr_toInt(k)*_sigSizes_in_2[1];
        _offset_16 = _in2_sigIdx_ + Fr_toInt(k)*_sigSizes_in2[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_16, _sigValue_2, 1);
        ctx->setSignal(__cIdx, _compIdx_2, _offset_14, _sigValue_2);
        /* sigma0.in[k] <== in15[k] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x6a58ee8f8932dbacLL /* sigma0 */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__3 + Fr_toInt(k)*_sigSizes_in_3[1];
        _offset_20 = _in15_sigIdx_ + Fr_toInt(k)*_sigSizes_in15[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_3, _offset_18, _sigValue_3);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 4) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][k] <== sigma1.out[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_27 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[2];
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x6a58ef8f8932dd5fLL /* sigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _offset_29 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_5, _offset_29, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_27, _sigValue_4);
        /* sum.in[1][k] <== in7[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_6, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_6, 0x08b73807b55c4bbeLL /* in */);
        _offset_31 = _in_sigIdx__5 + 1*_sigSizes_in_5[1] + Fr_toInt(k)*_sigSizes_in_5[2];
        _offset_33 = _in7_sigIdx_ + Fr_toInt(k)*_sigSizes_in7[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_33, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_31, _sigValue_5);
        /* sum.in[2][k] <== sigma0.out[k] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_7, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_7, 0x08b73807b55c4bbeLL /* in */);
        _offset_35 = _in_sigIdx__6 + 2*_sigSizes_in_6[1] + Fr_toInt(k)*_sigSizes_in_6[2];
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x6a58ee8f8932dbacLL /* sigma0 */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_8, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_8, 0x19f79b1921bbcfffLL /* out */);
        _offset_37 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_8, _offset_37, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_35, _sigValue_6);
        /* sum.in[3][k] <== in16[k] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__7 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_7 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_39 = _in_sigIdx__7 + 3*_sigSizes_in_7[1] + Fr_toInt(k)*_sigSizes_in_7[2];
        _offset_41 = _in16_sigIdx_ + Fr_toInt(k)*_sigSizes_in16[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_41, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_39, _sigValue_7);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_16, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== sum.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_48 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_48, _sigValue_8, 1);
        _offset_50 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_50, _sigValue_8);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
SmallSigma
ra=17
rb=19
rc=10
*/
void SmallSigma_0a95e0821fc1227f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_9[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in_sigIdx__1;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__2;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _in_sigIdx__3;
    int _offset_11;
    int _offset_13;
    int _compIdx_3;
    int _in_sigIdx__4;
    int _offset_18;
    int _offset_20;
    int _compIdx_4;
    int _in_sigIdx__5;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _in_sigIdx__6;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _a_sigIdx_;
    int _offset_35;
    int _compIdx_7;
    int _out_sigIdx_;
    int _offset_37;
    int _compIdx_8;
    int _b_sigIdx_;
    int _offset_39;
    int _compIdx_9;
    int _out_sigIdx__1;
    int _offset_41;
    int _compIdx_10;
    int _c_sigIdx_;
    int _offset_43;
    int _compIdx_11;
    int _out_sigIdx__2;
    int _offset_45;
    int _compIdx_12;
    int _out_sigIdx__3;
    int _offset_52;
    int _out_sigIdx__4;
    int _offset_54;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_out_4;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_6[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx__4 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in_1 = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out_4 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[32] */
    /* signal output out[32] */
    /* var k */
    /* component rota = RotR(32, ra) */
    /* component rotb = RotR(32, rb) */
    /* component shrc = ShR(32, rc) */
    /* for (k=0;k<32;k++) */
    /* rota.in[k] <== in[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* rotb.in[k] <== in[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__2;
    _offset_9 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* shrc.in[k] <== in[k] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
    _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__3;
    _offset_13 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* rota.in[k] <== in[k] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[1];
        _offset_20 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_3, _offset_18, _sigValue_3);
        /* rotb.in[k] <== in[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__5 + Fr_toInt(k)*_sigSizes_in_5[1];
        _offset_24 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* shrc.in[k] <== in[k] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _offset_26 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[1];
        _offset_28 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component xor3 = Xor3(32) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_6, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* xor3.a[k] <== rota.out[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _a_sigIdx_ = ctx->getSignalOffset(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a = ctx->getSignalSizes(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_35 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _offset_37 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_7, _offset_37, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_35, _sigValue_6);
        /* xor3.b[k] <== rotb.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _b_sigIdx_ = ctx->getSignalOffset(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b = ctx->getSignalSizes(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _offset_39 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_41 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_41, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_39, _sigValue_7);
        /* xor3.c[k] <== shrc.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _c_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c = ctx->getSignalSizes(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _offset_43 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_45 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_10, _offset_43, _sigValue_8);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== xor3.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_52 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_52, _sigValue_9, 1);
        _offset_54 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_54, _sigValue_9);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=17
*/
void RotR_5ad724664528d8e9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 17*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 51));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=19
*/
void RotR_5ad72e664528e9e7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 19*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 4));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
ShR
n=32
r=10
*/
void ShR_7bc50a58f122c06c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_6[1];
    FrElement i[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_11[1];
    FrElement _tmp_10[1];
    FrElement _tmp_12[1];
    int _in_sigIdx_;
    int _offset_10;
    int _out_sigIdx_;
    int _offset_12;
    int _offset_21;
    int _offset_24;
    int _offset_26;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* if (i+r >= n) */
    /* out[i] <== in[ i+r ] */
    _offset_10 = _in_sigIdx_ + 10*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue, 1);
    _offset_12 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_12, _sigValue);
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* if (i+r >= n) */
        Fr_add(_tmp_7, i, (ctx->circuit->constants + 49));
        Fr_geq(_tmp_8, _tmp_7, (ctx->circuit->constants + 9));
        if (Fr_isTrue(_tmp_8)) {
            /* out[i] <== 0 */
            _offset_21 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
            ctx->setSignal(__cIdx, __cIdx, _offset_21, (ctx->circuit->constants + 0));
        } else {
            /* out[i] <== in[ i+r ] */
            Fr_add(_tmp_9, i, (ctx->circuit->constants + 49));
            _offset_24 = _in_sigIdx_ + Fr_toInt(_tmp_9)*_sigSizes_in[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_1, 1);
            _offset_26 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
            ctx->setSignal(__cIdx, __cIdx, _offset_26, _sigValue_1);
        }
        Fr_copyn(_tmp_11, i, 1);
        Fr_add(_tmp_10, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_10, 1);
        Fr_lt(_tmp_12, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_12;
    }
    ctx->finished(__cIdx);
}
/*
Xor3
c[22]=0
c[23]=0
c[24]=0
c[25]=0
c[26]=0
c[27]=0
c[28]=0
c[29]=0
c[30]=0
c[31]=0
n=32
*/
void Xor3_4b2e690a6f02c670(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_4[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_10[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _tmp_15[1];
    FrElement k[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_16[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_17[1];
    FrElement _tmp_18[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_19[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _tmp_23[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_24[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_25[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_26[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    int _b_sigIdx_;
    int _offset_9;
    int _c_sigIdx_;
    int _offset_11;
    int _mid_sigIdx_;
    int _offset_13;
    int _a_sigIdx_;
    int _offset_15;
    int _offset_17;
    int _offset_19;
    int _offset_21;
    int _offset_23;
    int _offset_25;
    int _offset_27;
    int _out_sigIdx_;
    int _offset_29;
    int _offset_35;
    int _offset_37;
    int _offset_39;
    int _offset_41;
    int _offset_43;
    int _offset_45;
    int _offset_47;
    int _offset_49;
    int _offset_51;
    int _offset_53;
    int _offset_55;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_mid;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_15[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _mid_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x07f43d1917563645LL /* mid */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_mid = ctx->getSignalSizes(__cIdx, 0x07f43d1917563645LL /* mid */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[n] */
    /* signal input b[n] */
    /* signal input c[n] */
    /* signal output out[n] */
    /* signal mid[n] */
    /* for (var k=0;k<n;k++) */
    /* mid[k] <== b[k]*c[k] */
    _offset_9 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue, 1);
    _offset_11 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_11, _sigValue_1, 1);
    Fr_mul(_tmp_1, _sigValue, _sigValue_1);
    _offset_13 = _mid_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_13, _tmp_1);
    /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
    _offset_15 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_2, 1);
    _offset_17 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    Fr_mul(_tmp_2, (ctx->circuit->constants + 2), _sigValue_3);
    Fr_sub(_tmp_3, (ctx->circuit->constants + 1), _tmp_2);
    _offset_19 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_19, _sigValue_4, 1);
    Fr_mul(_tmp_4, (ctx->circuit->constants + 2), _sigValue_4);
    Fr_sub(_tmp_5, _tmp_3, _tmp_4);
    _offset_21 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_21, _sigValue_5, 1);
    Fr_mul(_tmp_6, (ctx->circuit->constants + 119), _sigValue_5);
    Fr_add(_tmp_7, _tmp_5, _tmp_6);
    Fr_mul(_tmp_8, _sigValue_2, _tmp_7);
    _offset_23 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_6, 1);
    Fr_add(_tmp_9, _tmp_8, _sigValue_6);
    _offset_25 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_25, _sigValue_7, 1);
    Fr_add(_tmp_10, _tmp_9, _sigValue_7);
    _offset_27 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_27, _sigValue_8, 1);
    Fr_mul(_tmp_11, (ctx->circuit->constants + 2), _sigValue_8);
    Fr_sub(_tmp_12, _tmp_10, _tmp_11);
    _offset_29 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_29, _tmp_12);
    _loopCond = _tmp_15;
    while (Fr_isTrue(_loopCond)) {
        /* mid[k] <== b[k]*c[k] */
        _offset_35 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_35, _sigValue_9, 1);
        _offset_37 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_37, _sigValue_10, 1);
        Fr_mul(_tmp_16, _sigValue_9, _sigValue_10);
        _offset_39 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_39, _tmp_16);
        /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
        _offset_41 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_41, _sigValue_11, 1);
        _offset_43 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_43, _sigValue_12, 1);
        Fr_mul(_tmp_17, (ctx->circuit->constants + 2), _sigValue_12);
        Fr_sub(_tmp_18, (ctx->circuit->constants + 1), _tmp_17);
        _offset_45 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_13, 1);
        Fr_mul(_tmp_19, (ctx->circuit->constants + 2), _sigValue_13);
        Fr_sub(_tmp_20, _tmp_18, _tmp_19);
        _offset_47 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_47, _sigValue_14, 1);
        Fr_mul(_tmp_21, (ctx->circuit->constants + 119), _sigValue_14);
        Fr_add(_tmp_22, _tmp_20, _tmp_21);
        Fr_mul(_tmp_23, _sigValue_11, _tmp_22);
        _offset_49 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_49, _sigValue_15, 1);
        Fr_add(_tmp_24, _tmp_23, _sigValue_15);
        _offset_51 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_16, 1);
        Fr_add(_tmp_25, _tmp_24, _sigValue_16);
        _offset_53 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_53, _sigValue_17, 1);
        Fr_mul(_tmp_26, (ctx->circuit->constants + 2), _sigValue_17);
        Fr_sub(_tmp_27, _tmp_25, _tmp_26);
        _offset_55 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_55, _tmp_27);
        Fr_copyn(_tmp_29, k, 1);
        Fr_add(_tmp_28, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_28, 1);
        Fr_lt(_tmp_30, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_30;
    }
    ctx->finished(__cIdx);
}
/*
SmallSigma
ra=7
rb=18
rc=3
*/
void SmallSigma_ed4fe7283b65a77b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_9[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in_sigIdx__1;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__2;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _in_sigIdx__3;
    int _offset_11;
    int _offset_13;
    int _compIdx_3;
    int _in_sigIdx__4;
    int _offset_18;
    int _offset_20;
    int _compIdx_4;
    int _in_sigIdx__5;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _in_sigIdx__6;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _a_sigIdx_;
    int _offset_35;
    int _compIdx_7;
    int _out_sigIdx_;
    int _offset_37;
    int _compIdx_8;
    int _b_sigIdx_;
    int _offset_39;
    int _compIdx_9;
    int _out_sigIdx__1;
    int _offset_41;
    int _compIdx_10;
    int _c_sigIdx_;
    int _offset_43;
    int _compIdx_11;
    int _out_sigIdx__2;
    int _offset_45;
    int _compIdx_12;
    int _out_sigIdx__3;
    int _offset_52;
    int _out_sigIdx__4;
    int _offset_54;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_out_4;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_6[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx__4 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in_1 = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out_4 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[32] */
    /* signal output out[32] */
    /* var k */
    /* component rota = RotR(32, ra) */
    /* component rotb = RotR(32, rb) */
    /* component shrc = ShR(32, rc) */
    /* for (k=0;k<32;k++) */
    /* rota.in[k] <== in[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* rotb.in[k] <== in[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__2;
    _offset_9 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* shrc.in[k] <== in[k] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
    _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__3;
    _offset_13 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* rota.in[k] <== in[k] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[1];
        _offset_20 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_3, _offset_18, _sigValue_3);
        /* rotb.in[k] <== in[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__5 + Fr_toInt(k)*_sigSizes_in_5[1];
        _offset_24 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* shrc.in[k] <== in[k] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _offset_26 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[1];
        _offset_28 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component xor3 = Xor3(32) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_6, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* xor3.a[k] <== rota.out[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _a_sigIdx_ = ctx->getSignalOffset(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a = ctx->getSignalSizes(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_35 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _offset_37 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_7, _offset_37, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_35, _sigValue_6);
        /* xor3.b[k] <== rotb.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _b_sigIdx_ = ctx->getSignalOffset(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b = ctx->getSignalSizes(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _offset_39 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_41 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_41, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_39, _sigValue_7);
        /* xor3.c[k] <== shrc.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _c_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c = ctx->getSignalSizes(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _offset_43 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x46cb5318e27f9e25LL /* shrc */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_45 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_10, _offset_43, _sigValue_8);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== xor3.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_52 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_52, _sigValue_9, 1);
        _offset_54 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_54, _sigValue_9);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=7
*/
void RotR_9c4bea1ab7c5d15e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 7*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 44));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=18
*/
void RotR_5ad72d664528e834(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 18*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 53));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
ShR
n=32
r=3
*/
void ShR_5b395cb7d179533a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_6[1];
    FrElement i[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_11[1];
    FrElement _tmp_10[1];
    FrElement _tmp_12[1];
    int _in_sigIdx_;
    int _offset_10;
    int _out_sigIdx_;
    int _offset_12;
    int _offset_21;
    int _offset_24;
    int _offset_26;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* if (i+r >= n) */
    /* out[i] <== in[ i+r ] */
    _offset_10 = _in_sigIdx_ + 3*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue, 1);
    _offset_12 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_12, _sigValue);
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* if (i+r >= n) */
        Fr_add(_tmp_7, i, (ctx->circuit->constants + 5));
        Fr_geq(_tmp_8, _tmp_7, (ctx->circuit->constants + 9));
        if (Fr_isTrue(_tmp_8)) {
            /* out[i] <== 0 */
            _offset_21 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
            ctx->setSignal(__cIdx, __cIdx, _offset_21, (ctx->circuit->constants + 0));
        } else {
            /* out[i] <== in[ i+r ] */
            Fr_add(_tmp_9, i, (ctx->circuit->constants + 5));
            _offset_24 = _in_sigIdx_ + Fr_toInt(_tmp_9)*_sigSizes_in[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_1, 1);
            _offset_26 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
            ctx->setSignal(__cIdx, __cIdx, _offset_26, _sigValue_1);
        }
        Fr_copyn(_tmp_11, i, 1);
        Fr_add(_tmp_10, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_10, 1);
        Fr_lt(_tmp_12, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_12;
    }
    ctx->finished(__cIdx);
}
/*
Xor3
c[29]=0
c[30]=0
c[31]=0
n=32
*/
void Xor3_a41687bbff0ef98f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_4[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_10[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _tmp_15[1];
    FrElement k[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_16[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_17[1];
    FrElement _tmp_18[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_19[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _tmp_23[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_24[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_25[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_26[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    int _b_sigIdx_;
    int _offset_9;
    int _c_sigIdx_;
    int _offset_11;
    int _mid_sigIdx_;
    int _offset_13;
    int _a_sigIdx_;
    int _offset_15;
    int _offset_17;
    int _offset_19;
    int _offset_21;
    int _offset_23;
    int _offset_25;
    int _offset_27;
    int _out_sigIdx_;
    int _offset_29;
    int _offset_35;
    int _offset_37;
    int _offset_39;
    int _offset_41;
    int _offset_43;
    int _offset_45;
    int _offset_47;
    int _offset_49;
    int _offset_51;
    int _offset_53;
    int _offset_55;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_mid;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_15[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _mid_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x07f43d1917563645LL /* mid */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_mid = ctx->getSignalSizes(__cIdx, 0x07f43d1917563645LL /* mid */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[n] */
    /* signal input b[n] */
    /* signal input c[n] */
    /* signal output out[n] */
    /* signal mid[n] */
    /* for (var k=0;k<n;k++) */
    /* mid[k] <== b[k]*c[k] */
    _offset_9 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue, 1);
    _offset_11 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_11, _sigValue_1, 1);
    Fr_mul(_tmp_1, _sigValue, _sigValue_1);
    _offset_13 = _mid_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_13, _tmp_1);
    /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
    _offset_15 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_2, 1);
    _offset_17 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    Fr_mul(_tmp_2, (ctx->circuit->constants + 2), _sigValue_3);
    Fr_sub(_tmp_3, (ctx->circuit->constants + 1), _tmp_2);
    _offset_19 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_19, _sigValue_4, 1);
    Fr_mul(_tmp_4, (ctx->circuit->constants + 2), _sigValue_4);
    Fr_sub(_tmp_5, _tmp_3, _tmp_4);
    _offset_21 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_21, _sigValue_5, 1);
    Fr_mul(_tmp_6, (ctx->circuit->constants + 119), _sigValue_5);
    Fr_add(_tmp_7, _tmp_5, _tmp_6);
    Fr_mul(_tmp_8, _sigValue_2, _tmp_7);
    _offset_23 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_6, 1);
    Fr_add(_tmp_9, _tmp_8, _sigValue_6);
    _offset_25 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_25, _sigValue_7, 1);
    Fr_add(_tmp_10, _tmp_9, _sigValue_7);
    _offset_27 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_27, _sigValue_8, 1);
    Fr_mul(_tmp_11, (ctx->circuit->constants + 2), _sigValue_8);
    Fr_sub(_tmp_12, _tmp_10, _tmp_11);
    _offset_29 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_29, _tmp_12);
    _loopCond = _tmp_15;
    while (Fr_isTrue(_loopCond)) {
        /* mid[k] <== b[k]*c[k] */
        _offset_35 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_35, _sigValue_9, 1);
        _offset_37 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_37, _sigValue_10, 1);
        Fr_mul(_tmp_16, _sigValue_9, _sigValue_10);
        _offset_39 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_39, _tmp_16);
        /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
        _offset_41 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_41, _sigValue_11, 1);
        _offset_43 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_43, _sigValue_12, 1);
        Fr_mul(_tmp_17, (ctx->circuit->constants + 2), _sigValue_12);
        Fr_sub(_tmp_18, (ctx->circuit->constants + 1), _tmp_17);
        _offset_45 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_13, 1);
        Fr_mul(_tmp_19, (ctx->circuit->constants + 2), _sigValue_13);
        Fr_sub(_tmp_20, _tmp_18, _tmp_19);
        _offset_47 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_47, _sigValue_14, 1);
        Fr_mul(_tmp_21, (ctx->circuit->constants + 119), _sigValue_14);
        Fr_add(_tmp_22, _tmp_20, _tmp_21);
        Fr_mul(_tmp_23, _sigValue_11, _tmp_22);
        _offset_49 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_49, _sigValue_15, 1);
        Fr_add(_tmp_24, _tmp_23, _sigValue_15);
        _offset_51 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_16, 1);
        Fr_add(_tmp_25, _tmp_24, _sigValue_16);
        _offset_53 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_53, _sigValue_17, 1);
        Fr_mul(_tmp_26, (ctx->circuit->constants + 2), _sigValue_17);
        Fr_sub(_tmp_27, _tmp_25, _tmp_26);
        _offset_55 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_55, _tmp_27);
        Fr_copyn(_tmp_29, k, 1);
        Fr_add(_tmp_28, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_28, 1);
        Fr_lt(_tmp_30, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_30;
    }
    ctx->finished(__cIdx);
}
/*
BinSum
n=32
ops=4
*/
void BinSum_759fd4ac955f303e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lin[1];
    FrElement _tmp_9[1];
    FrElement j[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _tmp_18[1];
    FrElement k[1];
    FrElement e2[1];
    FrElement _num_7[1];
    FrElement _tmp_19[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_23[1];
    FrElement _tmp_22[1];
    FrElement _tmp_24[1];
    FrElement _tmp_25[1];
    FrElement _tmp_27[1];
    FrElement _tmp_26[1];
    FrElement _tmp_28[1];
    FrElement _num_8[1];
    FrElement _num_9[1];
    FrElement _tmp_29[1];
    FrElement lout[1];
    FrElement _tmp_30[1];
    FrElement _tmp_31[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_32[1];
    FrElement _tmp_33[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_34[1];
    FrElement _tmp_35[1];
    FrElement _tmp_36[1];
    FrElement _tmp_38[1];
    FrElement _tmp_37[1];
    FrElement _tmp_39[1];
    int _in_sigIdx_;
    int _offset_18;
    int _offset_28;
    int _offset_48;
    int _out_sigIdx_;
    int _offset_69;
    int _offset_71;
    int _offset_73;
    int _offset_76;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    Fr_copy(&(_tmp_9[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_18[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    Fr_copy(&(_num_7[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_8[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    Fr_copy(&(lout[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* var nout = nbits((2**n -1)*ops) */
    /* signal input in[ops][n] */
    /* signal output out[nout] */
    /* var lin = 0 */
    /* var lout = 0 */
    /* var k */
    /* var j */
    /* var e2 */
    /* e2 = 1 */
    /* for (k=0;k<n;k++) */
    /* for (j=0;j<ops;j++) */
    /* lin += in[j][k] * e2 */
    _offset_18 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue, 1);
    Fr_mul(_tmp_5, _sigValue, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lin, _tmp_6, 1);
    _loopCond = _tmp_9;
    while (Fr_isTrue(_loopCond)) {
        /* lin += in[j][k] * e2 */
        _offset_28 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_1, 1);
        Fr_mul(_tmp_10, _sigValue_1, (ctx->circuit->constants + 1));
        Fr_add(_tmp_11, lin, _tmp_10);
        Fr_copyn(lin, _tmp_11, 1);
        Fr_copyn(_tmp_13, j, 1);
        Fr_add(_tmp_12, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_12, 1);
        Fr_lt(_tmp_14, j, (ctx->circuit->constants + 119));
        _loopCond = _tmp_14;
    }
    /* e2 = e2 + e2 */
    _loopCond_1 = _tmp_18;
    while (Fr_isTrue(_loopCond_1)) {
        /* for (j=0;j<ops;j++) */
        Fr_copyn(j, _num_7, 1);
        Fr_lt(_tmp_19, j, (ctx->circuit->constants + 119));
        _loopCond_2 = _tmp_19;
        while (Fr_isTrue(_loopCond_2)) {
            /* lin += in[j][k] * e2 */
            _offset_48 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1] + Fr_toInt(k)*_sigSizes_in[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_48, _sigValue_2, 1);
            Fr_mul(_tmp_20, _sigValue_2, e2);
            Fr_add(_tmp_21, lin, _tmp_20);
            Fr_copyn(lin, _tmp_21, 1);
            Fr_copyn(_tmp_23, j, 1);
            Fr_add(_tmp_22, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_22, 1);
            Fr_lt(_tmp_24, j, (ctx->circuit->constants + 119));
            _loopCond_2 = _tmp_24;
        }
        /* e2 = e2 + e2 */
        Fr_add(_tmp_25, e2, e2);
        Fr_copyn(e2, _tmp_25, 1);
        Fr_copyn(_tmp_27, k, 1);
        Fr_add(_tmp_26, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_26, 1);
        Fr_lt(_tmp_28, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_28;
    }
    /* e2 = 1 */
    Fr_copyn(e2, _num_8, 1);
    /* for (k=0;k<nout;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_29, k, (ctx->circuit->constants + 120));
    _loopCond_3 = _tmp_29;
    while (Fr_isTrue(_loopCond_3)) {
        /* out[k] <-- (lin >> k) & 1 */
        Fr_shr(_tmp_30, lin, k);
        Fr_band(_tmp_31, _tmp_30, (ctx->circuit->constants + 1));
        _offset_69 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_69, _tmp_31);
        /* out[k] * (out[k] - 1) === 0 */
        _offset_71 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_71, _sigValue_3, 1);
        _offset_73 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_73, _sigValue_4, 1);
        Fr_sub(_tmp_32, _sigValue_4, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_33, _sigValue_3, _tmp_32);
        ctx->checkConstraint(__cIdx, _tmp_33, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:90:8");
        /* lout += out[k] * e2 */
        _offset_76 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_76, _sigValue_5, 1);
        Fr_mul(_tmp_34, _sigValue_5, e2);
        Fr_add(_tmp_35, lout, _tmp_34);
        Fr_copyn(lout, _tmp_35, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_36, e2, e2);
        Fr_copyn(e2, _tmp_36, 1);
        Fr_copyn(_tmp_38, k, 1);
        Fr_add(_tmp_37, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_37, 1);
        Fr_lt(_tmp_39, k, (ctx->circuit->constants + 120));
        _loopCond_3 = _tmp_39;
    }
    /* lin === lout */
    ctx->checkConstraint(__cIdx, lin, lout, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:99:4");
    ctx->finished(__cIdx);
}
/*
K
x=0
*/
void K_287c64a495f9d70d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 45), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=1
*/
void K_287c63a495f9d55a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 55), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=2
*/
void K_287c62a495f9d3a7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 56), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=3
*/
void K_287c61a495f9d1f4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 57), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=4
*/
void K_287c60a495f9d041(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 58), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=5
*/
void K_287c5fa495f9ce8e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 59), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=6
*/
void K_287c5ea495f9ccdb(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 60), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=7
*/
void K_287c5da495f9cb28(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 61), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=8
*/
void K_287c5ca495f9c975(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 62), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=9
*/
void K_287c5ba495f9c7c2(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 63), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=10
*/
void K_c532baaad785a31e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 64), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=11
*/
void K_c532bbaad785a4d1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 65), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=12
*/
void K_c532b8aad7859fb8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 66), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=13
*/
void K_c532b9aad785a16b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 67), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=14
*/
void K_c532beaad785a9ea(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 68), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=15
*/
void K_c532bfaad785ab9d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 69), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=16
*/
void K_c532bcaad785a684(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 70), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=17
*/
void K_c532bdaad785a837(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 71), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=18
*/
void K_c532b2aad7859586(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 72), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=19
*/
void K_c532b3aad7859739(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 73), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=20
*/
void K_c52f34aad7828995(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 74), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=21
*/
void K_c52f33aad78287e2(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 75), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=22
*/
void K_c52f32aad782862f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 76), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=23
*/
void K_c52f31aad782847c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 77), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=24
*/
void K_c52f30aad78282c9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 78), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=25
*/
void K_c52f2faad7828116(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 79), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=26
*/
void K_c52f2eaad7827f63(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 80), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=27
*/
void K_c52f2daad7827db0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 81), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=28
*/
void K_c52f3caad782972d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 82), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=29
*/
void K_c52f3baad782957a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 83), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=30
*/
void K_c52baeaad77f700c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 84), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=31
*/
void K_c52bafaad77f71bf(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 85), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=32
*/
void K_c52bb0aad77f7372(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 86), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=33
*/
void K_c52bb1aad77f7525(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 87), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=34
*/
void K_c52baaaad77f6940(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 88), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=35
*/
void K_c52babaad77f6af3(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 89), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=36
*/
void K_c52bacaad77f6ca6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 90), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=37
*/
void K_c52badaad77f6e59(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 91), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=38
*/
void K_c52bb6aad77f7da4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 92), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=39
*/
void K_c52bb7aad77f7f57(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 93), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=40
*/
void K_c528a8aad77d3003(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 94), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=41
*/
void K_c528a7aad77d2e50(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 95), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=42
*/
void K_c528aaaad77d3369(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 96), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=43
*/
void K_c528a9aad77d31b6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 97), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=44
*/
void K_c528acaad77d36cf(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 98), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=45
*/
void K_c528abaad77d351c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 99), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=46
*/
void K_c528aeaad77d3a35(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 100), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=47
*/
void K_c528adaad77d3882(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 101), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=48
*/
void K_c528b0aad77d3d9b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 102), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=49
*/
void K_c528afaad77d3be8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 103), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=50
*/
void K_c52542aad77a4cda(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 104), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=51
*/
void K_c52543aad77a4e8d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 105), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=52
*/
void K_c52540aad77a4974(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 106), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=53
*/
void K_c52541aad77a4b27(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 107), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=54
*/
void K_c5253eaad77a460e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 108), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=55
*/
void K_c5253faad77a47c1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 109), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=56
*/
void K_c5253caad77a42a8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 110), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=57
*/
void K_c5253daad77a445b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 111), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=58
*/
void K_c5253aaad77a3f42(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 112), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=59
*/
void K_c5253baad77a40f5(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 113), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=60
*/
void K_c521bcaad7773351(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 114), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=61
*/
void K_c521bbaad777319e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 115), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=62
*/
void K_c521baaad7772feb(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 1));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 116), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
K
x=63
*/
void K_c521b9aad7772e38(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _out_sigIdx_;
    int _offset_7;
    int _offset_15;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal output out[32] */
    /* var c[64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ] */
    /* for (var i=0;i<32;i++) */
    /* out[i] <== (c[x] >> i) & 1 */
    _offset_7 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_7, (ctx->circuit->constants + 0));
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== (c[x] >> i) & 1 */
        Fr_shr(_tmp_6, (ctx->circuit->constants + 117), i);
        Fr_band(_tmp_7, _tmp_6, (ctx->circuit->constants + 1));
        _offset_15 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_15, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=1
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=1
k[4]=1
k[5]=0
k[6]=0
k[7]=1
k[8]=1
k[9]=1
*/
void T1_f7baf7fc08f90fdd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=1
k[15]=0
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=1
k[25]=0
k[26]=0
k[27]=0
k[28]=1
k[29]=1
k[2]=0
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=0
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_e5f968f97a69591a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=1
k[16]=0
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=1
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=1
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_de3a8c8f515e9e56(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=1
k[13]=0
k[14]=1
k[15]=1
k[16]=1
k[17]=0
k[18]=1
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=1
k[28]=0
k[29]=1
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=1
k[9]=1
*/
void T1_f26a92e2cc6f62f0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=0
k[13]=0
k[14]=1
k[15]=1
k[16]=0
k[17]=1
k[18]=1
k[19]=0
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=0
k[24]=1
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=1
k[2]=0
k[30]=0
k[31]=0
k[3]=1
k[4]=1
k[5]=0
k[6]=1
k[7]=0
k[8]=0
k[9]=1
*/
void T1_ac98b238e51fb184(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=1
k[13]=0
k[14]=0
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=1
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_f3c3591736b11150(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=1
k[18]=1
k[19]=1
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=1
*/
void T1_3f14deab1b5e247c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=1
k[13]=0
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=0
k[24]=1
k[25]=1
k[26]=0
k[27]=1
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=1
k[5]=0
k[6]=1
k[7]=1
k[8]=0
k[9]=1
*/
void T1_b5ffb79765a30644(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=1
k[4]=1
k[5]=0
k[6]=0
k[7]=1
k[8]=0
k[9]=1
*/
void T1_53f22468f8f63ddc(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=1
k[13]=0
k[14]=1
k[15]=0
k[16]=1
k[17]=1
k[18]=0
k[19]=0
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=1
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=0
k[31]=0
k[3]=0
k[4]=0
k[5]=0
k[6]=0
k[7]=0
k[8]=1
k[9]=1
*/
void T1_e577f7209986e4df(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=1
k[4]=1
k[5]=1
k[6]=0
k[7]=1
k[8]=1
k[9]=0
*/
void T1_598b5669d8ba71fa(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=1
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=1
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=0
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_cc19a6e8c0fb57c8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=1
k[13]=0
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=1
k[29]=1
k[2]=1
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=0
k[8]=1
k[9]=0
*/
void T1_15fb22323ecefcb9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=1
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=1
k[24]=0
k[25]=0
k[26]=0
k[27]=0
k[28]=0
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=1
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_2db038350ce09580(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=1
k[24]=1
k[25]=1
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=1
*/
void T1_2d9820618dbd5a39(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=1
k[13]=1
k[14]=1
k[15]=1
k[16]=1
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=0
k[28]=0
k[29]=0
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=0
k[8]=1
k[9]=0
*/
void T1_e0b03662e154b6c7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=1
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=0
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_017c438b68b2142c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=1
k[25]=1
k[26]=1
k[27]=1
k[28]=0
k[29]=1
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=0
k[7]=1
k[8]=1
k[9]=1
*/
void T1_ee907e7c6d065634(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=1
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=1
k[25]=1
k[26]=1
k[27]=1
k[28]=0
k[29]=0
k[2]=1
k[30]=0
k[31]=0
k[3]=0
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_bc760b66d187db06(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_ed28e37b604d70eb(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=0
k[21]=1
k[22]=1
k[23]=1
k[24]=1
k[25]=0
k[26]=1
k[27]=1
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=1
k[4]=0
k[5]=1
k[6]=1
k[7]=0
k[8]=0
k[9]=0
*/
void T1_575b0510064aaa26(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=0
k[17]=0
k[18]=1
k[19]=0
k[1]=1
k[20]=1
k[21]=1
k[22]=1
k[23]=0
k[24]=0
k[25]=1
k[26]=0
k[27]=1
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=1
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_2561799bfbaa5209(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=0
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=1
k[28]=1
k[29]=0
k[2]=1
k[30]=1
k[31]=0
k[3]=1
k[4]=1
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_41fff9c6f6feb886(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=1
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=0
k[30]=1
k[31]=0
k[3]=1
k[4]=1
k[5]=0
k[6]=1
k[7]=1
k[8]=0
k[9]=0
*/
void T1_4ca8930d33b9a40c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=1
k[13]=0
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=0
k[30]=0
k[31]=1
k[3]=0
k[4]=1
k[5]=0
k[6]=1
k[7]=0
k[8]=1
k[9]=0
*/
void T1_02898539f8d56720(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=1
k[15]=1
k[16]=1
k[17]=0
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=1
k[6]=1
k[7]=0
k[8]=0
k[9]=1
*/
void T1_5100a81c81664695(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=1
k[17]=1
k[18]=0
k[19]=0
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=0
k[28]=1
k[29]=1
k[2]=0
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_f69129e4b0f5f504(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=0
k[24]=1
k[25]=1
k[26]=1
k[27]=1
k[28]=1
k[29]=1
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_bf393c3dacaa58e1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=0
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=0
k[21]=1
k[22]=1
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_632a7e83eed083a4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=1
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=1
k[20]=0
k[21]=1
k[22]=0
k[23]=1
k[24]=1
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=0
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=1
k[7]=0
k[8]=1
k[9]=0
*/
void T1_b76ed5c6149bd5fb(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=0
k[31]=0
k[3]=0
k[4]=1
k[5]=0
k[6]=1
k[7]=0
k[8]=1
k[9]=1
*/
void T1_e57c3ae70b20efc9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=0
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=0
k[2]=1
k[30]=0
k[31]=0
k[3]=0
k[4]=0
k[5]=1
k[6]=1
k[7]=0
k[8]=1
k[9]=0
*/
void T1_066944439da8b839(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=1
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=0
k[4]=0
k[5]=0
k[6]=0
k[7]=1
k[8]=0
k[9]=1
*/
void T1_4e08e9ddf93befdd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=1
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=1
k[26]=1
k[27]=1
k[28]=0
k[29]=1
k[2]=0
k[30]=0
k[31]=0
k[3]=1
k[4]=1
k[5]=1
k[6]=0
k[7]=0
k[8]=1
k[9]=0
*/
void T1_6c0d0d1694fa6a01(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=0
k[20]=0
k[21]=1
k[22]=0
k[23]=0
k[24]=1
k[25]=0
k[26]=1
k[27]=1
k[28]=0
k[29]=0
k[2]=1
k[30]=1
k[31]=0
k[3]=1
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=0
*/
void T1_cf84c70702c35ee0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=0
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=1
k[25]=1
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=0
k[6]=0
k[7]=0
k[8]=1
k[9]=0
*/
void T1_2d871f123fd949c7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=1
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=1
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=0
k[6]=1
k[7]=0
k[8]=1
k[9]=1
*/
void T1_7edfba8eb8c786e6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=1
k[20]=0
k[21]=1
k[22]=1
k[23]=0
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=0
k[30]=1
k[31]=0
k[3]=1
k[4]=1
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=1
*/
void T1_94d3cf294512b35d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=1
k[15]=1
k[16]=0
k[17]=1
k[18]=0
k[19]=0
k[1]=1
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=0
k[28]=0
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=1
k[6]=0
k[7]=0
k[8]=1
k[9]=0
*/
void T1_89c1883ec1917e53(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=1
k[23]=0
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_9ddb2e6cc8609a6b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=1
k[16]=1
k[17]=1
k[18]=1
k[19]=1
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=0
k[29]=1
k[2]=0
k[30]=0
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_84690c3be2ee9695(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=0
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=0
k[29]=1
k[2]=0
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=0
k[8]=0
k[9]=1
*/
void T1_120873659e81098a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=1
k[23]=0
k[24]=0
k[25]=1
k[26]=0
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=0
k[8]=1
k[9]=1
*/
void T1_0f20a9e27f95149e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=1
k[13]=0
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=1
k[20]=0
k[21]=1
k[22]=1
k[23]=0
k[24]=1
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=1
k[8]=1
k[9]=0
*/
void T1_ca67810ece4fc41a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=1
k[16]=0
k[17]=1
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=1
k[4]=1
k[5]=0
k[6]=0
k[7]=0
k[8]=0
k[9]=0
*/
void T1_93f4a01d11e7872c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=0
k[20]=1
k[21]=0
k[22]=0
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=1
k[29]=0
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=1
k[6]=0
k[7]=0
k[8]=0
k[9]=1
*/
void T1_918281ebd0e946cd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=0
k[12]=1
k[13]=1
k[14]=0
k[15]=0
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=1
k[30]=1
k[31]=1
k[3]=0
k[4]=0
k[5]=0
k[6]=0
k[7]=1
k[8]=1
k[9]=0
*/
void T1_23798a58f46eb137(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=1
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=1
k[22]=1
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=0
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=0
k[8]=0
k[9]=0
*/
void T1_a95af91132716c5e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=0
k[14]=1
k[15]=1
k[16]=0
k[17]=0
k[18]=1
k[19]=0
k[1]=1
k[20]=0
k[21]=1
k[22]=0
k[23]=1
k[24]=1
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=1
k[30]=0
k[31]=0
k[3]=0
k[4]=1
k[5]=0
k[6]=0
k[7]=0
k[8]=1
k[9]=0
*/
void T1_800ec316d45df96e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=1
k[26]=1
k[27]=1
k[28]=1
k[29]=0
k[2]=0
k[30]=0
k[31]=0
k[3]=1
k[4]=0
k[5]=0
k[6]=0
k[7]=0
k[8]=0
k[9]=0
*/
void T1_236a82c6f755b144(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=0
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=1
k[23]=0
k[24]=1
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=0
k[8]=1
k[9]=1
*/
void T1_3aa1900078ca95e9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=1
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=0
k[18]=0
k[19]=0
k[1]=0
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=1
k[30]=0
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_9caf81e3535b2842(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=0
k[23]=0
k[24]=1
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=1
k[2]=0
k[30]=0
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=0
k[7]=1
k[8]=0
k[9]=0
*/
void T1_ae0cda1bbddcf65a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=0
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=1
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=0
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=0
k[8]=0
k[9]=1
*/
void T1_40797bb88411d4ed(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=1
k[12]=0
k[13]=0
k[14]=1
k[15]=1
k[16]=0
k[17]=0
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=0
k[22]=0
k[23]=1
k[24]=1
k[25]=1
k[26]=0
k[27]=1
k[28]=1
k[29]=0
k[2]=1
k[30]=1
k[31]=0
k[3]=1
k[4]=0
k[5]=0
k[6]=1
k[7]=0
k[8]=0
k[9]=1
*/
void T1_6dbf94dd961c0c50(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=0
k[21]=1
k[22]=0
k[23]=0
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=0
k[29]=1
k[2]=0
k[30]=1
k[31]=0
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_a471085107c1a1dd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=1
k[16]=1
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=0
k[21]=0
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=1
k[29]=1
k[2]=1
k[30]=1
k[31]=0
k[3]=1
k[4]=0
k[5]=1
k[6]=1
k[7]=1
k[8]=0
k[9]=1
*/
void T1_85730134c47c3959(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=1
k[17]=0
k[18]=1
k[19]=0
k[1]=1
k[20]=0
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=0
k[27]=1
k[28]=1
k[29]=1
k[2]=1
k[30]=1
k[31]=0
k[3]=1
k[4]=0
k[5]=1
k[6]=1
k[7]=0
k[8]=1
k[9]=1
*/
void T1_b756695fd7b93e18(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=0
k[19]=1
k[1]=0
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=0
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=1
k[5]=0
k[6]=0
k[7]=0
k[8]=0
k[9]=0
*/
void T1_b53112bd9c5cd799(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=0
k[12]=0
k[13]=0
k[14]=0
k[15]=0
k[16]=1
k[17]=1
k[18]=1
k[19]=0
k[1]=0
k[20]=0
k[21]=0
k[22]=1
k[23]=1
k[24]=0
k[25]=0
k[26]=1
k[27]=1
k[28]=0
k[29]=0
k[2]=0
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=0
k[6]=0
k[7]=0
k[8]=0
k[9]=1
*/
void T1_0a4fa791f9724012(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=1
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=1
k[16]=0
k[17]=1
k[18]=1
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=0
k[23]=1
k[24]=0
k[25]=0
k[26]=0
k[27]=0
k[28]=1
k[29]=0
k[2]=0
k[30]=0
k[31]=1
k[3]=1
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_98aa22bf9feb27c0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=1
k[11]=1
k[12]=0
k[13]=1
k[14]=1
k[15]=0
k[16]=0
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=1
k[21]=0
k[22]=1
k[23]=0
k[24]=0
k[25]=0
k[26]=1
k[27]=0
k[28]=0
k[29]=1
k[2]=0
k[30]=0
k[31]=1
k[3]=1
k[4]=0
k[5]=1
k[6]=1
k[7]=1
k[8]=0
k[9]=0
*/
void T1_0db6ea001063a22f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=1
k[10]=0
k[11]=0
k[12]=0
k[13]=1
k[14]=0
k[15]=1
k[16]=1
k[17]=0
k[18]=0
k[19]=1
k[1]=1
k[20]=1
k[21]=1
k[22]=1
k[23]=1
k[24]=0
k[25]=1
k[26]=1
k[27]=1
k[28]=1
k[29]=1
k[2]=1
k[30]=0
k[31]=1
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=1
k[9]=1
*/
void T1_f3e900e3ce9a0a29(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
T1
k[0]=0
k[10]=0
k[11]=1
k[12]=1
k[13]=1
k[14]=1
k[15]=0
k[16]=1
k[17]=0
k[18]=0
k[19]=0
k[1]=1
k[20]=1
k[21]=1
k[22]=1
k[23]=0
k[24]=0
k[25]=1
k[26]=1
k[27]=0
k[28]=0
k[29]=0
k[2]=0
k[30]=1
k[31]=1
k[3]=0
k[4]=1
k[5]=1
k[6]=1
k[7]=1
k[8]=0
k[9]=0
*/
void T1_80edd5314209decf(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement ki[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_11[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_19[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _e_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx_;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _f_sigIdx_;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _g_sigIdx_;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__1;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__1;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__1;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _h_sigIdx_;
    int _offset_45;
    int _compIdx_9;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_10;
    int _out_sigIdx_;
    int _offset_49;
    int _compIdx_11;
    int _in_sigIdx__4;
    int _offset_51;
    int _compIdx_12;
    int _out_sigIdx__1;
    int _offset_53;
    int _compIdx_13;
    int _in_sigIdx__5;
    int _offset_55;
    int _k_sigIdx_;
    int _offset_57;
    int _compIdx_14;
    int _in_sigIdx__6;
    int _offset_59;
    int _w_sigIdx_;
    int _offset_61;
    int _compIdx_15;
    int _out_sigIdx__2;
    int _offset_68;
    int _out_sigIdx__3;
    int _offset_70;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_e;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_f;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_g;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_h;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_k;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_w;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(ki[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_11[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_19[0]), ctx->circuit->constants +0);
    _e_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _f_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _g_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _h_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _k_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _w_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_e = ctx->getSignalSizes(__cIdx, 0xaf63d84c8601e5c0LL /* e */);
    _sigSizes_f = ctx->getSignalSizes(__cIdx, 0xaf63db4c8601ead9LL /* f */);
    _sigSizes_g = ctx->getSignalSizes(__cIdx, 0xaf63da4c8601e926LL /* g */);
    _sigSizes_h = ctx->getSignalSizes(__cIdx, 0xaf63e54c8601fbd7LL /* h */);
    _sigSizes_k = ctx->getSignalSizes(__cIdx, 0xaf63e64c8601fd8aLL /* k */);
    _sigSizes_w = ctx->getSignalSizes(__cIdx, 0xaf63ea4c86020456LL /* w */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input h[32] */
    /* signal input e[32] */
    /* signal input f[32] */
    /* signal input g[32] */
    /* signal input k[32] */
    /* signal input w[32] */
    /* signal output out[32] */
    /* var ki */
    /* component ch = Ch(32) */
    /* component bigsigma1 = BigSigma(6, 11, 25) */
    /* for (ki=0;ki<32;ki++) */
    /* bigsigma1.in[ki] <== e[ki] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* ch.a[ki] <== e[ki] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _a_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx_;
    _offset_9 = _e_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* ch.b[ki] <== f[ki] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _f_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* ch.c[ki] <== g[ki] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _g_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma1.in[ki] <== e[ki] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(ki)*_sigSizes_in_1[1];
        _offset_24 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* ch.a[ki] <== e[ki] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__1 + Fr_toInt(ki)*_sigSizes_a_1[1];
        _offset_28 = _e_sigIdx_ + Fr_toInt(ki)*_sigSizes_e[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* ch.b[ki] <== f[ki] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _b_sigIdx__1 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_1 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__1 + Fr_toInt(ki)*_sigSizes_b_1[1];
        _offset_32 = _f_sigIdx_ + Fr_toInt(ki)*_sigSizes_f[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* ch.c[ki] <== g[ki] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _c_sigIdx__1 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_1 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__1 + Fr_toInt(ki)*_sigSizes_c_1[1];
        _offset_36 = _g_sigIdx_ + Fr_toInt(ki)*_sigSizes_g[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, ki, 1);
        Fr_add(_tmp_4, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_4, 1);
        Fr_lt(_tmp_6, ki, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 5) */
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_11, 1);
    Fr_lt(_tmp_7, ki, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][ki] <== h[ki] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(ki)*_sigSizes_in_2[2];
        _offset_45 = _h_sigIdx_ + Fr_toInt(ki)*_sigSizes_h[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][ki] <== bigsigma1.out[ki] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_9, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(ki)*_sigSizes_in_3[2];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3743eabe4794d263LL /* bigsigma1 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx_ + Fr_toInt(ki)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_9, _offset_47, _sigValue_9);
        /* sum.in[2][ki] <== ch.out[ki] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_11, 0x08b73807b55c4bbeLL /* in */);
        _offset_51 = _in_sigIdx__4 + 2*_sigSizes_in_4[1] + Fr_toInt(ki)*_sigSizes_in_4[2];
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x08a25607b54a22aeLL /* ch */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_53 = _out_sigIdx__1 + Fr_toInt(ki)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_53, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_11, _offset_51, _sigValue_10);
        /* sum.in[3][ki] <== k[ki] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_13, 0x08b73807b55c4bbeLL /* in */);
        _offset_55 = _in_sigIdx__5 + 3*_sigSizes_in_5[1] + Fr_toInt(ki)*_sigSizes_in_5[2];
        _offset_57 = _k_sigIdx_ + Fr_toInt(ki)*_sigSizes_k[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_57, _sigValue_11, 1);
        ctx->setSignal(__cIdx, _compIdx_13, _offset_55, _sigValue_11);
        /* sum.in[4][ki] <== w[ki] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_14, 0x08b73807b55c4bbeLL /* in */);
        _offset_59 = _in_sigIdx__6 + 4*_sigSizes_in_6[1] + Fr_toInt(ki)*_sigSizes_in_6[2];
        _offset_61 = _w_sigIdx_ + Fr_toInt(ki)*_sigSizes_w[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_61, _sigValue_12, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_59, _sigValue_12);
        Fr_copyn(_tmp_9, ki, 1);
        Fr_add(_tmp_8, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_8, 1);
        Fr_lt(_tmp_10, ki, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (ki=0;ki<32;ki++) */
    Fr_copyn(ki, _num_19, 1);
    Fr_lt(_tmp_11, ki, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[ki] <== sum.out[ki] */
        _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_15, 0x19f79b1921bbcfffLL /* out */);
        _offset_68 = _out_sigIdx__2 + Fr_toInt(ki)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_15, _offset_68, _sigValue_13, 1);
        _offset_70 = _out_sigIdx__3 + Fr_toInt(ki)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_70, _sigValue_13);
        Fr_copyn(_tmp_13, ki, 1);
        Fr_add(_tmp_12, ki, (ctx->circuit->constants + 1));
        Fr_copyn(ki, _tmp_12, 1);
        Fr_lt(_tmp_14, ki, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
Ch
n=32
*/
void Ch_f12ac567294f268c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement _tmp_6[1];
    FrElement k[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_11[1];
    FrElement _tmp_10[1];
    FrElement _tmp_12[1];
    int _a_sigIdx_;
    int _offset_8;
    int _b_sigIdx_;
    int _offset_10;
    int _c_sigIdx_;
    int _offset_12;
    int _offset_14;
    int _out_sigIdx_;
    int _offset_16;
    int _offset_22;
    int _offset_24;
    int _offset_26;
    int _offset_28;
    int _offset_30;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[n] */
    /* signal input b[n] */
    /* signal input c[n] */
    /* signal output out[n] */
    /* for (var k=0;k<n;k++) */
    /* out[k] <== a[k] * (b[k]-c[k]) + c[k] */
    _offset_8 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_1, _sigValue_1, _sigValue_2);
    Fr_mul(_tmp_2, _sigValue, _tmp_1);
    _offset_14 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_14, _sigValue_3, 1);
    Fr_add(_tmp_3, _tmp_2, _sigValue_3);
    _offset_16 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_16, _tmp_3);
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* out[k] <== a[k] * (b[k]-c[k]) + c[k] */
        _offset_22 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_22, _sigValue_4, 1);
        _offset_24 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_5, 1);
        _offset_26 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_26, _sigValue_6, 1);
        Fr_sub(_tmp_7, _sigValue_5, _sigValue_6);
        Fr_mul(_tmp_8, _sigValue_4, _tmp_7);
        _offset_28 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_7, 1);
        Fr_add(_tmp_9, _tmp_8, _sigValue_7);
        _offset_30 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_30, _tmp_9);
        Fr_copyn(_tmp_11, k, 1);
        Fr_add(_tmp_10, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_10, 1);
        Fr_lt(_tmp_12, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_12;
    }
    ctx->finished(__cIdx);
}
/*
BigSigma
ra=6
rb=11
rc=25
*/
void BigSigma_ce08158f12f8ca02(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_9[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in_sigIdx__1;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__2;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _in_sigIdx__3;
    int _offset_11;
    int _offset_13;
    int _compIdx_3;
    int _in_sigIdx__4;
    int _offset_18;
    int _offset_20;
    int _compIdx_4;
    int _in_sigIdx__5;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _in_sigIdx__6;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _a_sigIdx_;
    int _offset_35;
    int _compIdx_7;
    int _out_sigIdx_;
    int _offset_37;
    int _compIdx_8;
    int _b_sigIdx_;
    int _offset_39;
    int _compIdx_9;
    int _out_sigIdx__1;
    int _offset_41;
    int _compIdx_10;
    int _c_sigIdx_;
    int _offset_43;
    int _compIdx_11;
    int _out_sigIdx__2;
    int _offset_45;
    int _compIdx_12;
    int _out_sigIdx__3;
    int _offset_52;
    int _out_sigIdx__4;
    int _offset_54;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_out_4;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_6[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx__4 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in_1 = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out_4 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[32] */
    /* signal output out[32] */
    /* var k */
    /* component rota = RotR(32, ra) */
    /* component rotb = RotR(32, rb) */
    /* component rotc = RotR(32, rc) */
    /* for (k=0;k<32;k++) */
    /* rota.in[k] <== in[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* rotb.in[k] <== in[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__2;
    _offset_9 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* rotc.in[k] <== in[k] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
    _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__3;
    _offset_13 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* rota.in[k] <== in[k] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[1];
        _offset_20 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_3, _offset_18, _sigValue_3);
        /* rotb.in[k] <== in[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__5 + Fr_toInt(k)*_sigSizes_in_5[1];
        _offset_24 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* rotc.in[k] <== in[k] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _offset_26 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[1];
        _offset_28 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component xor3 = Xor3(32) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_6, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* xor3.a[k] <== rota.out[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _a_sigIdx_ = ctx->getSignalOffset(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a = ctx->getSignalSizes(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_35 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _offset_37 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_7, _offset_37, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_35, _sigValue_6);
        /* xor3.b[k] <== rotb.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _b_sigIdx_ = ctx->getSignalOffset(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b = ctx->getSignalSizes(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _offset_39 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_41 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_41, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_39, _sigValue_7);
        /* xor3.c[k] <== rotc.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _c_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c = ctx->getSignalSizes(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _offset_43 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_45 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_10, _offset_43, _sigValue_8);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== xor3.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_52 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_52, _sigValue_9, 1);
        _offset_54 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_54, _sigValue_9);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=6
*/
void RotR_9c4beb1ab7c5d311(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 6*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 38));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=11
*/
void RotR_5ad726664528dc4f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 11*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 41));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=25
*/
void RotR_5ae1326645314538(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 25*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 43));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Xor3
n=32
*/
void Xor3_37e328446dad7003(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_4[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_10[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _tmp_15[1];
    FrElement k[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_16[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_17[1];
    FrElement _tmp_18[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_19[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_14[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _tmp_23[1];
    FrElement _sigValue_15[1];
    FrElement _tmp_24[1];
    FrElement _sigValue_16[1];
    FrElement _tmp_25[1];
    FrElement _sigValue_17[1];
    FrElement _tmp_26[1];
    FrElement _tmp_27[1];
    FrElement _tmp_29[1];
    FrElement _tmp_28[1];
    FrElement _tmp_30[1];
    int _b_sigIdx_;
    int _offset_9;
    int _c_sigIdx_;
    int _offset_11;
    int _mid_sigIdx_;
    int _offset_13;
    int _a_sigIdx_;
    int _offset_15;
    int _offset_17;
    int _offset_19;
    int _offset_21;
    int _offset_23;
    int _offset_25;
    int _offset_27;
    int _out_sigIdx_;
    int _offset_29;
    int _offset_35;
    int _offset_37;
    int _offset_39;
    int _offset_41;
    int _offset_43;
    int _offset_45;
    int _offset_47;
    int _offset_49;
    int _offset_51;
    int _offset_53;
    int _offset_55;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_mid;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_15[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _mid_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x07f43d1917563645LL /* mid */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_mid = ctx->getSignalSizes(__cIdx, 0x07f43d1917563645LL /* mid */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[n] */
    /* signal input b[n] */
    /* signal input c[n] */
    /* signal output out[n] */
    /* signal mid[n] */
    /* for (var k=0;k<n;k++) */
    /* mid[k] <== b[k]*c[k] */
    _offset_9 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue, 1);
    _offset_11 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_11, _sigValue_1, 1);
    Fr_mul(_tmp_1, _sigValue, _sigValue_1);
    _offset_13 = _mid_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_13, _tmp_1);
    /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
    _offset_15 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_2, 1);
    _offset_17 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    Fr_mul(_tmp_2, (ctx->circuit->constants + 2), _sigValue_3);
    Fr_sub(_tmp_3, (ctx->circuit->constants + 1), _tmp_2);
    _offset_19 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_19, _sigValue_4, 1);
    Fr_mul(_tmp_4, (ctx->circuit->constants + 2), _sigValue_4);
    Fr_sub(_tmp_5, _tmp_3, _tmp_4);
    _offset_21 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_21, _sigValue_5, 1);
    Fr_mul(_tmp_6, (ctx->circuit->constants + 119), _sigValue_5);
    Fr_add(_tmp_7, _tmp_5, _tmp_6);
    Fr_mul(_tmp_8, _sigValue_2, _tmp_7);
    _offset_23 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_6, 1);
    Fr_add(_tmp_9, _tmp_8, _sigValue_6);
    _offset_25 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_25, _sigValue_7, 1);
    Fr_add(_tmp_10, _tmp_9, _sigValue_7);
    _offset_27 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_27, _sigValue_8, 1);
    Fr_mul(_tmp_11, (ctx->circuit->constants + 2), _sigValue_8);
    Fr_sub(_tmp_12, _tmp_10, _tmp_11);
    _offset_29 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_29, _tmp_12);
    _loopCond = _tmp_15;
    while (Fr_isTrue(_loopCond)) {
        /* mid[k] <== b[k]*c[k] */
        _offset_35 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_35, _sigValue_9, 1);
        _offset_37 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_37, _sigValue_10, 1);
        Fr_mul(_tmp_16, _sigValue_9, _sigValue_10);
        _offset_39 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_39, _tmp_16);
        /* out[k] <== a[k] * (1 -2*b[k]  -2*c[k] +4*mid[k]) + b[k] + c[k] -2*mid[k] */
        _offset_41 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_41, _sigValue_11, 1);
        _offset_43 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_43, _sigValue_12, 1);
        Fr_mul(_tmp_17, (ctx->circuit->constants + 2), _sigValue_12);
        Fr_sub(_tmp_18, (ctx->circuit->constants + 1), _tmp_17);
        _offset_45 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_13, 1);
        Fr_mul(_tmp_19, (ctx->circuit->constants + 2), _sigValue_13);
        Fr_sub(_tmp_20, _tmp_18, _tmp_19);
        _offset_47 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_47, _sigValue_14, 1);
        Fr_mul(_tmp_21, (ctx->circuit->constants + 119), _sigValue_14);
        Fr_add(_tmp_22, _tmp_20, _tmp_21);
        Fr_mul(_tmp_23, _sigValue_11, _tmp_22);
        _offset_49 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_49, _sigValue_15, 1);
        Fr_add(_tmp_24, _tmp_23, _sigValue_15);
        _offset_51 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_16, 1);
        Fr_add(_tmp_25, _tmp_24, _sigValue_16);
        _offset_53 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_53, _sigValue_17, 1);
        Fr_mul(_tmp_26, (ctx->circuit->constants + 2), _sigValue_17);
        Fr_sub(_tmp_27, _tmp_25, _tmp_26);
        _offset_55 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_55, _tmp_27);
        Fr_copyn(_tmp_29, k, 1);
        Fr_add(_tmp_28, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_28, 1);
        Fr_lt(_tmp_30, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_30;
    }
    ctx->finished(__cIdx);
}
/*
BinSum
n=32
ops=5
*/
void BinSum_759fd5ac955f31f1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lin[1];
    FrElement _tmp_9[1];
    FrElement j[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _tmp_18[1];
    FrElement k[1];
    FrElement e2[1];
    FrElement _num_7[1];
    FrElement _tmp_19[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_23[1];
    FrElement _tmp_22[1];
    FrElement _tmp_24[1];
    FrElement _tmp_25[1];
    FrElement _tmp_27[1];
    FrElement _tmp_26[1];
    FrElement _tmp_28[1];
    FrElement _num_8[1];
    FrElement _num_9[1];
    FrElement _tmp_29[1];
    FrElement lout[1];
    FrElement _tmp_30[1];
    FrElement _tmp_31[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_32[1];
    FrElement _tmp_33[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_34[1];
    FrElement _tmp_35[1];
    FrElement _tmp_36[1];
    FrElement _tmp_38[1];
    FrElement _tmp_37[1];
    FrElement _tmp_39[1];
    int _in_sigIdx_;
    int _offset_18;
    int _offset_28;
    int _offset_48;
    int _out_sigIdx_;
    int _offset_69;
    int _offset_71;
    int _offset_73;
    int _offset_76;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    Fr_copy(&(_tmp_9[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_18[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    Fr_copy(&(_num_7[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_8[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    Fr_copy(&(lout[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* var nout = nbits((2**n -1)*ops) */
    /* signal input in[ops][n] */
    /* signal output out[nout] */
    /* var lin = 0 */
    /* var lout = 0 */
    /* var k */
    /* var j */
    /* var e2 */
    /* e2 = 1 */
    /* for (k=0;k<n;k++) */
    /* for (j=0;j<ops;j++) */
    /* lin += in[j][k] * e2 */
    _offset_18 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue, 1);
    Fr_mul(_tmp_5, _sigValue, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lin, _tmp_6, 1);
    _loopCond = _tmp_9;
    while (Fr_isTrue(_loopCond)) {
        /* lin += in[j][k] * e2 */
        _offset_28 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_1, 1);
        Fr_mul(_tmp_10, _sigValue_1, (ctx->circuit->constants + 1));
        Fr_add(_tmp_11, lin, _tmp_10);
        Fr_copyn(lin, _tmp_11, 1);
        Fr_copyn(_tmp_13, j, 1);
        Fr_add(_tmp_12, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_12, 1);
        Fr_lt(_tmp_14, j, (ctx->circuit->constants + 121));
        _loopCond = _tmp_14;
    }
    /* e2 = e2 + e2 */
    _loopCond_1 = _tmp_18;
    while (Fr_isTrue(_loopCond_1)) {
        /* for (j=0;j<ops;j++) */
        Fr_copyn(j, _num_7, 1);
        Fr_lt(_tmp_19, j, (ctx->circuit->constants + 121));
        _loopCond_2 = _tmp_19;
        while (Fr_isTrue(_loopCond_2)) {
            /* lin += in[j][k] * e2 */
            _offset_48 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1] + Fr_toInt(k)*_sigSizes_in[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_48, _sigValue_2, 1);
            Fr_mul(_tmp_20, _sigValue_2, e2);
            Fr_add(_tmp_21, lin, _tmp_20);
            Fr_copyn(lin, _tmp_21, 1);
            Fr_copyn(_tmp_23, j, 1);
            Fr_add(_tmp_22, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_22, 1);
            Fr_lt(_tmp_24, j, (ctx->circuit->constants + 121));
            _loopCond_2 = _tmp_24;
        }
        /* e2 = e2 + e2 */
        Fr_add(_tmp_25, e2, e2);
        Fr_copyn(e2, _tmp_25, 1);
        Fr_copyn(_tmp_27, k, 1);
        Fr_add(_tmp_26, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_26, 1);
        Fr_lt(_tmp_28, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_28;
    }
    /* e2 = 1 */
    Fr_copyn(e2, _num_8, 1);
    /* for (k=0;k<nout;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_29, k, (ctx->circuit->constants + 122));
    _loopCond_3 = _tmp_29;
    while (Fr_isTrue(_loopCond_3)) {
        /* out[k] <-- (lin >> k) & 1 */
        Fr_shr(_tmp_30, lin, k);
        Fr_band(_tmp_31, _tmp_30, (ctx->circuit->constants + 1));
        _offset_69 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_69, _tmp_31);
        /* out[k] * (out[k] - 1) === 0 */
        _offset_71 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_71, _sigValue_3, 1);
        _offset_73 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_73, _sigValue_4, 1);
        Fr_sub(_tmp_32, _sigValue_4, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_33, _sigValue_3, _tmp_32);
        ctx->checkConstraint(__cIdx, _tmp_33, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:90:8");
        /* lout += out[k] * e2 */
        _offset_76 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_76, _sigValue_5, 1);
        Fr_mul(_tmp_34, _sigValue_5, e2);
        Fr_add(_tmp_35, lout, _tmp_34);
        Fr_copyn(lout, _tmp_35, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_36, e2, e2);
        Fr_copyn(e2, _tmp_36, 1);
        Fr_copyn(_tmp_38, k, 1);
        Fr_add(_tmp_37, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_37, 1);
        Fr_lt(_tmp_39, k, (ctx->circuit->constants + 122));
        _loopCond_3 = _tmp_39;
    }
    /* lin === lout */
    ctx->checkConstraint(__cIdx, lin, lout, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:99:4");
    ctx->finished(__cIdx);
}
/*
T2
*/
void T2_0934fe07b5c72e43(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_8[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_13[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _a_sigIdx_;
    int _offset_5;
    int _compIdx_1;
    int _a_sigIdx__1;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _b_sigIdx_;
    int _offset_11;
    int _b_sigIdx__1;
    int _offset_13;
    int _compIdx_3;
    int _c_sigIdx_;
    int _offset_15;
    int _c_sigIdx__1;
    int _offset_17;
    int _compIdx_4;
    int _in_sigIdx__1;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _a_sigIdx__2;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _b_sigIdx__2;
    int _offset_30;
    int _offset_32;
    int _compIdx_7;
    int _c_sigIdx__2;
    int _offset_34;
    int _offset_36;
    int _compIdx_8;
    int _in_sigIdx__2;
    int _offset_43;
    int _compIdx_9;
    int _out_sigIdx_;
    int _offset_45;
    int _compIdx_10;
    int _in_sigIdx__3;
    int _offset_47;
    int _compIdx_11;
    int _out_sigIdx__1;
    int _offset_49;
    int _compIdx_12;
    int _out_sigIdx__2;
    int _offset_56;
    int _out_sigIdx__3;
    int _offset_58;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_a_1;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_b_1;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_c_1;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_a_2;
    Circom_Sizes _sigSizes_b_2;
    Circom_Sizes _sigSizes_c_2;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_8[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_13[0]), ctx->circuit->constants +0);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _b_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _out_sigIdx__3 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_b_1 = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c_1 = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_out_3 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[32] */
    /* signal input b[32] */
    /* signal input c[32] */
    /* signal output out[32] */
    /* var k */
    /* component bigsigma0 = BigSigma(2, 13, 22) */
    /* component maj = Maj(32) */
    /* for (k=0;k<32;k++) */
    /* bigsigma0.in[k] <== a[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3743e9be4794d0b0LL /* bigsigma0 */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* maj.a[k] <== a[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
    _a_sigIdx__1 = ctx->getSignalOffset(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_a_1 = ctx->getSignalSizes(_compIdx_1, 0xaf63dc4c8601ec8cLL /* a */);
    _offset_7 = _a_sigIdx__1;
    _offset_9 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* maj.b[k] <== b[k] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
    _b_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_b = ctx->getSignalSizes(_compIdx_2, 0xaf63df4c8601f1a5LL /* b */);
    _offset_11 = _b_sigIdx_;
    _offset_13 = _b_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    /* maj.c[k] <== c[k] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
    _c_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_c = ctx->getSignalSizes(_compIdx_3, 0xaf63de4c8601eff2LL /* c */);
    _offset_15 = _c_sigIdx_;
    _offset_17 = _c_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_15, _sigValue_3);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* bigsigma0.in[k] <== a[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3743e9be4794d0b0LL /* bigsigma0 */);
        _in_sigIdx__1 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        _offset_24 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* maj.a[k] <== a[k] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
        _a_sigIdx__2 = ctx->getSignalOffset(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a_2 = ctx->getSignalSizes(_compIdx_5, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_26 = _a_sigIdx__2 + Fr_toInt(k)*_sigSizes_a_2[1];
        _offset_28 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        /* maj.b[k] <== b[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
        _b_sigIdx__2 = ctx->getSignalOffset(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b_2 = ctx->getSignalSizes(_compIdx_6, 0xaf63df4c8601f1a5LL /* b */);
        _offset_30 = _b_sigIdx__2 + Fr_toInt(k)*_sigSizes_b_2[1];
        _offset_32 = _b_sigIdx__1 + Fr_toInt(k)*_sigSizes_b_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_32, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_30, _sigValue_6);
        /* maj.c[k] <== c[k] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
        _c_sigIdx__2 = ctx->getSignalOffset(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c_2 = ctx->getSignalSizes(_compIdx_7, 0xaf63de4c8601eff2LL /* c */);
        _offset_34 = _c_sigIdx__2 + Fr_toInt(k)*_sigSizes_c_2[1];
        _offset_36 = _c_sigIdx__1 + Fr_toInt(k)*_sigSizes_c_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_36, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_7, _offset_34, _sigValue_7);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component sum = BinSum(32, 2) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_8, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* sum.in[0][k] <== bigsigma0.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_8, 0x08b73807b55c4bbeLL /* in */);
        _offset_43 = _in_sigIdx__2 + Fr_toInt(k)*_sigSizes_in_2[2];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x3743e9be4794d0b0LL /* bigsigma0 */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_45 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_43, _sigValue_8);
        /* sum.in[1][k] <== maj.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_10, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_10, 0x08b73807b55c4bbeLL /* in */);
        _offset_47 = _in_sigIdx__3 + 1*_sigSizes_in_3[1] + Fr_toInt(k)*_sigSizes_in_3[2];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x080f5f19176d37c3LL /* maj */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_49 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_49, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_10, _offset_47, _sigValue_9);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_13, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== sum.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x82719e195d0fc4a8LL /* sum */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_56 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_56, _sigValue_10, 1);
        _offset_58 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_58, _sigValue_10);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
BigSigma
ra=2
rb=13
rc=22
*/
void BigSigma_5aced577deb57d11(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement k[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _num_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _num_9[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in_sigIdx__1;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__2;
    int _offset_7;
    int _offset_9;
    int _compIdx_2;
    int _in_sigIdx__3;
    int _offset_11;
    int _offset_13;
    int _compIdx_3;
    int _in_sigIdx__4;
    int _offset_18;
    int _offset_20;
    int _compIdx_4;
    int _in_sigIdx__5;
    int _offset_22;
    int _offset_24;
    int _compIdx_5;
    int _in_sigIdx__6;
    int _offset_26;
    int _offset_28;
    int _compIdx_6;
    int _a_sigIdx_;
    int _offset_35;
    int _compIdx_7;
    int _out_sigIdx_;
    int _offset_37;
    int _compIdx_8;
    int _b_sigIdx_;
    int _offset_39;
    int _compIdx_9;
    int _out_sigIdx__1;
    int _offset_41;
    int _compIdx_10;
    int _c_sigIdx_;
    int _offset_43;
    int _compIdx_11;
    int _out_sigIdx__2;
    int _offset_45;
    int _compIdx_12;
    int _out_sigIdx__3;
    int _offset_52;
    int _out_sigIdx__4;
    int _offset_54;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_out_4;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_6[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx__4 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in_1 = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out_4 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[32] */
    /* signal output out[32] */
    /* var k */
    /* component rota = RotR(32, ra) */
    /* component rotb = RotR(32, rb) */
    /* component rotc = RotR(32, rc) */
    /* for (k=0;k<32;k++) */
    /* rota.in[k] <== in[k] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    /* rotb.in[k] <== in[k] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__2;
    _offset_9 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_7, _sigValue_1);
    /* rotc.in[k] <== in[k] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
    _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__3;
    _offset_13 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_11, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* rota.in[k] <== in[k] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _in_sigIdx__4 = ctx->getSignalOffset(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_compIdx_3, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__4 + Fr_toInt(k)*_sigSizes_in_4[1];
        _offset_20 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_3, _offset_18, _sigValue_3);
        /* rotb.in[k] <== in[k] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _in_sigIdx__5 = ctx->getSignalOffset(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_5 = ctx->getSignalSizes(_compIdx_4, 0x08b73807b55c4bbeLL /* in */);
        _offset_22 = _in_sigIdx__5 + Fr_toInt(k)*_sigSizes_in_5[1];
        _offset_24 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_24, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_22, _sigValue_4);
        /* rotc.in[k] <== in[k] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
        _in_sigIdx__6 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_6 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _offset_26 = _in_sigIdx__6 + Fr_toInt(k)*_sigSizes_in_6[1];
        _offset_28 = _in_sigIdx__1 + Fr_toInt(k)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_26, _sigValue_5);
        Fr_copyn(_tmp_5, k, 1);
        Fr_add(_tmp_4, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_4, 1);
        Fr_lt(_tmp_6, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_6;
    }
    /* component xor3 = Xor3(32) */
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_6, 1);
    Fr_lt(_tmp_7, k, (ctx->circuit->constants + 9));
    _loopCond_1 = _tmp_7;
    while (Fr_isTrue(_loopCond_1)) {
        /* xor3.a[k] <== rota.out[k] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _a_sigIdx_ = ctx->getSignalOffset(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _sigSizes_a = ctx->getSignalSizes(_compIdx_6, 0xaf63dc4c8601ec8cLL /* a */);
        _offset_35 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0xa3aa001ff10cacddLL /* rota */);
        _out_sigIdx_ = ctx->getSignalOffset(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out = ctx->getSignalSizes(_compIdx_7, 0x19f79b1921bbcfffLL /* out */);
        _offset_37 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, _compIdx_7, _offset_37, _sigValue_6, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_35, _sigValue_6);
        /* xor3.b[k] <== rotb.out[k] */
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _b_sigIdx_ = ctx->getSignalOffset(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _sigSizes_b = ctx->getSignalSizes(_compIdx_8, 0xaf63df4c8601f1a5LL /* b */);
        _offset_39 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fd1ff10ca7c4LL /* rotb */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_9, 0x19f79b1921bbcfffLL /* out */);
        _offset_41 = _out_sigIdx__1 + Fr_toInt(k)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_9, _offset_41, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _compIdx_8, _offset_39, _sigValue_7);
        /* xor3.c[k] <== rotc.out[k] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _c_sigIdx_ = ctx->getSignalOffset(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _sigSizes_c = ctx->getSignalSizes(_compIdx_10, 0xaf63de4c8601eff2LL /* c */);
        _offset_43 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0xa3a9fe1ff10ca977LL /* rotc */);
        _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_11, 0x19f79b1921bbcfffLL /* out */);
        _offset_45 = _out_sigIdx__2 + Fr_toInt(k)*_sigSizes_out_2[1];
        ctx->multiGetSignal(__cIdx, _compIdx_11, _offset_45, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _compIdx_10, _offset_43, _sigValue_8);
        Fr_copyn(_tmp_9, k, 1);
        Fr_add(_tmp_8, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_8, 1);
        Fr_lt(_tmp_10, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_10;
    }
    /* for (k=0;k<32;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_11, k, (ctx->circuit->constants + 9));
    _loopCond_2 = _tmp_11;
    while (Fr_isTrue(_loopCond_2)) {
        /* out[k] <== xor3.out[k] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x946fae5455aa7817LL /* xor3 */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_12, 0x19f79b1921bbcfffLL /* out */);
        _offset_52 = _out_sigIdx__3 + Fr_toInt(k)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_12, _offset_52, _sigValue_9, 1);
        _offset_54 = _out_sigIdx__4 + Fr_toInt(k)*_sigSizes_out_4[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_54, _sigValue_9);
        Fr_copyn(_tmp_13, k, 1);
        Fr_add(_tmp_12, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_12, 1);
        Fr_lt(_tmp_14, k, (ctx->circuit->constants + 9));
        _loopCond_2 = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=2
*/
void RotR_9c4bef1ab7c5d9dd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 2*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 2));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=13
*/
void RotR_5ad728664528dfb5(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 13*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 47));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
RotR
n=32
r=22
*/
void RotR_5ae139664531511d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _tmp_6[1];
    FrElement _tmp_7[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_8;
    int _out_sigIdx_;
    int _offset_10;
    int _offset_18;
    int _offset_20;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[n] */
    /* signal output out[n] */
    /* for (var i=0;i<n;i++) */
    /* out[i] <== in[ (i+r)%n ] */
    _offset_8 = _in_sigIdx_ + 22*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    _offset_10 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_10, _sigValue);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[ (i+r)%n ] */
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 48));
        Fr_mod(_tmp_7, _tmp_6, (ctx->circuit->constants + 9));
        _offset_18 = _in_sigIdx_ + Fr_toInt(_tmp_7)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue_1, 1);
        _offset_20 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_20, _sigValue_1);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Maj
n=32
*/
void Maj_a3eb3d9b89a89987(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_6[1];
    FrElement _tmp_9[1];
    FrElement k[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_10[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_12[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_15[1];
    FrElement _tmp_17[1];
    FrElement _tmp_16[1];
    FrElement _tmp_18[1];
    int _b_sigIdx_;
    int _offset_9;
    int _c_sigIdx_;
    int _offset_11;
    int _mid_sigIdx_;
    int _offset_13;
    int _a_sigIdx_;
    int _offset_15;
    int _offset_17;
    int _offset_19;
    int _offset_21;
    int _offset_23;
    int _out_sigIdx_;
    int _offset_25;
    int _offset_31;
    int _offset_33;
    int _offset_35;
    int _offset_37;
    int _offset_39;
    int _offset_41;
    int _offset_43;
    int _offset_45;
    int _offset_47;
    Circom_Sizes _sigSizes_b;
    Circom_Sizes _sigSizes_c;
    Circom_Sizes _sigSizes_mid;
    Circom_Sizes _sigSizes_a;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_9[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    _b_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _c_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _mid_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x07f43d1917563645LL /* mid */);
    _a_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_b = ctx->getSignalSizes(__cIdx, 0xaf63df4c8601f1a5LL /* b */);
    _sigSizes_c = ctx->getSignalSizes(__cIdx, 0xaf63de4c8601eff2LL /* c */);
    _sigSizes_mid = ctx->getSignalSizes(__cIdx, 0x07f43d1917563645LL /* mid */);
    _sigSizes_a = ctx->getSignalSizes(__cIdx, 0xaf63dc4c8601ec8cLL /* a */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input a[n] */
    /* signal input b[n] */
    /* signal input c[n] */
    /* signal output out[n] */
    /* signal mid[n] */
    /* for (var k=0;k<n;k++) */
    /* mid[k] <== b[k]*c[k] */
    _offset_9 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_9, _sigValue, 1);
    _offset_11 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_11, _sigValue_1, 1);
    Fr_mul(_tmp_1, _sigValue, _sigValue_1);
    _offset_13 = _mid_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_13, _tmp_1);
    /* out[k] <== a[k] * (b[k]+c[k]-2*mid[k]) + mid[k] */
    _offset_15 = _a_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_2, 1);
    _offset_17 = _b_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_3, 1);
    _offset_19 = _c_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_19, _sigValue_4, 1);
    Fr_add(_tmp_2, _sigValue_3, _sigValue_4);
    _offset_21 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_21, _sigValue_5, 1);
    Fr_mul(_tmp_3, (ctx->circuit->constants + 2), _sigValue_5);
    Fr_sub(_tmp_4, _tmp_2, _tmp_3);
    Fr_mul(_tmp_5, _sigValue_2, _tmp_4);
    _offset_23 = _mid_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_6, 1);
    Fr_add(_tmp_6, _tmp_5, _sigValue_6);
    _offset_25 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_25, _tmp_6);
    _loopCond = _tmp_9;
    while (Fr_isTrue(_loopCond)) {
        /* mid[k] <== b[k]*c[k] */
        _offset_31 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_7, 1);
        _offset_33 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_33, _sigValue_8, 1);
        Fr_mul(_tmp_10, _sigValue_7, _sigValue_8);
        _offset_35 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_35, _tmp_10);
        /* out[k] <== a[k] * (b[k]+c[k]-2*mid[k]) + mid[k] */
        _offset_37 = _a_sigIdx_ + Fr_toInt(k)*_sigSizes_a[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_37, _sigValue_9, 1);
        _offset_39 = _b_sigIdx_ + Fr_toInt(k)*_sigSizes_b[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_39, _sigValue_10, 1);
        _offset_41 = _c_sigIdx_ + Fr_toInt(k)*_sigSizes_c[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_41, _sigValue_11, 1);
        Fr_add(_tmp_11, _sigValue_10, _sigValue_11);
        _offset_43 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_43, _sigValue_12, 1);
        Fr_mul(_tmp_12, (ctx->circuit->constants + 2), _sigValue_12);
        Fr_sub(_tmp_13, _tmp_11, _tmp_12);
        Fr_mul(_tmp_14, _sigValue_9, _tmp_13);
        _offset_45 = _mid_sigIdx_ + Fr_toInt(k)*_sigSizes_mid[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_45, _sigValue_13, 1);
        Fr_add(_tmp_15, _tmp_14, _sigValue_13);
        _offset_47 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_47, _tmp_15);
        Fr_copyn(_tmp_17, k, 1);
        Fr_add(_tmp_16, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_16, 1);
        Fr_lt(_tmp_18, k, (ctx->circuit->constants + 9));
        _loopCond = _tmp_18;
    }
    ctx->finished(__cIdx);
}
/*
BinSum
n=32
ops=2
*/
void BinSum_759fd6ac955f33a4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lin[1];
    FrElement _tmp_9[1];
    FrElement j[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    FrElement _tmp_18[1];
    FrElement k[1];
    FrElement e2[1];
    FrElement _num_7[1];
    FrElement _tmp_19[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_23[1];
    FrElement _tmp_22[1];
    FrElement _tmp_24[1];
    FrElement _tmp_25[1];
    FrElement _tmp_27[1];
    FrElement _tmp_26[1];
    FrElement _tmp_28[1];
    FrElement _num_8[1];
    FrElement _num_9[1];
    FrElement _tmp_29[1];
    FrElement lout[1];
    FrElement _tmp_30[1];
    FrElement _tmp_31[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_32[1];
    FrElement _tmp_33[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_34[1];
    FrElement _tmp_35[1];
    FrElement _tmp_36[1];
    FrElement _tmp_38[1];
    FrElement _tmp_37[1];
    FrElement _tmp_39[1];
    int _in_sigIdx_;
    int _offset_18;
    int _offset_28;
    int _offset_48;
    int _out_sigIdx_;
    int _offset_69;
    int _offset_71;
    int _offset_73;
    int _offset_76;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    Fr_copy(&(_tmp_9[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_18[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    Fr_copy(&(_num_7[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_8[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_9[0]), ctx->circuit->constants +0);
    Fr_copy(&(lout[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* var nout = nbits((2**n -1)*ops) */
    /* signal input in[ops][n] */
    /* signal output out[nout] */
    /* var lin = 0 */
    /* var lout = 0 */
    /* var k */
    /* var j */
    /* var e2 */
    /* e2 = 1 */
    /* for (k=0;k<n;k++) */
    /* for (j=0;j<ops;j++) */
    /* lin += in[j][k] * e2 */
    _offset_18 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_18, _sigValue, 1);
    Fr_mul(_tmp_5, _sigValue, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lin, _tmp_6, 1);
    _loopCond = _tmp_9;
    while (Fr_isTrue(_loopCond)) {
        /* lin += in[j][k] * e2 */
        _offset_28 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_28, _sigValue_1, 1);
        Fr_mul(_tmp_10, _sigValue_1, (ctx->circuit->constants + 1));
        Fr_add(_tmp_11, lin, _tmp_10);
        Fr_copyn(lin, _tmp_11, 1);
        Fr_copyn(_tmp_13, j, 1);
        Fr_add(_tmp_12, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_12, 1);
        Fr_lt(_tmp_14, j, (ctx->circuit->constants + 2));
        _loopCond = _tmp_14;
    }
    /* e2 = e2 + e2 */
    _loopCond_1 = _tmp_18;
    while (Fr_isTrue(_loopCond_1)) {
        /* for (j=0;j<ops;j++) */
        Fr_copyn(j, _num_7, 1);
        Fr_lt(_tmp_19, j, (ctx->circuit->constants + 2));
        _loopCond_2 = _tmp_19;
        while (Fr_isTrue(_loopCond_2)) {
            /* lin += in[j][k] * e2 */
            _offset_48 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1] + Fr_toInt(k)*_sigSizes_in[2];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_48, _sigValue_2, 1);
            Fr_mul(_tmp_20, _sigValue_2, e2);
            Fr_add(_tmp_21, lin, _tmp_20);
            Fr_copyn(lin, _tmp_21, 1);
            Fr_copyn(_tmp_23, j, 1);
            Fr_add(_tmp_22, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_22, 1);
            Fr_lt(_tmp_24, j, (ctx->circuit->constants + 2));
            _loopCond_2 = _tmp_24;
        }
        /* e2 = e2 + e2 */
        Fr_add(_tmp_25, e2, e2);
        Fr_copyn(e2, _tmp_25, 1);
        Fr_copyn(_tmp_27, k, 1);
        Fr_add(_tmp_26, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_26, 1);
        Fr_lt(_tmp_28, k, (ctx->circuit->constants + 9));
        _loopCond_1 = _tmp_28;
    }
    /* e2 = 1 */
    Fr_copyn(e2, _num_8, 1);
    /* for (k=0;k<nout;k++) */
    Fr_copyn(k, _num_9, 1);
    Fr_lt(_tmp_29, k, (ctx->circuit->constants + 123));
    _loopCond_3 = _tmp_29;
    while (Fr_isTrue(_loopCond_3)) {
        /* out[k] <-- (lin >> k) & 1 */
        Fr_shr(_tmp_30, lin, k);
        Fr_band(_tmp_31, _tmp_30, (ctx->circuit->constants + 1));
        _offset_69 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_69, _tmp_31);
        /* out[k] * (out[k] - 1) === 0 */
        _offset_71 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_71, _sigValue_3, 1);
        _offset_73 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_73, _sigValue_4, 1);
        Fr_sub(_tmp_32, _sigValue_4, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_33, _sigValue_3, _tmp_32);
        ctx->checkConstraint(__cIdx, _tmp_33, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:90:8");
        /* lout += out[k] * e2 */
        _offset_76 = _out_sigIdx_ + Fr_toInt(k)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_76, _sigValue_5, 1);
        Fr_mul(_tmp_34, _sigValue_5, e2);
        Fr_add(_tmp_35, lout, _tmp_34);
        Fr_copyn(lout, _tmp_35, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_36, e2, e2);
        Fr_copyn(e2, _tmp_36, 1);
        Fr_copyn(_tmp_38, k, 1);
        Fr_add(_tmp_37, k, (ctx->circuit->constants + 1));
        Fr_copyn(k, _tmp_37, 1);
        Fr_lt(_tmp_39, k, (ctx->circuit->constants + 123));
        _loopCond_3 = _tmp_39;
    }
    /* lin === lout */
    ctx->checkConstraint(__cIdx, lin, lout, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/binsum.circom:99:4");
    ctx->finished(__cIdx);
}
/*
Num2Bits_strict
*/
void Num2Bits_strict_5667b5c710c0be5d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    int _compIdx;
    int _in_sigIdx_;
    int _in_sigIdx__1;
    int _compIdx_1;
    int _out_sigIdx_;
    int _offset_3;
    int _out_sigIdx__1;
    int _offset_5;
    int _compIdx_2;
    int _in_sigIdx__2;
    int _offset_7;
    int _compIdx_3;
    int _out_sigIdx__2;
    int _offset_9;
    int _compIdx_4;
    int _out_sigIdx__3;
    int _offset_14;
    int _offset_16;
    int _compIdx_5;
    int _in_sigIdx__3;
    int _offset_18;
    int _compIdx_6;
    int _out_sigIdx__4;
    int _offset_20;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_out_4;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_1 = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[254] */
    /* component aliasCheck = AliasCheck() */
    /* component n2b = Num2Bits(254) */
    /* in ==> n2b.in */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x21d8e21925f9f8c1LL /* n2b */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx__1, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _in_sigIdx_, _sigValue);
    /* for (var i=0;i<254;i++) */
    /* n2b.out[i] ==> out[i] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x21d8e21925f9f8c1LL /* n2b */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
    _offset_3 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _compIdx_1, _offset_3, _sigValue_1, 1);
    _offset_5 = _out_sigIdx__1;
    ctx->setSignal(__cIdx, __cIdx, _offset_5, _sigValue_1);
    /* n2b.out[i] ==> aliasCheck.in[i] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x31894a6b9dc6a899LL /* aliasCheck */);
    _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx_2, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx__2;
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x21d8e21925f9f8c1LL /* n2b */);
    _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_3, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_3, 0x19f79b1921bbcfffLL /* out */);
    _offset_9 = _out_sigIdx__2;
    ctx->multiGetSignal(__cIdx, _compIdx_3, _offset_9, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_2, _offset_7, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* n2b.out[i] ==> out[i] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x21d8e21925f9f8c1LL /* n2b */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_4, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_4, 0x19f79b1921bbcfffLL /* out */);
        _offset_14 = _out_sigIdx__3 + Fr_toInt(i)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_4, _offset_14, _sigValue_3, 1);
        _offset_16 = _out_sigIdx__1 + Fr_toInt(i)*_sigSizes_out_1[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_16, _sigValue_3);
        /* n2b.out[i] ==> aliasCheck.in[i] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x31894a6b9dc6a899LL /* aliasCheck */);
        _in_sigIdx__3 = ctx->getSignalOffset(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_1 = ctx->getSignalSizes(_compIdx_5, 0x08b73807b55c4bbeLL /* in */);
        _offset_18 = _in_sigIdx__3 + Fr_toInt(i)*_sigSizes_in_1[1];
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x21d8e21925f9f8c1LL /* n2b */);
        _out_sigIdx__4 = ctx->getSignalOffset(_compIdx_6, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_4 = ctx->getSignalSizes(_compIdx_6, 0x19f79b1921bbcfffLL /* out */);
        _offset_20 = _out_sigIdx__4 + Fr_toInt(i)*_sigSizes_out_4[1];
        ctx->multiGetSignal(__cIdx, _compIdx_6, _offset_20, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_5, _offset_18, _sigValue_4);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 7));
        _loopCond = _tmp_6;
    }
    ctx->finished(__cIdx);
}
/*
AliasCheck
*/
void AliasCheck_dc94d6e8b30bc9b9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _sigValue_2[1];
    int _compIdx;
    int _in_sigIdx_;
    int _offset_3;
    int _in_sigIdx__1;
    int _offset_5;
    int _compIdx_1;
    int _in_sigIdx__2;
    int _offset_10;
    int _offset_12;
    int _compIdx_2;
    int _out_sigIdx_;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_in_2;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _in_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_1 = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    /* signal input in[254] */
    /* component  compConstant = CompConstant(-1) */
    /* for (var i=0;i<254;i++) */
    /* in[i] ==> compConstant.in[i] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3e69231cab7d371aLL /* compConstant */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    _offset_3 = _in_sigIdx_;
    _offset_5 = _in_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset_3, _sigValue);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* in[i] ==> compConstant.in[i] */
        _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x3e69231cab7d371aLL /* compConstant */);
        _in_sigIdx__2 = ctx->getSignalOffset(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_compIdx_1, 0x08b73807b55c4bbeLL /* in */);
        _offset_10 = _in_sigIdx__2 + Fr_toInt(i)*_sigSizes_in_2[1];
        _offset_12 = _in_sigIdx__1 + Fr_toInt(i)*_sigSizes_in_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_1, 1);
        ctx->setSignal(__cIdx, _compIdx_1, _offset_10, _sigValue_1);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 7));
        _loopCond = _tmp_6;
    }
    /* compConstant.out === 0 */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x3e69231cab7d371aLL /* compConstant */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_2, _out_sigIdx_, _sigValue_2, 1);
    ctx->checkConstraint(__cIdx, _sigValue_2, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/aliascheck.circom:31:4");
    ctx->finished(__cIdx);
}
/*
CompConstant
ct=-1
*/
void CompConstant_ab0948fd0154cd18(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement slsb[1];
    FrElement _sigValue_1[1];
    FrElement smsb[1];
    FrElement _tmp_17[1];
    FrElement _tmp_18[1];
    FrElement _tmp_19[1];
    FrElement _tmp_20[1];
    FrElement _tmp_21[1];
    FrElement _tmp_22[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_23[1];
    FrElement sum[1];
    FrElement _tmp_29[1];
    FrElement i[1];
    FrElement clsb[1];
    FrElement cmsb[1];
    FrElement b[1];
    FrElement a[1];
    FrElement e[1];
    FrElement _tmp_30[1];
    FrElement _tmp_31[1];
    FrElement _tmp_32[1];
    FrElement _tmp_33[1];
    FrElement _tmp_34[1];
    FrElement _tmp_35[1];
    FrElement _tmp_36[1];
    FrElement _tmp_37[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_38[1];
    FrElement _tmp_39[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_40[1];
    FrElement _tmp_41[1];
    FrElement _tmp_42[1];
    FrElement _tmp_43[1];
    FrElement _tmp_44[1];
    FrElement _tmp_45[1];
    FrElement _tmp_46[1];
    FrElement _tmp_47[1];
    FrElement _tmp_48[1];
    FrElement _tmp_49[1];
    FrElement _tmp_50[1];
    FrElement _tmp_51[1];
    FrElement _tmp_52[1];
    FrElement _tmp_53[1];
    FrElement _tmp_54[1];
    FrElement _tmp_55[1];
    FrElement _tmp_56[1];
    FrElement _tmp_57[1];
    FrElement _tmp_58[1];
    FrElement _tmp_59[1];
    FrElement _tmp_60[1];
    FrElement _tmp_61[1];
    FrElement _tmp_62[1];
    FrElement _tmp_63[1];
    FrElement _tmp_64[1];
    FrElement _tmp_65[1];
    FrElement _tmp_66[1];
    FrElement _tmp_67[1];
    FrElement _tmp_68[1];
    FrElement _tmp_69[1];
    FrElement _tmp_70[1];
    FrElement _tmp_71[1];
    FrElement _tmp_72[1];
    FrElement _tmp_73[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_74[1];
    FrElement _tmp_75[1];
    FrElement _tmp_76[1];
    FrElement _tmp_77[1];
    FrElement _tmp_79[1];
    FrElement _tmp_78[1];
    FrElement _tmp_80[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    int _in_sigIdx_;
    int _offset_13;
    int _offset_16;
    int _parts_sigIdx_;
    int _offset_28;
    int _offset_31;
    int _offset_51;
    int _offset_54;
    int _offset_66;
    int _offset_80;
    int _offset_90;
    int _offset_96;
    int _offset_99;
    int _sout_sigIdx_;
    int _compIdx;
    int _in_sigIdx__1;
    int _compIdx_1;
    int _out_sigIdx_;
    int _offset_113;
    int _out_sigIdx__1;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_parts;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_29[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(clsb[0]), ctx->circuit->constants +0);
    Fr_copy(&(cmsb[0]), ctx->circuit->constants +0);
    Fr_copy(&(b[0]), ctx->circuit->constants +126);
    Fr_copy(&(a[0]), ctx->circuit->constants +2);
    Fr_copy(&(e[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _parts_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x0c519da7a1f958c5LL /* parts */);
    _sout_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x5fe3db18f075c8f6LL /* sout */);
    _out_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_parts = ctx->getSignalSizes(__cIdx, 0x0c519da7a1f958c5LL /* parts */);
    /* signal input in[254] */
    /* signal output out */
    /* signal parts[127] */
    /* signal sout */
    /* var clsb */
    /* var cmsb */
    /* var slsb */
    /* var smsb */
    /* var sum=0 */
    /* var b = (1 << 128) -1 */
    /* var a = 1 */
    /* var e = 1 */
    /* var i */
    /* for (i=0;i<127;i++) */
    /* clsb = (ct >> (i*2)) & 1 */
    /* cmsb = (ct >> (i*2+1)) & 1 */
    /* slsb = in[i*2] */
    _offset_13 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue, 1);
    Fr_copyn(slsb, _sigValue, 1);
    /* smsb = in[i*2+1] */
    _offset_16 = _in_sigIdx_ + 1*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_16, _sigValue_1, 1);
    Fr_copyn(smsb, _sigValue_1, 1);
    /* if ((cmsb==0)&&(clsb==0)) */
    /* parts[i] <== -b*smsb*slsb + b*smsb + b*slsb */
    Fr_mul(_tmp_17, (ctx->circuit->constants + 124), smsb);
    Fr_mul(_tmp_18, _tmp_17, slsb);
    Fr_mul(_tmp_19, (ctx->circuit->constants + 125), smsb);
    Fr_add(_tmp_20, _tmp_18, _tmp_19);
    Fr_mul(_tmp_21, (ctx->circuit->constants + 125), slsb);
    Fr_add(_tmp_22, _tmp_20, _tmp_21);
    _offset_28 = _parts_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_28, _tmp_22);
    /* sum = sum + parts[i] */
    _offset_31 = _parts_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_2, 1);
    Fr_add(_tmp_23, (ctx->circuit->constants + 0), _sigValue_2);
    Fr_copyn(sum, _tmp_23, 1);
    /* b = b -e */
    /* a = a +e */
    /* e = e*2 */
    _loopCond = _tmp_29;
    while (Fr_isTrue(_loopCond)) {
        /* clsb = (ct >> (i*2)) & 1 */
        Fr_mul(_tmp_30, i, (ctx->circuit->constants + 2));
        Fr_shr(_tmp_31, (ctx->circuit->constants + 3), _tmp_30);
        Fr_band(_tmp_32, _tmp_31, (ctx->circuit->constants + 1));
        Fr_copyn(clsb, _tmp_32, 1);
        /* cmsb = (ct >> (i*2+1)) & 1 */
        Fr_mul(_tmp_33, i, (ctx->circuit->constants + 2));
        Fr_add(_tmp_34, _tmp_33, (ctx->circuit->constants + 1));
        Fr_shr(_tmp_35, (ctx->circuit->constants + 3), _tmp_34);
        Fr_band(_tmp_36, _tmp_35, (ctx->circuit->constants + 1));
        Fr_copyn(cmsb, _tmp_36, 1);
        /* slsb = in[i*2] */
        Fr_mul(_tmp_37, i, (ctx->circuit->constants + 2));
        _offset_51 = _in_sigIdx_ + Fr_toInt(_tmp_37)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_3, 1);
        Fr_copyn(slsb, _sigValue_3, 1);
        /* smsb = in[i*2+1] */
        Fr_mul(_tmp_38, i, (ctx->circuit->constants + 2));
        Fr_add(_tmp_39, _tmp_38, (ctx->circuit->constants + 1));
        _offset_54 = _in_sigIdx_ + Fr_toInt(_tmp_39)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_54, _sigValue_4, 1);
        Fr_copyn(smsb, _sigValue_4, 1);
        /* if ((cmsb==0)&&(clsb==0)) */
        Fr_eq(_tmp_40, cmsb, (ctx->circuit->constants + 0));
        Fr_eq(_tmp_41, clsb, (ctx->circuit->constants + 0));
        Fr_land(_tmp_42, _tmp_40, _tmp_41);
        if (Fr_isTrue(_tmp_42)) {
            /* parts[i] <== -b*smsb*slsb + b*smsb + b*slsb */
            Fr_neg(_tmp_43, b);
            Fr_mul(_tmp_44, _tmp_43, smsb);
            Fr_mul(_tmp_45, _tmp_44, slsb);
            Fr_mul(_tmp_46, b, smsb);
            Fr_add(_tmp_47, _tmp_45, _tmp_46);
            Fr_mul(_tmp_48, b, slsb);
            Fr_add(_tmp_49, _tmp_47, _tmp_48);
            _offset_66 = _parts_sigIdx_ + Fr_toInt(i)*_sigSizes_parts[1];
            ctx->setSignal(__cIdx, __cIdx, _offset_66, _tmp_49);
        } else {
            /* if ((cmsb==0)&&(clsb==1)) */
            Fr_eq(_tmp_50, cmsb, (ctx->circuit->constants + 0));
            Fr_eq(_tmp_51, clsb, (ctx->circuit->constants + 1));
            Fr_land(_tmp_52, _tmp_50, _tmp_51);
            if (Fr_isTrue(_tmp_52)) {
                /* parts[i] <== a*smsb*slsb - a*slsb + b*smsb - a*smsb + a */
                Fr_mul(_tmp_53, a, smsb);
                Fr_mul(_tmp_54, _tmp_53, slsb);
                Fr_mul(_tmp_55, a, slsb);
                Fr_sub(_tmp_56, _tmp_54, _tmp_55);
                Fr_mul(_tmp_57, b, smsb);
                Fr_add(_tmp_58, _tmp_56, _tmp_57);
                Fr_mul(_tmp_59, a, smsb);
                Fr_sub(_tmp_60, _tmp_58, _tmp_59);
                Fr_add(_tmp_61, _tmp_60, a);
                _offset_80 = _parts_sigIdx_ + Fr_toInt(i)*_sigSizes_parts[1];
                ctx->setSignal(__cIdx, __cIdx, _offset_80, _tmp_61);
            } else {
                /* if ((cmsb==1)&&(clsb==0)) */
                Fr_eq(_tmp_62, cmsb, (ctx->circuit->constants + 1));
                Fr_eq(_tmp_63, clsb, (ctx->circuit->constants + 0));
                Fr_land(_tmp_64, _tmp_62, _tmp_63);
                if (Fr_isTrue(_tmp_64)) {
                    /* parts[i] <== b*smsb*slsb - a*smsb + a */
                    Fr_mul(_tmp_65, b, smsb);
                    Fr_mul(_tmp_66, _tmp_65, slsb);
                    Fr_mul(_tmp_67, a, smsb);
                    Fr_sub(_tmp_68, _tmp_66, _tmp_67);
                    Fr_add(_tmp_69, _tmp_68, a);
                    _offset_90 = _parts_sigIdx_ + Fr_toInt(i)*_sigSizes_parts[1];
                    ctx->setSignal(__cIdx, __cIdx, _offset_90, _tmp_69);
                } else {
                    /* parts[i] <== -a*smsb*slsb + a */
                    Fr_neg(_tmp_70, a);
                    Fr_mul(_tmp_71, _tmp_70, smsb);
                    Fr_mul(_tmp_72, _tmp_71, slsb);
                    Fr_add(_tmp_73, _tmp_72, a);
                    _offset_96 = _parts_sigIdx_ + Fr_toInt(i)*_sigSizes_parts[1];
                    ctx->setSignal(__cIdx, __cIdx, _offset_96, _tmp_73);
                }
            }
        }
        /* sum = sum + parts[i] */
        _offset_99 = _parts_sigIdx_ + Fr_toInt(i)*_sigSizes_parts[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_99, _sigValue_5, 1);
        Fr_add(_tmp_74, sum, _sigValue_5);
        Fr_copyn(sum, _tmp_74, 1);
        /* b = b -e */
        Fr_sub(_tmp_75, b, e);
        Fr_copyn(b, _tmp_75, 1);
        /* a = a +e */
        Fr_add(_tmp_76, a, e);
        Fr_copyn(a, _tmp_76, 1);
        /* e = e*2 */
        Fr_mul(_tmp_77, e, (ctx->circuit->constants + 2));
        Fr_copyn(e, _tmp_77, 1);
        Fr_copyn(_tmp_79, i, 1);
        Fr_add(_tmp_78, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_78, 1);
        Fr_lt(_tmp_80, i, (ctx->circuit->constants + 26));
        _loopCond = _tmp_80;
    }
    /* sout <== sum */
    ctx->setSignal(__cIdx, __cIdx, _sout_sigIdx_, sum);
    /* component num2bits = Num2Bits(135) */
    /* num2bits.in <== sout */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x1d6ec07b7518a3b7LL /* num2bits */);
    _in_sigIdx__1 = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _sout_sigIdx_, _sigValue_6, 1);
    ctx->setSignal(__cIdx, _compIdx, _in_sigIdx__1, _sigValue_6);
    /* out <== num2bits.out[127] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x1d6ec07b7518a3b7LL /* num2bits */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_compIdx_1, 0x19f79b1921bbcfffLL /* out */);
    _offset_113 = _out_sigIdx_ + 127*_sigSizes_out[1];
    ctx->multiGetSignal(__cIdx, _compIdx_1, _offset_113, _sigValue_7, 1);
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx__1, _sigValue_7);
    ctx->finished(__cIdx);
}
/*
Num2Bits
n=135
*/
void Num2Bits_7adcb47f7f5c5e61(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lc1[1];
    FrElement _tmp_10[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_15[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_8[1];
    int _in_sigIdx_;
    int _out_sigIdx_;
    int _offset_8;
    int _offset_10;
    int _offset_12;
    int _offset_15;
    int _offset_27;
    int _offset_29;
    int _offset_31;
    int _offset_34;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[n] */
    /* var lc1=0 */
    /* var e2=1 */
    /* for (var i = 0;i<n;i++) */
    /* out[i] <-- (in >> i) & 1 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    Fr_shr(_tmp_1, _sigValue, (ctx->circuit->constants + 0));
    Fr_band(_tmp_2, _tmp_1, (ctx->circuit->constants + 1));
    _offset_8 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_8, _tmp_2);
    /* out[i] * (out[i] -1 ) === 0 */
    _offset_10 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_3, _sigValue_2, (ctx->circuit->constants + 1));
    Fr_mul(_tmp_4, _sigValue_1, _tmp_3);
    ctx->checkConstraint(__cIdx, _tmp_4, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
    /* lc1 += out[i] * e2 */
    _offset_15 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    Fr_mul(_tmp_5, _sigValue_3, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lc1, _tmp_6, 1);
    /* e2 = e2+e2 */
    _loopCond = _tmp_10;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- (in >> i) & 1 */
        ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_4, 1);
        Fr_shr(_tmp_11, _sigValue_4, i);
        Fr_band(_tmp_12, _tmp_11, (ctx->circuit->constants + 1));
        _offset_27 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_27, _tmp_12);
        /* out[i] * (out[i] -1 ) === 0 */
        _offset_29 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue_5, 1);
        _offset_31 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        Fr_sub(_tmp_13, _sigValue_6, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_14, _sigValue_5, _tmp_13);
        ctx->checkConstraint(__cIdx, _tmp_14, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
        /* lc1 += out[i] * e2 */
        _offset_34 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_34, _sigValue_7, 1);
        Fr_mul(_tmp_15, _sigValue_7, e2);
        Fr_add(_tmp_16, lc1, _tmp_15);
        Fr_copyn(lc1, _tmp_16, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_17, e2, e2);
        Fr_copyn(e2, _tmp_17, 1);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 127));
        _loopCond = _tmp_20;
    }
    /* lc1 === in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_8, 1);
    ctx->checkConstraint(__cIdx, lc1, _sigValue_8, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:37:4");
    ctx->finished(__cIdx);
}
/*
Num2Bits
n=254
*/
void Num2Bits_615aba7f710c88d1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lc1[1];
    FrElement _tmp_10[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_15[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_8[1];
    int _in_sigIdx_;
    int _out_sigIdx_;
    int _offset_8;
    int _offset_10;
    int _offset_12;
    int _offset_15;
    int _offset_27;
    int _offset_29;
    int _offset_31;
    int _offset_34;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[n] */
    /* var lc1=0 */
    /* var e2=1 */
    /* for (var i = 0;i<n;i++) */
    /* out[i] <-- (in >> i) & 1 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    Fr_shr(_tmp_1, _sigValue, (ctx->circuit->constants + 0));
    Fr_band(_tmp_2, _tmp_1, (ctx->circuit->constants + 1));
    _offset_8 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_8, _tmp_2);
    /* out[i] * (out[i] -1 ) === 0 */
    _offset_10 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_3, _sigValue_2, (ctx->circuit->constants + 1));
    Fr_mul(_tmp_4, _sigValue_1, _tmp_3);
    ctx->checkConstraint(__cIdx, _tmp_4, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
    /* lc1 += out[i] * e2 */
    _offset_15 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    Fr_mul(_tmp_5, _sigValue_3, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lc1, _tmp_6, 1);
    /* e2 = e2+e2 */
    _loopCond = _tmp_10;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- (in >> i) & 1 */
        ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_4, 1);
        Fr_shr(_tmp_11, _sigValue_4, i);
        Fr_band(_tmp_12, _tmp_11, (ctx->circuit->constants + 1));
        _offset_27 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_27, _tmp_12);
        /* out[i] * (out[i] -1 ) === 0 */
        _offset_29 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue_5, 1);
        _offset_31 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        Fr_sub(_tmp_13, _sigValue_6, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_14, _sigValue_5, _tmp_13);
        ctx->checkConstraint(__cIdx, _tmp_14, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
        /* lc1 += out[i] * e2 */
        _offset_34 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_34, _sigValue_7, 1);
        Fr_mul(_tmp_15, _sigValue_7, e2);
        Fr_add(_tmp_16, lc1, _tmp_15);
        Fr_copyn(lc1, _tmp_16, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_17, e2, e2);
        Fr_copyn(e2, _tmp_17, 1);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 7));
        _loopCond = _tmp_20;
    }
    /* lc1 === in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_8, 1);
    ctx->checkConstraint(__cIdx, lc1, _sigValue_8, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:37:4");
    ctx->finished(__cIdx);
}
/*
Num2Bits
n=32
*/
void Num2Bits_985f49a0f4806f03(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lc1[1];
    FrElement _tmp_10[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_15[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_8[1];
    int _in_sigIdx_;
    int _out_sigIdx_;
    int _offset_8;
    int _offset_10;
    int _offset_12;
    int _offset_15;
    int _offset_27;
    int _offset_29;
    int _offset_31;
    int _offset_34;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[n] */
    /* var lc1=0 */
    /* var e2=1 */
    /* for (var i = 0;i<n;i++) */
    /* out[i] <-- (in >> i) & 1 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    Fr_shr(_tmp_1, _sigValue, (ctx->circuit->constants + 0));
    Fr_band(_tmp_2, _tmp_1, (ctx->circuit->constants + 1));
    _offset_8 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_8, _tmp_2);
    /* out[i] * (out[i] -1 ) === 0 */
    _offset_10 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_3, _sigValue_2, (ctx->circuit->constants + 1));
    Fr_mul(_tmp_4, _sigValue_1, _tmp_3);
    ctx->checkConstraint(__cIdx, _tmp_4, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
    /* lc1 += out[i] * e2 */
    _offset_15 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    Fr_mul(_tmp_5, _sigValue_3, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lc1, _tmp_6, 1);
    /* e2 = e2+e2 */
    _loopCond = _tmp_10;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- (in >> i) & 1 */
        ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_4, 1);
        Fr_shr(_tmp_11, _sigValue_4, i);
        Fr_band(_tmp_12, _tmp_11, (ctx->circuit->constants + 1));
        _offset_27 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_27, _tmp_12);
        /* out[i] * (out[i] -1 ) === 0 */
        _offset_29 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue_5, 1);
        _offset_31 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        Fr_sub(_tmp_13, _sigValue_6, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_14, _sigValue_5, _tmp_13);
        ctx->checkConstraint(__cIdx, _tmp_14, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
        /* lc1 += out[i] * e2 */
        _offset_34 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_34, _sigValue_7, 1);
        Fr_mul(_tmp_15, _sigValue_7, e2);
        Fr_add(_tmp_16, lc1, _tmp_15);
        Fr_copyn(lc1, _tmp_16, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_17, e2, e2);
        Fr_copyn(e2, _tmp_17, 1);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 9));
        _loopCond = _tmp_20;
    }
    /* lc1 === in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_8, 1);
    ctx->checkConstraint(__cIdx, lc1, _sigValue_8, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:37:4");
    ctx->finished(__cIdx);
}
/*
Num2Bits
n=160
*/
void Num2Bits_7aedb57f7f6ad347(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lc1[1];
    FrElement _tmp_10[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_15[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_8[1];
    int _in_sigIdx_;
    int _out_sigIdx_;
    int _offset_8;
    int _offset_10;
    int _offset_12;
    int _offset_15;
    int _offset_27;
    int _offset_29;
    int _offset_31;
    int _offset_34;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[n] */
    /* var lc1=0 */
    /* var e2=1 */
    /* for (var i = 0;i<n;i++) */
    /* out[i] <-- (in >> i) & 1 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    Fr_shr(_tmp_1, _sigValue, (ctx->circuit->constants + 0));
    Fr_band(_tmp_2, _tmp_1, (ctx->circuit->constants + 1));
    _offset_8 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_8, _tmp_2);
    /* out[i] * (out[i] -1 ) === 0 */
    _offset_10 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_3, _sigValue_2, (ctx->circuit->constants + 1));
    Fr_mul(_tmp_4, _sigValue_1, _tmp_3);
    ctx->checkConstraint(__cIdx, _tmp_4, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
    /* lc1 += out[i] * e2 */
    _offset_15 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    Fr_mul(_tmp_5, _sigValue_3, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lc1, _tmp_6, 1);
    /* e2 = e2+e2 */
    _loopCond = _tmp_10;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- (in >> i) & 1 */
        ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_4, 1);
        Fr_shr(_tmp_11, _sigValue_4, i);
        Fr_band(_tmp_12, _tmp_11, (ctx->circuit->constants + 1));
        _offset_27 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_27, _tmp_12);
        /* out[i] * (out[i] -1 ) === 0 */
        _offset_29 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue_5, 1);
        _offset_31 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        Fr_sub(_tmp_13, _sigValue_6, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_14, _sigValue_5, _tmp_13);
        ctx->checkConstraint(__cIdx, _tmp_14, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
        /* lc1 += out[i] * e2 */
        _offset_34 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_34, _sigValue_7, 1);
        Fr_mul(_tmp_15, _sigValue_7, e2);
        Fr_add(_tmp_16, lc1, _tmp_15);
        Fr_copyn(lc1, _tmp_16, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_17, e2, e2);
        Fr_copyn(e2, _tmp_17, 1);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 11));
        _loopCond = _tmp_20;
    }
    /* lc1 === in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_8, 1);
    ctx->checkConstraint(__cIdx, lc1, _sigValue_8, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:37:4");
    ctx->finished(__cIdx);
}
/*
Bits2Num
n=256
*/
void Bits2Num_899ed94a4edec2a3(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement lc1[1];
    FrElement _tmp_6[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _tmp_9[1];
    FrElement _tmp_11[1];
    FrElement _tmp_10[1];
    FrElement _tmp_12[1];
    int _in_sigIdx_;
    int _offset_8;
    int _offset_20;
    int _out_sigIdx_;
    Circom_Sizes _sigSizes_in;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    /* signal input in[n] */
    /* signal output out */
    /* var lc1=0 */
    /* var e2 = 1 */
    /* for (var i = 0;i<n;i++) */
    /* lc1 += in[i] * e2 */
    _offset_8 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_8, _sigValue, 1);
    Fr_mul(_tmp_1, _sigValue, (ctx->circuit->constants + 1));
    Fr_add(_tmp_2, (ctx->circuit->constants + 0), _tmp_1);
    Fr_copyn(lc1, _tmp_2, 1);
    /* e2 = e2 + e2 */
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* lc1 += in[i] * e2 */
        _offset_20 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_20, _sigValue_1, 1);
        Fr_mul(_tmp_7, _sigValue_1, e2);
        Fr_add(_tmp_8, lc1, _tmp_7);
        Fr_copyn(lc1, _tmp_8, 1);
        /* e2 = e2 + e2 */
        Fr_add(_tmp_9, e2, e2);
        Fr_copyn(e2, _tmp_9, 1);
        Fr_copyn(_tmp_11, i, 1);
        Fr_add(_tmp_10, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_10, 1);
        Fr_lt(_tmp_12, i, (ctx->circuit->constants + 13));
        _loopCond = _tmp_12;
    }
    /* lc1 ==> out */
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx_, lc1);
    ctx->finished(__cIdx);
}
/*
Poseidon
nInputs=3
*/
void Poseidon_9ccc1ced8977bb8d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_11[1];
    FrElement j[1];
    FrElement _tmp_13[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_15[1];
    FrElement _tmp_14[1];
    FrElement _tmp_16[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_28[1];
    FrElement j_1[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_30[1];
    FrElement _tmp_29[1];
    FrElement _tmp_31[1];
    FrElement _tmp_36[1];
    FrElement i[1];
    FrElement k[1];
    FrElement j_2[1];
    FrElement _num_14[1];
    FrElement _tmp_37[1];
    FrElement _tmp_38[1];
    FrElement _tmp_39[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_40[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_42[1];
    FrElement _tmp_41[1];
    FrElement _tmp_43[1];
    FrElement _tmp_45[1];
    FrElement _tmp_48[1];
    FrElement _tmp_49[1];
    FrElement _tmp_51[1];
    FrElement _tmp_52[1];
    FrElement _num_21[1];
    FrElement _tmp_53[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_55[1];
    FrElement _tmp_54[1];
    FrElement _tmp_56[1];
    FrElement _tmp_58[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _num_25[1];
    FrElement _tmp_59[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_61[1];
    FrElement _tmp_60[1];
    FrElement _tmp_62[1];
    FrElement _tmp_64[1];
    FrElement _tmp_63[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_73[1];
    FrElement _sigValue_14[1];
    int _compIdx;
    int _offset_25;
    int _in_sigIdx_;
    int _offset_27;
    int _inputs_sigIdx_;
    int _offset_29;
    int _compIdx_1;
    int _offset_38;
    int _in_sigIdx__1;
    int _offset_40;
    int _offset_42;
    int _compIdx_2;
    int _offset_44;
    int _in_sigIdx__2;
    int _offset_46;
    int _compIdx_3;
    int _offset_65;
    int _in_sigIdx__3;
    int _compIdx_4;
    int _offset_67;
    int _out_sigIdx_;
    int _offset_69;
    int _compIdx_5;
    int _offset_71;
    int _in_sigIdx__4;
    int _offset_73;
    int _compIdx_6;
    int _offset_76;
    int _out_sigIdx__1;
    int _compIdx_7;
    int _offset_83;
    int _in_sigIdx__5;
    int _compIdx_8;
    int _offset_85;
    int _out_sigIdx__2;
    int _offset_87;
    int _compIdx_9;
    int _offset_89;
    int _in_sigIdx__6;
    int _offset_91;
    int _compIdx_10;
    int _offset_94;
    int _out_sigIdx__3;
    int _compIdx_11;
    int _offset_111;
    int _in_sigIdx__7;
    int _offset_113;
    int _offset_115;
    int _compIdx_12;
    int _offset_117;
    int _in_sigIdx__8;
    int _offset_119;
    int _compIdx_13;
    int _offset_121;
    int _in_sigIdx__9;
    int _offset_123;
    int _compIdx_14;
    int _offset_125;
    int _out_sigIdx__4;
    int _offset_127;
    int _compIdx_15;
    int _offset_148;
    int _in_sigIdx__10;
    int _compIdx_16;
    int _offset_150;
    int _out_sigIdx__5;
    int _offset_152;
    int _compIdx_17;
    int _offset_154;
    int _in_sigIdx__11;
    int _offset_156;
    int _compIdx_18;
    int _offset_159;
    int _out_sigIdx__6;
    int _compIdx_19;
    int _offset_168;
    int _in_sigIdx__12;
    int _compIdx_20;
    int _offset_170;
    int _out_sigIdx__7;
    int _offset_171;
    int _compIdx_21;
    int _offset_173;
    int _in_sigIdx__13;
    int _offset_174;
    int _compIdx_22;
    int _offset_176;
    int _out_sigIdx__8;
    int _compIdx_23;
    int _offset_181;
    int _in_sigIdx__14;
    int _offset_183;
    int _compIdx_24;
    int _offset_185;
    int _out_sigIdx__9;
    int _offset_187;
    int _compIdx_25;
    int _in_sigIdx__15;
    int _compIdx_26;
    int _offset_199;
    int _out_sigIdx__10;
    int _offset_200;
    int _compIdx_27;
    int _out_sigIdx__11;
    int _out_sigIdx__12;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_inputs;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_out_6;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _ter;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    Fr_copy(&(_tmp_11[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_28[0]), ctx->circuit->constants +1);
    Fr_copy(&(j_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_36[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_14[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_21[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_25[0]), ctx->circuit->constants +1);
    _inputs_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x499fc592a46585f8LL /* inputs */);
    _out_sigIdx__12 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_inputs = ctx->getSignalSizes(__cIdx, 0x499fc592a46585f8LL /* inputs */);
    /* signal input inputs[nInputs] */
    /* signal output out */
    /* var t = nInputs + 1 */
    /* var nRoundsF = 8 */
    /* var nRoundsP = 35 */
    /* var C[t*(nRoundsF + nRoundsP)] = POSEIDON_C(t) */
    /* var M[t][t] = POSEIDON_M(t) */
    /* component ark[nRoundsF + nRoundsP - 1] */
    /* component sigmaF[nRoundsF - 1][t] */
    /* component sigmaP[nRoundsP] */
    /* component mix[nRoundsF + nRoundsP - 1] */
    /* var k */
    /* for (var i=0;i<nRoundsF + nRoundsP - 1;i++) */
    /* ark[i] = Ark(t, C, t*i) */
    /* for (var j=0;j<t;j++) */
    /* if (i==0) */
    /* if (j<nInputs) */
    /* ark[i].in[j] <== inputs[j] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
    _offset_25 = _compIdx;
    _in_sigIdx_ = ctx->getSignalOffset(_offset_25, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_offset_25, 0x08b73807b55c4bbeLL /* in */);
    _offset_27 = _in_sigIdx_;
    _offset_29 = _inputs_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue, 1);
    ctx->setSignal(__cIdx, _offset_25, _offset_27, _sigValue);
    _loopCond = _tmp_11;
    while (Fr_isTrue(_loopCond)) {
        /* if (i==0) */
        /* if (j<nInputs) */
        Fr_lt(_tmp_13, j, (ctx->circuit->constants + 5));
        if (Fr_isTrue(_tmp_13)) {
            /* ark[i].in[j] <== inputs[j] */
            _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_38 = _compIdx_1;
            _in_sigIdx__1 = ctx->getSignalOffset(_offset_38, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_1 = ctx->getSignalSizes(_offset_38, 0x08b73807b55c4bbeLL /* in */);
            _offset_40 = _in_sigIdx__1 + Fr_toInt(j)*_sigSizes_in_1[1];
            _offset_42 = _inputs_sigIdx_ + Fr_toInt(j)*_sigSizes_inputs[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_42, _sigValue_1, 1);
            ctx->setSignal(__cIdx, _offset_38, _offset_40, _sigValue_1);
        } else {
            /* ark[i].in[j] <== 0 */
            _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_44 = _compIdx_2;
            _in_sigIdx__2 = ctx->getSignalOffset(_offset_44, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_2 = ctx->getSignalSizes(_offset_44, 0x08b73807b55c4bbeLL /* in */);
            _offset_46 = _in_sigIdx__2 + Fr_toInt(j)*_sigSizes_in_2[1];
            ctx->setSignal(__cIdx, _offset_44, _offset_46, (ctx->circuit->constants + 0));
        }
        Fr_copyn(_tmp_15, j, 1);
        Fr_add(_tmp_14, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_14, 1);
        Fr_lt(_tmp_16, j, (ctx->circuit->constants + 119));
        _loopCond = _tmp_16;
    }
    /* if (i < nRoundsF/2 || i >= nRoundsP + nRoundsF/2) */
    /* k = i < nRoundsF/2 ? i : i - nRoundsP */
    /* mix[i] = Mix(t, M) */
    /* for (var j=0;j<t;j++) */
    /* sigmaF[k][j] = Sigma() */
    /* sigmaF[k][j].in <== ark[i].out[j] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _offset_65 = _compIdx_3;
    _in_sigIdx__3 = ctx->getSignalOffset(_offset_65, 0x08b73807b55c4bbeLL /* in */);
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
    _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
    _offset_67 = _compIdx_4;
    _out_sigIdx_ = ctx->getSignalOffset(_offset_67, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_offset_67, 0x19f79b1921bbcfffLL /* out */);
    _offset_69 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _offset_67, _offset_69, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _offset_65, _in_sigIdx__3, _sigValue_2);
    /* mix[i].in[j] <== sigmaF[k][j].out */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
    _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
    _offset_71 = _compIdx_5;
    _in_sigIdx__4 = ctx->getSignalOffset(_offset_71, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_offset_71, 0x08b73807b55c4bbeLL /* in */);
    _offset_73 = _in_sigIdx__4;
    _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _offset_76 = _compIdx_6;
    _out_sigIdx__1 = ctx->getSignalOffset(_offset_76, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _offset_76, _out_sigIdx__1, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _offset_71, _offset_73, _sigValue_3);
    _loopCond_1 = _tmp_28;
    while (Fr_isTrue(_loopCond_1)) {
        /* sigmaF[k][j] = Sigma() */
        /* sigmaF[k][j].in <== ark[i].out[j] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _offset_83 = _compIdx_7 + Fr_toInt(j_1)*_compSizes_7[2];
        _in_sigIdx__5 = ctx->getSignalOffset(_offset_83, 0x08b73807b55c4bbeLL /* in */);
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
        _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
        _offset_85 = _compIdx_8;
        _out_sigIdx__2 = ctx->getSignalOffset(_offset_85, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_offset_85, 0x19f79b1921bbcfffLL /* out */);
        _offset_87 = _out_sigIdx__2 + Fr_toInt(j_1)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _offset_85, _offset_87, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _offset_83, _in_sigIdx__5, _sigValue_4);
        /* mix[i].in[j] <== sigmaF[k][j].out */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
        _offset_89 = _compIdx_9;
        _in_sigIdx__6 = ctx->getSignalOffset(_offset_89, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_offset_89, 0x08b73807b55c4bbeLL /* in */);
        _offset_91 = _in_sigIdx__6 + Fr_toInt(j_1)*_sigSizes_in_4[1];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _offset_94 = _compIdx_10 + Fr_toInt(j_1)*_compSizes_10[2];
        _out_sigIdx__3 = ctx->getSignalOffset(_offset_94, 0x19f79b1921bbcfffLL /* out */);
        ctx->multiGetSignal(__cIdx, _offset_94, _out_sigIdx__3, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _offset_89, _offset_91, _sigValue_5);
        Fr_copyn(_tmp_30, j_1, 1);
        Fr_add(_tmp_29, j_1, (ctx->circuit->constants + 1));
        Fr_copyn(j_1, _tmp_29, 1);
        Fr_lt(_tmp_31, j_1, (ctx->circuit->constants + 119));
        _loopCond_1 = _tmp_31;
    }
    _loopCond_2 = _tmp_36;
    while (Fr_isTrue(_loopCond_2)) {
        /* ark[i] = Ark(t, C, t*i) */
        /* for (var j=0;j<t;j++) */
        Fr_copyn(j, _num_14, 1);
        Fr_lt(_tmp_37, j, (ctx->circuit->constants + 119));
        _loopCond_3 = _tmp_37;
        while (Fr_isTrue(_loopCond_3)) {
            /* if (i==0) */
            Fr_eq(_tmp_38, i, (ctx->circuit->constants + 0));
            if (Fr_isTrue(_tmp_38)) {
                /* if (j<nInputs) */
                Fr_lt(_tmp_39, j, (ctx->circuit->constants + 5));
                if (Fr_isTrue(_tmp_39)) {
                    /* ark[i].in[j] <== inputs[j] */
                    _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _offset_111 = _compIdx_11 + Fr_toInt(i)*_compSizes_11[1];
                    _in_sigIdx__7 = ctx->getSignalOffset(_offset_111, 0x08b73807b55c4bbeLL /* in */);
                    _sigSizes_in_5 = ctx->getSignalSizes(_offset_111, 0x08b73807b55c4bbeLL /* in */);
                    _offset_113 = _in_sigIdx__7 + Fr_toInt(j)*_sigSizes_in_5[1];
                    _offset_115 = _inputs_sigIdx_ + Fr_toInt(j)*_sigSizes_inputs[1];
                    ctx->multiGetSignal(__cIdx, __cIdx, _offset_115, _sigValue_6, 1);
                    ctx->setSignal(__cIdx, _offset_111, _offset_113, _sigValue_6);
                } else {
                    /* ark[i].in[j] <== 0 */
                    _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _offset_117 = _compIdx_12 + Fr_toInt(i)*_compSizes_12[1];
                    _in_sigIdx__8 = ctx->getSignalOffset(_offset_117, 0x08b73807b55c4bbeLL /* in */);
                    _sigSizes_in_6 = ctx->getSignalSizes(_offset_117, 0x08b73807b55c4bbeLL /* in */);
                    _offset_119 = _in_sigIdx__8 + Fr_toInt(j)*_sigSizes_in_6[1];
                    ctx->setSignal(__cIdx, _offset_117, _offset_119, (ctx->circuit->constants + 0));
                }
            } else {
                /* ark[i].in[j] <== mix[i-1].out[j] */
                _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_121 = _compIdx_13 + Fr_toInt(i)*_compSizes_13[1];
                _in_sigIdx__9 = ctx->getSignalOffset(_offset_121, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_7 = ctx->getSignalSizes(_offset_121, 0x08b73807b55c4bbeLL /* in */);
                _offset_123 = _in_sigIdx__9 + Fr_toInt(j)*_sigSizes_in_7[1];
                _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                Fr_sub(_tmp_40, i, (ctx->circuit->constants + 1));
                _offset_125 = _compIdx_14 + Fr_toInt(_tmp_40)*_compSizes_14[1];
                _out_sigIdx__4 = ctx->getSignalOffset(_offset_125, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_2 = ctx->getSignalSizes(_offset_125, 0x19f79b1921bbcfffLL /* out */);
                _offset_127 = _out_sigIdx__4 + Fr_toInt(j)*_sigSizes_out_2[1];
                ctx->multiGetSignal(__cIdx, _offset_125, _offset_127, _sigValue_7, 1);
                ctx->setSignal(__cIdx, _offset_121, _offset_123, _sigValue_7);
            }
            Fr_copyn(_tmp_42, j, 1);
            Fr_add(_tmp_41, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_41, 1);
            Fr_lt(_tmp_43, j, (ctx->circuit->constants + 119));
            _loopCond_3 = _tmp_43;
        }
        /* if (i < nRoundsF/2 || i >= nRoundsP + nRoundsF/2) */
        Fr_lt(_tmp_45, i, (ctx->circuit->constants + 119));
        Fr_geq(_tmp_48, i, (ctx->circuit->constants + 128));
        Fr_lor(_tmp_49, _tmp_45, _tmp_48);
        if (Fr_isTrue(_tmp_49)) {
            /* k = i < nRoundsF/2 ? i : i - nRoundsP */
            Fr_lt(_tmp_51, i, (ctx->circuit->constants + 119));
            if (Fr_isTrue(_tmp_51)) {
                _ter = i;
            } else {
                Fr_sub(_tmp_52, i, (ctx->circuit->constants + 122));
                _ter = _tmp_52;
            }
            Fr_copyn(k, _ter, 1);
            /* mix[i] = Mix(t, M) */
            /* for (var j=0;j<t;j++) */
            Fr_copyn(j_1, _num_21, 1);
            Fr_lt(_tmp_53, j_1, (ctx->circuit->constants + 119));
            _loopCond_4 = _tmp_53;
            while (Fr_isTrue(_loopCond_4)) {
                /* sigmaF[k][j] = Sigma() */
                /* sigmaF[k][j].in <== ark[i].out[j] */
                _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _offset_148 = _compIdx_15 + Fr_toInt(k)*_compSizes_15[1] + Fr_toInt(j_1)*_compSizes_15[2];
                _in_sigIdx__10 = ctx->getSignalOffset(_offset_148, 0x08b73807b55c4bbeLL /* in */);
                _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_150 = _compIdx_16 + Fr_toInt(i)*_compSizes_16[1];
                _out_sigIdx__5 = ctx->getSignalOffset(_offset_150, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_3 = ctx->getSignalSizes(_offset_150, 0x19f79b1921bbcfffLL /* out */);
                _offset_152 = _out_sigIdx__5 + Fr_toInt(j_1)*_sigSizes_out_3[1];
                ctx->multiGetSignal(__cIdx, _offset_150, _offset_152, _sigValue_8, 1);
                ctx->setSignal(__cIdx, _offset_148, _in_sigIdx__10, _sigValue_8);
                /* mix[i].in[j] <== sigmaF[k][j].out */
                _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                _offset_154 = _compIdx_17 + Fr_toInt(i)*_compSizes_17[1];
                _in_sigIdx__11 = ctx->getSignalOffset(_offset_154, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_8 = ctx->getSignalSizes(_offset_154, 0x08b73807b55c4bbeLL /* in */);
                _offset_156 = _in_sigIdx__11 + Fr_toInt(j_1)*_sigSizes_in_8[1];
                _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _offset_159 = _compIdx_18 + Fr_toInt(k)*_compSizes_18[1] + Fr_toInt(j_1)*_compSizes_18[2];
                _out_sigIdx__6 = ctx->getSignalOffset(_offset_159, 0x19f79b1921bbcfffLL /* out */);
                ctx->multiGetSignal(__cIdx, _offset_159, _out_sigIdx__6, _sigValue_9, 1);
                ctx->setSignal(__cIdx, _offset_154, _offset_156, _sigValue_9);
                Fr_copyn(_tmp_55, j_1, 1);
                Fr_add(_tmp_54, j_1, (ctx->circuit->constants + 1));
                Fr_copyn(j_1, _tmp_54, 1);
                Fr_lt(_tmp_56, j_1, (ctx->circuit->constants + 119));
                _loopCond_4 = _tmp_56;
            }
        } else {
            /* k = i - nRoundsF/2 */
            Fr_sub(_tmp_58, i, (ctx->circuit->constants + 119));
            Fr_copyn(k, _tmp_58, 1);
            /* mix[i] = Mix(t, M) */
            /* sigmaP[k] = Sigma() */
            /* sigmaP[k].in <== ark[i].out[0] */
            _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _offset_168 = _compIdx_19 + Fr_toInt(k)*_compSizes_19[1];
            _in_sigIdx__12 = ctx->getSignalOffset(_offset_168, 0x08b73807b55c4bbeLL /* in */);
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_170 = _compIdx_20 + Fr_toInt(i)*_compSizes_20[1];
            _out_sigIdx__7 = ctx->getSignalOffset(_offset_170, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_4 = ctx->getSignalSizes(_offset_170, 0x19f79b1921bbcfffLL /* out */);
            _offset_171 = _out_sigIdx__7;
            ctx->multiGetSignal(__cIdx, _offset_170, _offset_171, _sigValue_10, 1);
            ctx->setSignal(__cIdx, _offset_168, _in_sigIdx__12, _sigValue_10);
            /* mix[i].in[0] <== sigmaP[k].out */
            _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
            _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
            _offset_173 = _compIdx_21 + Fr_toInt(i)*_compSizes_21[1];
            _in_sigIdx__13 = ctx->getSignalOffset(_offset_173, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_9 = ctx->getSignalSizes(_offset_173, 0x08b73807b55c4bbeLL /* in */);
            _offset_174 = _in_sigIdx__13;
            _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _offset_176 = _compIdx_22 + Fr_toInt(k)*_compSizes_22[1];
            _out_sigIdx__8 = ctx->getSignalOffset(_offset_176, 0x19f79b1921bbcfffLL /* out */);
            ctx->multiGetSignal(__cIdx, _offset_176, _out_sigIdx__8, _sigValue_11, 1);
            ctx->setSignal(__cIdx, _offset_173, _offset_174, _sigValue_11);
            /* for (var j=1;j<t;j++) */
            Fr_copyn(j_2, _num_25, 1);
            Fr_lt(_tmp_59, j_2, (ctx->circuit->constants + 119));
            _loopCond_5 = _tmp_59;
            while (Fr_isTrue(_loopCond_5)) {
                /* mix[i].in[j] <== ark[i].out[j] */
                _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                _offset_181 = _compIdx_23 + Fr_toInt(i)*_compSizes_23[1];
                _in_sigIdx__14 = ctx->getSignalOffset(_offset_181, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_10 = ctx->getSignalSizes(_offset_181, 0x08b73807b55c4bbeLL /* in */);
                _offset_183 = _in_sigIdx__14 + Fr_toInt(j_2)*_sigSizes_in_10[1];
                _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_185 = _compIdx_24 + Fr_toInt(i)*_compSizes_24[1];
                _out_sigIdx__9 = ctx->getSignalOffset(_offset_185, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_5 = ctx->getSignalSizes(_offset_185, 0x19f79b1921bbcfffLL /* out */);
                _offset_187 = _out_sigIdx__9 + Fr_toInt(j_2)*_sigSizes_out_5[1];
                ctx->multiGetSignal(__cIdx, _offset_185, _offset_187, _sigValue_12, 1);
                ctx->setSignal(__cIdx, _offset_181, _offset_183, _sigValue_12);
                Fr_copyn(_tmp_61, j_2, 1);
                Fr_add(_tmp_60, j_2, (ctx->circuit->constants + 1));
                Fr_copyn(j_2, _tmp_60, 1);
                Fr_lt(_tmp_62, j_2, (ctx->circuit->constants + 119));
                _loopCond_5 = _tmp_62;
            }
        }
        Fr_copyn(_tmp_64, i, 1);
        Fr_add(_tmp_63, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_63, 1);
        Fr_lt(_tmp_67, i, (ctx->circuit->constants + 129));
        _loopCond_2 = _tmp_67;
    }
    /* component lastSigmaF = Sigma() */
    /* lastSigmaF.in <== mix[nRoundsF + nRoundsP - 2].out[0] + C[t*(nRoundsF + nRoundsP - 1)] */
    _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x96f4a48322594ab2LL /* lastSigmaF */);
    _in_sigIdx__15 = ctx->getSignalOffset(_compIdx_25, 0x08b73807b55c4bbeLL /* in */);
    _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
    _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
    _offset_199 = _compIdx_26 + 41*_compSizes_25[1];
    _out_sigIdx__10 = ctx->getSignalOffset(_offset_199, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_6 = ctx->getSignalSizes(_offset_199, 0x19f79b1921bbcfffLL /* out */);
    _offset_200 = _out_sigIdx__10;
    ctx->multiGetSignal(__cIdx, _offset_199, _offset_200, _sigValue_13, 1);
    Fr_add(_tmp_73, _sigValue_13, (ctx->circuit->constants + 130));
    ctx->setSignal(__cIdx, _compIdx_25, _in_sigIdx__15, _tmp_73);
    /* out <== lastSigmaF.out */
    _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x96f4a48322594ab2LL /* lastSigmaF */);
    _out_sigIdx__11 = ctx->getSignalOffset(_compIdx_27, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_27, _out_sigIdx__11, _sigValue_14, 1);
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx__12, _sigValue_14);
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
in[3]=0
r=0
t=4
*/
void Ark_6eee3b8e9943332b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 131));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 0));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=4
t=4
*/
void Ark_c1166759a9ab0d04(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 135));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 119));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=8
t=4
*/
void Ark_8991eab164fcfa90(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 139));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 37));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=12
t=4
*/
void Ark_6e633432f124f04d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 143));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 302));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=16
t=4
*/
void Ark_775a978526bf2679(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 147));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 50));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=20
t=4
*/
void Ark_fa4ef926521169e8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 151));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 303));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=24
t=4
*/
void Ark_cdc17bf549cf5d04(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 155));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 304));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=28
t=4
*/
void Ark_963cff4d05214a90(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 159));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 305));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=32
t=4
*/
void Ark_f0269ceab640c84f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 163));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 9));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=36
t=4
*/
void Ark_fc8a2a1723ee4263(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 167));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 306));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=40
t=4
*/
void Ark_bfbf52c4be8e52a6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 171));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 307));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=44
t=4
*/
void Ark_c1bf5ee9c560e05a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 175));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 308));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=48
t=4
*/
void Ark_59fa78eb702cd52e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 179));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 118));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=52
t=4
*/
void Ark_f883382ee4f4e161(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 183));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 309));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=56
t=4
*/
void Ark_31bb14d72b152b75(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 187));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 310));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=60
t=4
*/
void Ark_63a59857b0cfd1cc(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 191));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 311));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=64
t=4
*/
void Ark_6758947cb913d8d0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 195));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 17));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=68
t=4
*/
void Ark_48581129e5c09644(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 199));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 312));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=72
t=4
*/
void Ark_2e25b1f2f8eb4573(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 203));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 313));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=76
t=4
*/
void Ark_769424c1a1cd8bdf(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 207));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 314));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=80
t=4
*/
void Ark_f35ae6c59a5de36a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 211));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 315));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=84
t=4
*/
void Ark_efa85aa0921a9ab6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 215));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 316));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=88
t=4
*/
void Ark_0cf56df363fb8a72(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 219));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 317));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=92
t=4
*/
void Ark_0a32077456eb6885(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 223));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 318));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=96
t=4
*/
void Ark_d0fa2acc10cb1e71(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 227));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 19));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=100
t=4
*/
void Ark_cb1fbd10a3d0ab73(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 231));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 319));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=104
t=4
*/
void Ark_138e2fdf4cb2f1df(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 235));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 320));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=108
t=4
*/
void Ark_51054336b9288f9b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 239));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 321));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=112
t=4
*/
void Ark_1f698c1ae9f527f8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 243));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 322));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=116
t=4
*/
void Ark_9c570eeec9b1c614(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 247));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 323));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=120
t=4
*/
void Ark_1454a2a2d1a48c79(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 251));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 324));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=124
t=4
*/
void Ark_0b5d3f509c0a564d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 255));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 325));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=128
t=4
*/
void Ark_6594bb70bc4ed8d1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 259));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 20));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=132
t=4
*/
void Ark_4b0afe9cf77defd2(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 263));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 326));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=136
t=4
*/
void Ark_1e7d916bef3bfe1e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 267));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 327));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=140
t=4
*/
void Ark_52ed6c469bb24807(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 271));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 328));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=144
t=4
*/
void Ark_cb9bd86b5519c8db(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 275));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 329));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=148
t=4
*/
void Ark_8e24c513e8a42b1f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 279));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 330));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=152
t=4
*/
void Ark_3088ab512f417fdc(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 283));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 331));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=156
t=4
*/
void Ark_343b27763784ad60(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 287));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 332));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=160
t=4
*/
void Ark_937dc7278908ae5d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 291));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 11));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[3351933993638656046507030278779305894013196828400301368707807111676142761543,4041358179033823965288223823946343016038166377285958969861616047543395086098,6967471930731393246298989926942670717573711496470842349168696697932844817631,-2812415159797345913447454794219792902678431021097102869797315145222612931646,1633442987497949502447679901440201969590992135292997649513766612074268920806,-4393821800614481265260240896736921436842337283116929473053321064423590045105,-3223250364756123062519130659081841746951039030507561214546245130850150494810,-7391691669589366060661462715889077342201929163892473561945916993475007927426,1405371001789807822124739453403843760689536035799449328633341086350741513132,-6395874724975492025936427500826346797545214243994882463673485136799025061775,6574739698715985385999899749635335000091875367546606951591925793656596111499,-3561323081715883625772903455094515336507864433975790586397913354501328800809,-787857968026530656398002857580600596204396360644060092680945173197996904460,7187376741088549986812137111235516710201489048960609733514025241256098714804,-9498320669452057795070205190091724159735578270858846170909500837402032155983,-1821803047431701499383440369629079922911600310122990449861591484632177834078,210909098621461214885830303372505085910882216998316116422059271084591802709,-1150613337928457761096856925889546103199846982661554687666329380318873775665,9192846452764790698350343616819155713194878666932235486570690457830156094845,-2098961547990341420303322360776268804009874903826922446735297158482449647606,5081660415505348434043821159732855142886959994880494131257780322025055102889,-8120619033849975571813008297217249958739266318350882210791597525820964099325,5348008628443287733883622690313410563788933941471218131286519286729549050252,9128542016451004335626651442190002104244534551722814158605283082243854359599,-3463184278342093065773406696118682608154543721341371818362075700349208967660,-4110353277899852443080830515939632569794073670719979557090656439704135861596,10486076086230962854509005090079589565747450946746618619656496232983321987483,-3838539430201674097727844668243933899291690282177296025665519273522537455239,-2053171163621788269738906974774761594818976961598109184380506482743739827259,-4257261436908418217279035024124318540981790509868095344492536735718741457700,-4194230490634151100528681252678658018350698758857246920295148306122497068556,-4766654436496213682789937211136901457367198230473070153351442529499149627155,-8132270503496923224579925873293115458172091119643288896031400366085041591336,-7908782666627430611252013569205699578941693570878565431687592986685189003363,-6618401369808787881884640734175510202894498732825237016667273684629198765448,9048411821847863815529588257928363352452855602627471243042985534482789497594,9614470678917835679371535275398827575780488042317603988299105859418601086499,-8159883057785358749585214394904476292873189444754577697548704498607883718129,-4995839699645014206529271264999383853533739608953198042933113041205584751357,119912828728822867061866004786891304548092960934733150638344452020903031688,-3722793561331244316085025186895273385368545067185684089344784108726183547483,4570573553192016581760229204348243709310201395590777350773576912038430755125,8522879810777037315462240507801110558592291310190970434503629378779253461358,-5450543373886363895842003533770463941307255802737832245772403807244695003118,-9015764984340725558538638841876369699296150167880197207933608258103202424893,-1731009798564428768382502645546108895092558418310719385136231277652672839343,5829232040708056485469132956525942004374134092861190478780648796464299730155,7229275946810748598326440867560955268470646416809957219943766279567162996926,9783672511884548775026758037916646920726710476270289592879950738780821671711,-6473887877708679426124302969074072460913215665796165333902068138574287486599,-7845994027693257679129356578564528298109504817837140455793175754091726285512,-525006851599063089598671387165370955480557118800011076781186221984509233831,-5662227006305668964429449665774232736865722782277753298910988744555335182429,-10509476075599764199576666171734218407301338562565427353515223605562691253903,-2043153283921870150358589047623522659934969655318264547102719687720928490486,-4528605831917432226868962866913928592367997012064520259103150408611285479911,2010031342172122947333795076267539208185333625362005801283347457991596981924,-1833077795756483194826245809158495588429301753370561811712213850678145861033,-2529627736042404865338079918023747569237131942962415896951165997662125220051,-9885855212816354915408490598126100425763341529896385437403270264246263868826,887670255208388832491638740347553380430251258587040111994405861507929511135,3501107749568969246867778030120495352271349608924365210071189970700710688827,10788330427926605171578885616954687851388083068495024299019706193467914516684,3427384134315607944557753214798174597196263704551203922529439461842519400886,-984896402676527521726426091790958305347566294575716695889774099452669319256,7993561054254167159999960009345100135794738979335377856601322311862354600241,-4548529340317921633463337987954032813323392480158401736523433311066776612953,847447933752711451682792181107120711874538707584097982322422343151373381211,-4108590488440383766737678950787656360902587889566469033758385480420139413021,2252536532195151116916553410300307821733539471059440139312930388797002071136,-53761859141875158911084507473540456094980031307780786385590512944674408935,9399204711551805405349418492752930187251136043795327039631522177551979366292,4237532688366481610043528628806111287992525269557221259346813494120757463549,-2996245719543048597376642396748546864408616923594687882099505164903118398345,-6457218180280673664665067242311605070024793523163658489798520485820972952669,-6996693675945002534736721249030763521918824893720071358257988147860616499352,-9400532452982754749331788861946999390298620335752774569655864657338352327476,4316320275300322683956587399345017011079162410337769007394884235693890643755,2452313957420630265999977589622819420535401427613560854313615315468522901737,-724596694839066245959599890193919014066047507336235520666626177256438409715,6735749977476395256392601423705093105587264208774047326724993299999195664192,2769148333460972932432450624532063509096415513869155059493134824852705987058,-4229396271138796949145962353736635621294741253699593970710591922896329302651,-5193453352666927916937236934735970789378611276481633311964014541867103355047,10811278025717199573782180603243748067882845416701069651392424008946198563911,-6710338620666277706331606178889826705171457959951324458122173717137577747504,2174571550085919548081832981475289170318481850527859206766896396568283028856,9175978393838170834277152375562747318867845615522400813876038266902191553209,5013208546444042597063552344564067213434188366308896556278981076836446302086,716209527222718366111779319455868281892076959619160317917907407933523961053,-9296154678110738371825718437525943123515429925623821695848032048592149066488,2332323892482315859018862497603333824338640129403392233451614210972057156676,9772607881971530574619532967718405140071479045064622797458128683496173781864,-5353852923931716606017999207390189236521182572548958130589035059740394817670,5547402430342975209046397965467248137150664363161972933874586100397696078262,-9716722849045538370337206756154493477319218739762670673466309189145734575182,-10617609011989108623665164353344911586272255058399294126629460840488570263337,5652276761560902636294712209189982752361689241323030154996916556292082036218,10353011228589708914382673749166955066309176694257962984278670935620160911716,4733761306614728570758174289039836822474585899167234919423495639690337520301,8778244327381680435862682124875421914168098225980920896785483495673373963758,5560464806075753666775973261233016482793980063663523208752211236665706448479,10498624782552491742298831040264045737806922993389288021432016976957963395181,-5813703939414019890484110582908018907563572671254799970516913052942019072589,3070408190212432839496858636721187795976722289335662174143251344061932147698,10168319135077951191787173737083069418014488751356773848343378443217993292193,-10831935406555032339625474882723500063492948271227737307158433748303281466513,-922888160807679858359525455881674866650994994855227815277944843888264625721,-10332125865902595182394143687319185896027936655420681999013071174405791500499,-2341676266387416417349958775626248312355010093596301631348083723849638425600,2567720576551712880355205145379269640232889731911909586658274899261683709999,-1973409540563309114200655445219385038403481513088124618755464094062730858149,-3350049736361715583974748547449629702299047229957263032299195909756208467433,-6018654889494839948236873639567731695709422261123969257080741491596098767518,-574325904750273897600967359404730139063194626767878634689772884306353717867,5630815655006202626340815936646204354518093692429644631010348363924764025339,-7241705828626455746173223267947141662149674753149933065739551984269571207243,-5181278754769267866122469324032831028823829011635525482568649399409235409646,-298656251636053495332364142800620068467016204636316405035986159367546365036,6194553930706930484462246207950698523686399875852759568101218570057554423205,3547086953787608751458075029604411461794634469862200612616068831664764083587,-137418816998555404972534361741046031139430267218926767774619904160027090584,992556718606116679138852100691577246138766439160392715559401359111831429319,-3002208360727914097571135291112112720222436172985765029496230612243648102483,454310823094696040091316627622161798746460269432551501972765867838215046626,-3076327116681609054532566776276126787752416998644414631107302690680007777252,-9909326106992371340276511775715365676489645401815936863393897286613248370493,5586249714243146254001868412900757392331161187488385825404066150793125694336,10037566356143350422492789482685120731133345769270685523236912652655634258449,-2783973562840783108506001147905654376552766328417243952412324401607763990128,1592689142090456970757105196635911819814008058342209658250102601279107329266,9376704662947692775431502479348812469887202687534472686525319876972359056654,960075767277279394373659534814078567432988851084362253187793067537963933504,-5361032379031791160684606850187769557425075745606439050918389302482785367869,-3894237541811303035287522268132657744432602001836328478756521857702572987741,-2964231523030945972678190690864198714032822874726803613361691788229701313038,10018449617581658838076867909621395462026517070004002450708282895972248957872,-319784348517459643180531062025089529311440909933606283304599394911418305733,175689482023203608139782342470678694166276410535934570408297882411474817302,-9723029761789885550579407100263409561688386165472986076196926440733144398297,3843394312209221249443560371893372186815795511139779804763011858530518361712,-4871033274807662527930629654399294362813003069005408098789562688974391095843,-10039689908443963170205938984191570450299270001759072154582193071250291871439,-1600260435575422052327465788598884696685586109957313709955100544925495285446,-3334728589646987950867690787193449584093180839120651171203110771489108598774,-3833518139218031724871793025065201762480588651971290764549393882106821202102,-2443296099815302567797394044292113972486825332832105342204988764242789092528,-7667255499740355064926611941194664853150399313287630794440029799386742940415,4443213189273220099460348661507962974935946586815546478578109861795735693937,-10819991435647315844924951000812268099603889640279308025276343079862539097291,-7047823951796542677496712177936018584779482417776813508943032496063876168414,2832441709101750540797570262936315827793862828175008444093075411379441071329,6626190817039773431459333974027311292415100330429263277880104787016693516672,-359883696503490845462973214960307843751794738437462114805312961564078359397,-7804097601077520314257350573255316165277000291367618329514602688384413160387,4125021888852891382282225358280082105967811080573765063858212341802956045781,5464839052480771588745996795935888396972387132785041106247477263890691149726,-5072005890624020385661131866868816943511239819734407688776439375521715988288,-2526415316802962533034772003520043220913992332750344064961381078770819760613,-7197024613958446866566009974065170684531798154929932959349485969781233438458,4387136846363230483219013079992825124814711805294494420248698563399432323930,7243825601470441615606207520946265039048330685121354712006272460799002184334,-5884916120867892759797223331871403470996938345894819765798790327292219431555,-9642265697332914188022645559881556763759919549186313434471828699874825957659,3834742694371076728117033453712554344200033857499879310418421080643983073181,-2315086909355976293125250786488633042345479536536885087244830140105673369076,-95905431938656552131062484650111815070324798029805572810426623655119056320,8982666983489954616433031734344921585140253087344703195113815534587101901326,893874683493788698588748461169006786320753601113474640665756221039178528442,9843049757412424185532141635345801253991338068828552892190094179604457382436,-2127019992708808876430393458457061173613748287907483578268178619103468008702,-9684299477976820738778856429756536141960301380928703016570645189062914130075]
r=164
t=4
*/
void Ark_45f02a7ea6a18f89(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[172];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +131);
    Fr_copy(&(C[1]), ctx->circuit->constants +132);
    Fr_copy(&(C[2]), ctx->circuit->constants +133);
    Fr_copy(&(C[3]), ctx->circuit->constants +134);
    Fr_copy(&(C[4]), ctx->circuit->constants +135);
    Fr_copy(&(C[5]), ctx->circuit->constants +136);
    Fr_copy(&(C[6]), ctx->circuit->constants +137);
    Fr_copy(&(C[7]), ctx->circuit->constants +138);
    Fr_copy(&(C[8]), ctx->circuit->constants +139);
    Fr_copy(&(C[9]), ctx->circuit->constants +140);
    Fr_copy(&(C[10]), ctx->circuit->constants +141);
    Fr_copy(&(C[11]), ctx->circuit->constants +142);
    Fr_copy(&(C[12]), ctx->circuit->constants +143);
    Fr_copy(&(C[13]), ctx->circuit->constants +144);
    Fr_copy(&(C[14]), ctx->circuit->constants +145);
    Fr_copy(&(C[15]), ctx->circuit->constants +146);
    Fr_copy(&(C[16]), ctx->circuit->constants +147);
    Fr_copy(&(C[17]), ctx->circuit->constants +148);
    Fr_copy(&(C[18]), ctx->circuit->constants +149);
    Fr_copy(&(C[19]), ctx->circuit->constants +150);
    Fr_copy(&(C[20]), ctx->circuit->constants +151);
    Fr_copy(&(C[21]), ctx->circuit->constants +152);
    Fr_copy(&(C[22]), ctx->circuit->constants +153);
    Fr_copy(&(C[23]), ctx->circuit->constants +154);
    Fr_copy(&(C[24]), ctx->circuit->constants +155);
    Fr_copy(&(C[25]), ctx->circuit->constants +156);
    Fr_copy(&(C[26]), ctx->circuit->constants +157);
    Fr_copy(&(C[27]), ctx->circuit->constants +158);
    Fr_copy(&(C[28]), ctx->circuit->constants +159);
    Fr_copy(&(C[29]), ctx->circuit->constants +160);
    Fr_copy(&(C[30]), ctx->circuit->constants +161);
    Fr_copy(&(C[31]), ctx->circuit->constants +162);
    Fr_copy(&(C[32]), ctx->circuit->constants +163);
    Fr_copy(&(C[33]), ctx->circuit->constants +164);
    Fr_copy(&(C[34]), ctx->circuit->constants +165);
    Fr_copy(&(C[35]), ctx->circuit->constants +166);
    Fr_copy(&(C[36]), ctx->circuit->constants +167);
    Fr_copy(&(C[37]), ctx->circuit->constants +168);
    Fr_copy(&(C[38]), ctx->circuit->constants +169);
    Fr_copy(&(C[39]), ctx->circuit->constants +170);
    Fr_copy(&(C[40]), ctx->circuit->constants +171);
    Fr_copy(&(C[41]), ctx->circuit->constants +172);
    Fr_copy(&(C[42]), ctx->circuit->constants +173);
    Fr_copy(&(C[43]), ctx->circuit->constants +174);
    Fr_copy(&(C[44]), ctx->circuit->constants +175);
    Fr_copy(&(C[45]), ctx->circuit->constants +176);
    Fr_copy(&(C[46]), ctx->circuit->constants +177);
    Fr_copy(&(C[47]), ctx->circuit->constants +178);
    Fr_copy(&(C[48]), ctx->circuit->constants +179);
    Fr_copy(&(C[49]), ctx->circuit->constants +180);
    Fr_copy(&(C[50]), ctx->circuit->constants +181);
    Fr_copy(&(C[51]), ctx->circuit->constants +182);
    Fr_copy(&(C[52]), ctx->circuit->constants +183);
    Fr_copy(&(C[53]), ctx->circuit->constants +184);
    Fr_copy(&(C[54]), ctx->circuit->constants +185);
    Fr_copy(&(C[55]), ctx->circuit->constants +186);
    Fr_copy(&(C[56]), ctx->circuit->constants +187);
    Fr_copy(&(C[57]), ctx->circuit->constants +188);
    Fr_copy(&(C[58]), ctx->circuit->constants +189);
    Fr_copy(&(C[59]), ctx->circuit->constants +190);
    Fr_copy(&(C[60]), ctx->circuit->constants +191);
    Fr_copy(&(C[61]), ctx->circuit->constants +192);
    Fr_copy(&(C[62]), ctx->circuit->constants +193);
    Fr_copy(&(C[63]), ctx->circuit->constants +194);
    Fr_copy(&(C[64]), ctx->circuit->constants +195);
    Fr_copy(&(C[65]), ctx->circuit->constants +196);
    Fr_copy(&(C[66]), ctx->circuit->constants +197);
    Fr_copy(&(C[67]), ctx->circuit->constants +198);
    Fr_copy(&(C[68]), ctx->circuit->constants +199);
    Fr_copy(&(C[69]), ctx->circuit->constants +200);
    Fr_copy(&(C[70]), ctx->circuit->constants +201);
    Fr_copy(&(C[71]), ctx->circuit->constants +202);
    Fr_copy(&(C[72]), ctx->circuit->constants +203);
    Fr_copy(&(C[73]), ctx->circuit->constants +204);
    Fr_copy(&(C[74]), ctx->circuit->constants +205);
    Fr_copy(&(C[75]), ctx->circuit->constants +206);
    Fr_copy(&(C[76]), ctx->circuit->constants +207);
    Fr_copy(&(C[77]), ctx->circuit->constants +208);
    Fr_copy(&(C[78]), ctx->circuit->constants +209);
    Fr_copy(&(C[79]), ctx->circuit->constants +210);
    Fr_copy(&(C[80]), ctx->circuit->constants +211);
    Fr_copy(&(C[81]), ctx->circuit->constants +212);
    Fr_copy(&(C[82]), ctx->circuit->constants +213);
    Fr_copy(&(C[83]), ctx->circuit->constants +214);
    Fr_copy(&(C[84]), ctx->circuit->constants +215);
    Fr_copy(&(C[85]), ctx->circuit->constants +216);
    Fr_copy(&(C[86]), ctx->circuit->constants +217);
    Fr_copy(&(C[87]), ctx->circuit->constants +218);
    Fr_copy(&(C[88]), ctx->circuit->constants +219);
    Fr_copy(&(C[89]), ctx->circuit->constants +220);
    Fr_copy(&(C[90]), ctx->circuit->constants +221);
    Fr_copy(&(C[91]), ctx->circuit->constants +222);
    Fr_copy(&(C[92]), ctx->circuit->constants +223);
    Fr_copy(&(C[93]), ctx->circuit->constants +224);
    Fr_copy(&(C[94]), ctx->circuit->constants +225);
    Fr_copy(&(C[95]), ctx->circuit->constants +226);
    Fr_copy(&(C[96]), ctx->circuit->constants +227);
    Fr_copy(&(C[97]), ctx->circuit->constants +228);
    Fr_copy(&(C[98]), ctx->circuit->constants +229);
    Fr_copy(&(C[99]), ctx->circuit->constants +230);
    Fr_copy(&(C[100]), ctx->circuit->constants +231);
    Fr_copy(&(C[101]), ctx->circuit->constants +232);
    Fr_copy(&(C[102]), ctx->circuit->constants +233);
    Fr_copy(&(C[103]), ctx->circuit->constants +234);
    Fr_copy(&(C[104]), ctx->circuit->constants +235);
    Fr_copy(&(C[105]), ctx->circuit->constants +236);
    Fr_copy(&(C[106]), ctx->circuit->constants +237);
    Fr_copy(&(C[107]), ctx->circuit->constants +238);
    Fr_copy(&(C[108]), ctx->circuit->constants +239);
    Fr_copy(&(C[109]), ctx->circuit->constants +240);
    Fr_copy(&(C[110]), ctx->circuit->constants +241);
    Fr_copy(&(C[111]), ctx->circuit->constants +242);
    Fr_copy(&(C[112]), ctx->circuit->constants +243);
    Fr_copy(&(C[113]), ctx->circuit->constants +244);
    Fr_copy(&(C[114]), ctx->circuit->constants +245);
    Fr_copy(&(C[115]), ctx->circuit->constants +246);
    Fr_copy(&(C[116]), ctx->circuit->constants +247);
    Fr_copy(&(C[117]), ctx->circuit->constants +248);
    Fr_copy(&(C[118]), ctx->circuit->constants +249);
    Fr_copy(&(C[119]), ctx->circuit->constants +250);
    Fr_copy(&(C[120]), ctx->circuit->constants +251);
    Fr_copy(&(C[121]), ctx->circuit->constants +252);
    Fr_copy(&(C[122]), ctx->circuit->constants +253);
    Fr_copy(&(C[123]), ctx->circuit->constants +254);
    Fr_copy(&(C[124]), ctx->circuit->constants +255);
    Fr_copy(&(C[125]), ctx->circuit->constants +256);
    Fr_copy(&(C[126]), ctx->circuit->constants +257);
    Fr_copy(&(C[127]), ctx->circuit->constants +258);
    Fr_copy(&(C[128]), ctx->circuit->constants +259);
    Fr_copy(&(C[129]), ctx->circuit->constants +260);
    Fr_copy(&(C[130]), ctx->circuit->constants +261);
    Fr_copy(&(C[131]), ctx->circuit->constants +262);
    Fr_copy(&(C[132]), ctx->circuit->constants +263);
    Fr_copy(&(C[133]), ctx->circuit->constants +264);
    Fr_copy(&(C[134]), ctx->circuit->constants +265);
    Fr_copy(&(C[135]), ctx->circuit->constants +266);
    Fr_copy(&(C[136]), ctx->circuit->constants +267);
    Fr_copy(&(C[137]), ctx->circuit->constants +268);
    Fr_copy(&(C[138]), ctx->circuit->constants +269);
    Fr_copy(&(C[139]), ctx->circuit->constants +270);
    Fr_copy(&(C[140]), ctx->circuit->constants +271);
    Fr_copy(&(C[141]), ctx->circuit->constants +272);
    Fr_copy(&(C[142]), ctx->circuit->constants +273);
    Fr_copy(&(C[143]), ctx->circuit->constants +274);
    Fr_copy(&(C[144]), ctx->circuit->constants +275);
    Fr_copy(&(C[145]), ctx->circuit->constants +276);
    Fr_copy(&(C[146]), ctx->circuit->constants +277);
    Fr_copy(&(C[147]), ctx->circuit->constants +278);
    Fr_copy(&(C[148]), ctx->circuit->constants +279);
    Fr_copy(&(C[149]), ctx->circuit->constants +280);
    Fr_copy(&(C[150]), ctx->circuit->constants +281);
    Fr_copy(&(C[151]), ctx->circuit->constants +282);
    Fr_copy(&(C[152]), ctx->circuit->constants +283);
    Fr_copy(&(C[153]), ctx->circuit->constants +284);
    Fr_copy(&(C[154]), ctx->circuit->constants +285);
    Fr_copy(&(C[155]), ctx->circuit->constants +286);
    Fr_copy(&(C[156]), ctx->circuit->constants +287);
    Fr_copy(&(C[157]), ctx->circuit->constants +288);
    Fr_copy(&(C[158]), ctx->circuit->constants +289);
    Fr_copy(&(C[159]), ctx->circuit->constants +290);
    Fr_copy(&(C[160]), ctx->circuit->constants +291);
    Fr_copy(&(C[161]), ctx->circuit->constants +292);
    Fr_copy(&(C[162]), ctx->circuit->constants +293);
    Fr_copy(&(C[163]), ctx->circuit->constants +294);
    Fr_copy(&(C[164]), ctx->circuit->constants +295);
    Fr_copy(&(C[165]), ctx->circuit->constants +296);
    Fr_copy(&(C[166]), ctx->circuit->constants +297);
    Fr_copy(&(C[167]), ctx->circuit->constants +298);
    Fr_copy(&(C[168]), ctx->circuit->constants +130);
    Fr_copy(&(C[169]), ctx->circuit->constants +299);
    Fr_copy(&(C[170]), ctx->circuit->constants +300);
    Fr_copy(&(C[171]), ctx->circuit->constants +301);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 295));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 333));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 119));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Sigma
*/
void Sigma_9bc213b5a2a7f9f4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_2[1];
    int _in_sigIdx_;
    int _in2_sigIdx_;
    int _in4_sigIdx_;
    int _out_sigIdx_;
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _in2_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2b9fc1192bd45ee4LL /* in2 */);
    _in4_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2b9fbf192bd45b7eLL /* in4 */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out */
    /* signal in2 */
    /* signal in4 */
    /* in2 <== in*in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_1, 1);
    Fr_mul(_tmp, _sigValue, _sigValue_1);
    ctx->setSignal(__cIdx, __cIdx, _in2_sigIdx_, _tmp);
    /* in4 <== in2*in2 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in2_sigIdx_, _sigValue_2, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _in2_sigIdx_, _sigValue_3, 1);
    Fr_mul(_tmp_1, _sigValue_2, _sigValue_3);
    ctx->setSignal(__cIdx, __cIdx, _in4_sigIdx_, _tmp_1);
    /* out <== in4*in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in4_sigIdx_, _sigValue_4, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_5, 1);
    Fr_mul(_tmp_2, _sigValue_4, _sigValue_5);
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx_, _tmp_2);
    ctx->finished(__cIdx);
}
/*
Mix
M=[[2403374341218329033833829319126620678574142855762879845168386992221997973377,-1584798838653929294992862390007336803747259493703996954719916533354684705881,8231993393123497086981394024326299723908082400485525981041091100174769035844,585233341195159271286053075000909871551306018625471288182302288198085306667],[437528551181724695777836861476472920145695123965547982941391351805226960484,9734491229714010905696125164225537239823896802828333113497265186294853876714,9965000562911777424035307094810532793483803310364029181404609811348995585030,1215065203743124699166369466206182992335742749427189296205606913049951528764],[8600580947939115424471003927536788141947593594142989705969216462391314596572,6324812422188376328933097806060173298416399816447329362928366451181032079438,5621422643914750135588540724128233056460898507503426936316567240510271898969,-4204913538420787138762588162130091717450285625343566498584852452088410824592],[-8812942836047544789607390678596197794588769703400358387384584491074819079790,7535622448031697494144663954201432659072667815870398064330664130043149450232,-5294393301105852284639112088034795891831194612221493050592827070663053751717,-3127391544144884515481171304755859317190597293724701425697609990254309692646]]
t=4
*/
void Mix_f1207daf3832498e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement lc[1];
    FrElement _tmp_6[1];
    FrElement j[1];
    FrElement M[16];
    FrElement _sigValue_1[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _tmp_9[1];
    FrElement _tmp_11[1];
    FrElement _tmp_14[1];
    FrElement i[1];
    FrElement _num_3[1];
    FrElement _num_4[1];
    FrElement _tmp_15[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _tmp_21[1];
    FrElement _tmp_23[1];
    int _in_sigIdx_;
    int _offset_14;
    int _offset_23;
    int _offset_25;
    int _out_sigIdx_;
    int _offset_33;
    int _offset_45;
    int _offset_47;
    int _offset_55;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_15;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _v_22;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(M[0]), ctx->circuit->constants +334);
    Fr_copy(&(M[1]), ctx->circuit->constants +335);
    Fr_copy(&(M[2]), ctx->circuit->constants +336);
    Fr_copy(&(M[3]), ctx->circuit->constants +337);
    Fr_copy(&(M[4]), ctx->circuit->constants +338);
    Fr_copy(&(M[5]), ctx->circuit->constants +339);
    Fr_copy(&(M[6]), ctx->circuit->constants +340);
    Fr_copy(&(M[7]), ctx->circuit->constants +341);
    Fr_copy(&(M[8]), ctx->circuit->constants +342);
    Fr_copy(&(M[9]), ctx->circuit->constants +343);
    Fr_copy(&(M[10]), ctx->circuit->constants +344);
    Fr_copy(&(M[11]), ctx->circuit->constants +345);
    Fr_copy(&(M[12]), ctx->circuit->constants +346);
    Fr_copy(&(M[13]), ctx->circuit->constants +347);
    Fr_copy(&(M[14]), ctx->circuit->constants +348);
    Fr_copy(&(M[15]), ctx->circuit->constants +349);
    Fr_copy(&(_tmp_14[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_3[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_4[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* var lc */
    /* for (var i=0;i<t;i++) */
    /* lc = 0 */
    /* for (var j=0;j<t;j++) */
    /* lc += M[j][i]*in[j] */
    _offset_14 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_14, _sigValue, 1);
    Fr_mul(_tmp_2, (ctx->circuit->constants + 334), _sigValue);
    Fr_add(_tmp_3, (ctx->circuit->constants + 0), _tmp_2);
    Fr_copyn(lc, _tmp_3, 1);
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* lc += M[j][i]*in[j] */
        _offset_23 = Fr_toInt(j)*4;
        _v_15 = M + _offset_23;
        _offset_25 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_25, _sigValue_1, 1);
        Fr_mul(_tmp_7, _v_15, _sigValue_1);
        Fr_add(_tmp_8, lc, _tmp_7);
        Fr_copyn(lc, _tmp_8, 1);
        Fr_copyn(_tmp_10, j, 1);
        Fr_add(_tmp_9, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_9, 1);
        Fr_lt(_tmp_11, j, (ctx->circuit->constants + 119));
        _loopCond = _tmp_11;
    }
    /* out[i] <== lc */
    _offset_33 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_33, lc);
    _loopCond_1 = _tmp_14;
    while (Fr_isTrue(_loopCond_1)) {
        /* lc = 0 */
        Fr_copyn(lc, _num_3, 1);
        /* for (var j=0;j<t;j++) */
        Fr_copyn(j, _num_4, 1);
        Fr_lt(_tmp_15, j, (ctx->circuit->constants + 119));
        _loopCond_2 = _tmp_15;
        while (Fr_isTrue(_loopCond_2)) {
            /* lc += M[j][i]*in[j] */
            _offset_45 = Fr_toInt(j)*4 + Fr_toInt(i);
            _v_22 = M + _offset_45;
            _offset_47 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_47, _sigValue_2, 1);
            Fr_mul(_tmp_16, _v_22, _sigValue_2);
            Fr_add(_tmp_17, lc, _tmp_16);
            Fr_copyn(lc, _tmp_17, 1);
            Fr_copyn(_tmp_19, j, 1);
            Fr_add(_tmp_18, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_18, 1);
            Fr_lt(_tmp_20, j, (ctx->circuit->constants + 119));
            _loopCond_2 = _tmp_20;
        }
        /* out[i] <== lc */
        _offset_55 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_55, lc);
        Fr_copyn(_tmp_22, i, 1);
        Fr_add(_tmp_21, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_21, 1);
        Fr_lt(_tmp_23, i, (ctx->circuit->constants + 119));
        _loopCond_1 = _tmp_23;
    }
    ctx->finished(__cIdx);
}
/*
TreeLayer
height=0
*/
void TreeLayer_dbbe2ca561ae678a(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_8[1];
    FrElement i[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_10[1];
    FrElement _tmp_11[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_13[1];
    FrElement _tmp_12[1];
    FrElement _tmp_14[1];
    int _compIdx;
    int _offset_8;
    int _left_sigIdx_;
    int _ins_sigIdx_;
    int _offset_10;
    int _compIdx_1;
    int _offset_12;
    int _right_sigIdx_;
    int _offset_14;
    int _compIdx_2;
    int _offset_16;
    int _hash_sigIdx_;
    int _outs_sigIdx_;
    int _offset_18;
    int _compIdx_3;
    int _offset_24;
    int _left_sigIdx__1;
    int _offset_26;
    int _compIdx_4;
    int _offset_28;
    int _right_sigIdx__1;
    int _offset_30;
    int _compIdx_5;
    int _offset_32;
    int _hash_sigIdx__1;
    int _offset_34;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_ins;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_outs;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _compSizes_5;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_8[0]), ctx->circuit->constants +0);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _ins_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2ba002192bd4cd57LL /* ins */);
    _outs_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xdb8c17b45221aae4LL /* outs */);
    _sigSizes_ins = ctx->getSignalSizes(__cIdx, 0x2ba002192bd4cd57LL /* ins */);
    _sigSizes_outs = ctx->getSignalSizes(__cIdx, 0xdb8c17b45221aae4LL /* outs */);
    /* var nItems = 1 << height */
    /* signal input ins[nItems * 2] */
    /* signal output outs[nItems] */
    /* component hash[nItems] */
    /* for (var i = 0;i < nItems;i++) */
    /* hash[i] = HashLeftRight() */
    /* hash[i].left <== ins[i * 2] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _offset_8 = _compIdx;
    _left_sigIdx_ = ctx->getSignalOffset(_offset_8, 0x24b070ada2041cb0LL /* left */);
    _offset_10 = _ins_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue, 1);
    ctx->setSignal(__cIdx, _offset_8, _left_sigIdx_, _sigValue);
    /* hash[i].right <== ins[i * 2 + 1] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _offset_12 = _compIdx_1;
    _right_sigIdx_ = ctx->getSignalOffset(_offset_12, 0x76aaaa535714d805LL /* right */);
    _offset_14 = _ins_sigIdx_ + 1*_sigSizes_ins[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_14, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _offset_12, _right_sigIdx_, _sigValue_1);
    /* hash[i].hash ==> outs[i] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    _offset_16 = _compIdx_2;
    _hash_sigIdx_ = ctx->getSignalOffset(_offset_16, 0x2e3d9ecc741a7811LL /* hash */);
    ctx->multiGetSignal(__cIdx, _offset_16, _hash_sigIdx_, _sigValue_2, 1);
    _offset_18 = _outs_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_18, _sigValue_2);
    _loopCond = _tmp_8;
    while (Fr_isTrue(_loopCond)) {
        /* hash[i] = HashLeftRight() */
        /* hash[i].left <== ins[i * 2] */
        _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _offset_24 = _compIdx_3 + Fr_toInt(i)*_compSizes_3[1];
        _left_sigIdx__1 = ctx->getSignalOffset(_offset_24, 0x24b070ada2041cb0LL /* left */);
        Fr_mul(_tmp_9, i, (ctx->circuit->constants + 2));
        _offset_26 = _ins_sigIdx_ + Fr_toInt(_tmp_9)*_sigSizes_ins[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_26, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _offset_24, _left_sigIdx__1, _sigValue_3);
        /* hash[i].right <== ins[i * 2 + 1] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _offset_28 = _compIdx_4 + Fr_toInt(i)*_compSizes_4[1];
        _right_sigIdx__1 = ctx->getSignalOffset(_offset_28, 0x76aaaa535714d805LL /* right */);
        Fr_mul(_tmp_10, i, (ctx->circuit->constants + 2));
        Fr_add(_tmp_11, _tmp_10, (ctx->circuit->constants + 1));
        _offset_30 = _ins_sigIdx_ + Fr_toInt(_tmp_11)*_sigSizes_ins[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_30, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _offset_28, _right_sigIdx__1, _sigValue_4);
        /* hash[i].hash ==> outs[i] */
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
        _offset_32 = _compIdx_5 + Fr_toInt(i)*_compSizes_5[1];
        _hash_sigIdx__1 = ctx->getSignalOffset(_offset_32, 0x2e3d9ecc741a7811LL /* hash */);
        ctx->multiGetSignal(__cIdx, _offset_32, _hash_sigIdx__1, _sigValue_5, 1);
        _offset_34 = _outs_sigIdx_ + Fr_toInt(i)*_sigSizes_outs[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_34, _sigValue_5);
        Fr_copyn(_tmp_13, i, 1);
        Fr_add(_tmp_12, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_12, 1);
        Fr_lt(_tmp_14, i, (ctx->circuit->constants + 1));
        _loopCond = _tmp_14;
    }
    ctx->finished(__cIdx);
}
/*
HashLeftRight
*/
void HashLeftRight_2b8ed6ec8aee9b86(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    int _compIdx;
    int _inputs_sigIdx_;
    int _offset;
    int _left_sigIdx_;
    int _compIdx_1;
    int _inputs_sigIdx__1;
    int _offset_1;
    int _right_sigIdx_;
    int _compIdx_2;
    int _out_sigIdx_;
    int _hash_sigIdx_;
    Circom_Sizes _sigSizes_inputs;
    Circom_Sizes _sigSizes_inputs_1;
    _left_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x24b070ada2041cb0LL /* left */);
    _right_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x76aaaa535714d805LL /* right */);
    _hash_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x2e3d9ecc741a7811LL /* hash */);
    /* signal input left */
    /* signal input right */
    /* signal output hash */
    /* component hasher = Poseidon(2) */
    /* hasher.inputs[0] <== left */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _inputs_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x499fc592a46585f8LL /* inputs */);
    _sigSizes_inputs = ctx->getSignalSizes(_compIdx, 0x499fc592a46585f8LL /* inputs */);
    _offset = _inputs_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _left_sigIdx_, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _offset, _sigValue);
    /* hasher.inputs[1] <== right */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _inputs_sigIdx__1 = ctx->getSignalOffset(_compIdx_1, 0x499fc592a46585f8LL /* inputs */);
    _sigSizes_inputs_1 = ctx->getSignalSizes(_compIdx_1, 0x499fc592a46585f8LL /* inputs */);
    _offset_1 = _inputs_sigIdx__1 + 1*_sigSizes_inputs_1[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _right_sigIdx_, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_1, _sigValue_1);
    /* hash <== hasher.out */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x3ea12be701f4b1eaLL /* hasher */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_2, _out_sigIdx_, _sigValue_2, 1);
    ctx->setSignal(__cIdx, __cIdx, _hash_sigIdx_, _sigValue_2);
    ctx->finished(__cIdx);
}
/*
Poseidon
nInputs=2
*/
void Poseidon_9ccc1bed8977b9da(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_11[1];
    FrElement j[1];
    FrElement _tmp_13[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_15[1];
    FrElement _tmp_14[1];
    FrElement _tmp_16[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_28[1];
    FrElement j_1[1];
    FrElement _sigValue_4[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_30[1];
    FrElement _tmp_29[1];
    FrElement _tmp_31[1];
    FrElement _tmp_36[1];
    FrElement i[1];
    FrElement k[1];
    FrElement j_2[1];
    FrElement _num_14[1];
    FrElement _tmp_37[1];
    FrElement _tmp_38[1];
    FrElement _tmp_39[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_40[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_42[1];
    FrElement _tmp_41[1];
    FrElement _tmp_43[1];
    FrElement _tmp_45[1];
    FrElement _tmp_48[1];
    FrElement _tmp_49[1];
    FrElement _tmp_51[1];
    FrElement _tmp_52[1];
    FrElement _num_21[1];
    FrElement _tmp_53[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_55[1];
    FrElement _tmp_54[1];
    FrElement _tmp_56[1];
    FrElement _tmp_58[1];
    FrElement _sigValue_10[1];
    FrElement _sigValue_11[1];
    FrElement _num_25[1];
    FrElement _tmp_59[1];
    FrElement _sigValue_12[1];
    FrElement _tmp_61[1];
    FrElement _tmp_60[1];
    FrElement _tmp_62[1];
    FrElement _tmp_64[1];
    FrElement _tmp_63[1];
    FrElement _tmp_67[1];
    FrElement _sigValue_13[1];
    FrElement _tmp_73[1];
    FrElement _sigValue_14[1];
    int _compIdx;
    int _offset_25;
    int _in_sigIdx_;
    int _offset_27;
    int _inputs_sigIdx_;
    int _offset_29;
    int _compIdx_1;
    int _offset_38;
    int _in_sigIdx__1;
    int _offset_40;
    int _offset_42;
    int _compIdx_2;
    int _offset_44;
    int _in_sigIdx__2;
    int _offset_46;
    int _compIdx_3;
    int _offset_65;
    int _in_sigIdx__3;
    int _compIdx_4;
    int _offset_67;
    int _out_sigIdx_;
    int _offset_69;
    int _compIdx_5;
    int _offset_71;
    int _in_sigIdx__4;
    int _offset_73;
    int _compIdx_6;
    int _offset_76;
    int _out_sigIdx__1;
    int _compIdx_7;
    int _offset_83;
    int _in_sigIdx__5;
    int _compIdx_8;
    int _offset_85;
    int _out_sigIdx__2;
    int _offset_87;
    int _compIdx_9;
    int _offset_89;
    int _in_sigIdx__6;
    int _offset_91;
    int _compIdx_10;
    int _offset_94;
    int _out_sigIdx__3;
    int _compIdx_11;
    int _offset_111;
    int _in_sigIdx__7;
    int _offset_113;
    int _offset_115;
    int _compIdx_12;
    int _offset_117;
    int _in_sigIdx__8;
    int _offset_119;
    int _compIdx_13;
    int _offset_121;
    int _in_sigIdx__9;
    int _offset_123;
    int _compIdx_14;
    int _offset_125;
    int _out_sigIdx__4;
    int _offset_127;
    int _compIdx_15;
    int _offset_148;
    int _in_sigIdx__10;
    int _compIdx_16;
    int _offset_150;
    int _out_sigIdx__5;
    int _offset_152;
    int _compIdx_17;
    int _offset_154;
    int _in_sigIdx__11;
    int _offset_156;
    int _compIdx_18;
    int _offset_159;
    int _out_sigIdx__6;
    int _compIdx_19;
    int _offset_168;
    int _in_sigIdx__12;
    int _compIdx_20;
    int _offset_170;
    int _out_sigIdx__7;
    int _offset_171;
    int _compIdx_21;
    int _offset_173;
    int _in_sigIdx__13;
    int _offset_174;
    int _compIdx_22;
    int _offset_176;
    int _out_sigIdx__8;
    int _compIdx_23;
    int _offset_181;
    int _in_sigIdx__14;
    int _offset_183;
    int _compIdx_24;
    int _offset_185;
    int _out_sigIdx__9;
    int _offset_187;
    int _compIdx_25;
    int _in_sigIdx__15;
    int _compIdx_26;
    int _offset_199;
    int _out_sigIdx__10;
    int _offset_200;
    int _compIdx_27;
    int _out_sigIdx__11;
    int _out_sigIdx__12;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_inputs;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_in_4;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _sigSizes_in_5;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_in_6;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _sigSizes_in_7;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_15;
    Circom_Sizes _compSizes_16;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_17;
    Circom_Sizes _sigSizes_in_8;
    Circom_Sizes _compSizes_18;
    Circom_Sizes _compSizes_19;
    Circom_Sizes _compSizes_20;
    Circom_Sizes _sigSizes_out_4;
    Circom_Sizes _compSizes_21;
    Circom_Sizes _sigSizes_in_9;
    Circom_Sizes _compSizes_22;
    Circom_Sizes _compSizes_23;
    Circom_Sizes _sigSizes_in_10;
    Circom_Sizes _compSizes_24;
    Circom_Sizes _sigSizes_out_5;
    Circom_Sizes _compSizes_25;
    Circom_Sizes _sigSizes_out_6;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _loopCond_3;
    PFrElement _ter;
    PFrElement _loopCond_4;
    PFrElement _loopCond_5;
    Fr_copy(&(_tmp_11[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_28[0]), ctx->circuit->constants +1);
    Fr_copy(&(j_1[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_36[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(k[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_14[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_21[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_25[0]), ctx->circuit->constants +1);
    _inputs_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x499fc592a46585f8LL /* inputs */);
    _out_sigIdx__12 = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_inputs = ctx->getSignalSizes(__cIdx, 0x499fc592a46585f8LL /* inputs */);
    /* signal input inputs[nInputs] */
    /* signal output out */
    /* var t = nInputs + 1 */
    /* var nRoundsF = 8 */
    /* var nRoundsP = 35 */
    /* var C[t*(nRoundsF + nRoundsP)] = POSEIDON_C(t) */
    /* var M[t][t] = POSEIDON_M(t) */
    /* component ark[nRoundsF + nRoundsP - 1] */
    /* component sigmaF[nRoundsF - 1][t] */
    /* component sigmaP[nRoundsP] */
    /* component mix[nRoundsF + nRoundsP - 1] */
    /* var k */
    /* for (var i=0;i<nRoundsF + nRoundsP - 1;i++) */
    /* ark[i] = Ark(t, C, t*i) */
    /* for (var j=0;j<t;j++) */
    /* if (i==0) */
    /* if (j<nInputs) */
    /* ark[i].in[j] <== inputs[j] */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
    _offset_25 = _compIdx;
    _in_sigIdx_ = ctx->getSignalOffset(_offset_25, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_offset_25, 0x08b73807b55c4bbeLL /* in */);
    _offset_27 = _in_sigIdx_;
    _offset_29 = _inputs_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue, 1);
    ctx->setSignal(__cIdx, _offset_25, _offset_27, _sigValue);
    _loopCond = _tmp_11;
    while (Fr_isTrue(_loopCond)) {
        /* if (i==0) */
        /* if (j<nInputs) */
        Fr_lt(_tmp_13, j, (ctx->circuit->constants + 2));
        if (Fr_isTrue(_tmp_13)) {
            /* ark[i].in[j] <== inputs[j] */
            _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_38 = _compIdx_1;
            _in_sigIdx__1 = ctx->getSignalOffset(_offset_38, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_1 = ctx->getSignalSizes(_offset_38, 0x08b73807b55c4bbeLL /* in */);
            _offset_40 = _in_sigIdx__1 + Fr_toInt(j)*_sigSizes_in_1[1];
            _offset_42 = _inputs_sigIdx_ + Fr_toInt(j)*_sigSizes_inputs[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_42, _sigValue_1, 1);
            ctx->setSignal(__cIdx, _offset_38, _offset_40, _sigValue_1);
        } else {
            /* ark[i].in[j] <== 0 */
            _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_44 = _compIdx_2;
            _in_sigIdx__2 = ctx->getSignalOffset(_offset_44, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_2 = ctx->getSignalSizes(_offset_44, 0x08b73807b55c4bbeLL /* in */);
            _offset_46 = _in_sigIdx__2 + Fr_toInt(j)*_sigSizes_in_2[1];
            ctx->setSignal(__cIdx, _offset_44, _offset_46, (ctx->circuit->constants + 0));
        }
        Fr_copyn(_tmp_15, j, 1);
        Fr_add(_tmp_14, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_14, 1);
        Fr_lt(_tmp_16, j, (ctx->circuit->constants + 5));
        _loopCond = _tmp_16;
    }
    /* if (i < nRoundsF/2 || i >= nRoundsP + nRoundsF/2) */
    /* k = i < nRoundsF/2 ? i : i - nRoundsP */
    /* mix[i] = Mix(t, M) */
    /* for (var j=0;j<t;j++) */
    /* sigmaF[k][j] = Sigma() */
    /* sigmaF[k][j].in <== ark[i].out[j] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _offset_65 = _compIdx_3;
    _in_sigIdx__3 = ctx->getSignalOffset(_offset_65, 0x08b73807b55c4bbeLL /* in */);
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
    _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
    _offset_67 = _compIdx_4;
    _out_sigIdx_ = ctx->getSignalOffset(_offset_67, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_offset_67, 0x19f79b1921bbcfffLL /* out */);
    _offset_69 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _offset_67, _offset_69, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _offset_65, _in_sigIdx__3, _sigValue_2);
    /* mix[i].in[j] <== sigmaF[k][j].out */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
    _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
    _offset_71 = _compIdx_5;
    _in_sigIdx__4 = ctx->getSignalOffset(_offset_71, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_3 = ctx->getSignalSizes(_offset_71, 0x08b73807b55c4bbeLL /* in */);
    _offset_73 = _in_sigIdx__4;
    _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
    _offset_76 = _compIdx_6;
    _out_sigIdx__1 = ctx->getSignalOffset(_offset_76, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _offset_76, _out_sigIdx__1, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _offset_71, _offset_73, _sigValue_3);
    _loopCond_1 = _tmp_28;
    while (Fr_isTrue(_loopCond_1)) {
        /* sigmaF[k][j] = Sigma() */
        /* sigmaF[k][j].in <== ark[i].out[j] */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _offset_83 = _compIdx_7 + Fr_toInt(j_1)*_compSizes_7[2];
        _in_sigIdx__5 = ctx->getSignalOffset(_offset_83, 0x08b73807b55c4bbeLL /* in */);
        _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
        _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
        _offset_85 = _compIdx_8;
        _out_sigIdx__2 = ctx->getSignalOffset(_offset_85, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_offset_85, 0x19f79b1921bbcfffLL /* out */);
        _offset_87 = _out_sigIdx__2 + Fr_toInt(j_1)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _offset_85, _offset_87, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _offset_83, _in_sigIdx__5, _sigValue_4);
        /* mix[i].in[j] <== sigmaF[k][j].out */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
        _offset_89 = _compIdx_9;
        _in_sigIdx__6 = ctx->getSignalOffset(_offset_89, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_4 = ctx->getSignalSizes(_offset_89, 0x08b73807b55c4bbeLL /* in */);
        _offset_91 = _in_sigIdx__6 + Fr_toInt(j_1)*_sigSizes_in_4[1];
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
        _offset_94 = _compIdx_10 + Fr_toInt(j_1)*_compSizes_10[2];
        _out_sigIdx__3 = ctx->getSignalOffset(_offset_94, 0x19f79b1921bbcfffLL /* out */);
        ctx->multiGetSignal(__cIdx, _offset_94, _out_sigIdx__3, _sigValue_5, 1);
        ctx->setSignal(__cIdx, _offset_89, _offset_91, _sigValue_5);
        Fr_copyn(_tmp_30, j_1, 1);
        Fr_add(_tmp_29, j_1, (ctx->circuit->constants + 1));
        Fr_copyn(j_1, _tmp_29, 1);
        Fr_lt(_tmp_31, j_1, (ctx->circuit->constants + 5));
        _loopCond_1 = _tmp_31;
    }
    _loopCond_2 = _tmp_36;
    while (Fr_isTrue(_loopCond_2)) {
        /* ark[i] = Ark(t, C, t*i) */
        /* for (var j=0;j<t;j++) */
        Fr_copyn(j, _num_14, 1);
        Fr_lt(_tmp_37, j, (ctx->circuit->constants + 5));
        _loopCond_3 = _tmp_37;
        while (Fr_isTrue(_loopCond_3)) {
            /* if (i==0) */
            Fr_eq(_tmp_38, i, (ctx->circuit->constants + 0));
            if (Fr_isTrue(_tmp_38)) {
                /* if (j<nInputs) */
                Fr_lt(_tmp_39, j, (ctx->circuit->constants + 2));
                if (Fr_isTrue(_tmp_39)) {
                    /* ark[i].in[j] <== inputs[j] */
                    _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _offset_111 = _compIdx_11 + Fr_toInt(i)*_compSizes_11[1];
                    _in_sigIdx__7 = ctx->getSignalOffset(_offset_111, 0x08b73807b55c4bbeLL /* in */);
                    _sigSizes_in_5 = ctx->getSignalSizes(_offset_111, 0x08b73807b55c4bbeLL /* in */);
                    _offset_113 = _in_sigIdx__7 + Fr_toInt(j)*_sigSizes_in_5[1];
                    _offset_115 = _inputs_sigIdx_ + Fr_toInt(j)*_sigSizes_inputs[1];
                    ctx->multiGetSignal(__cIdx, __cIdx, _offset_115, _sigValue_6, 1);
                    ctx->setSignal(__cIdx, _offset_111, _offset_113, _sigValue_6);
                } else {
                    /* ark[i].in[j] <== 0 */
                    _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                    _offset_117 = _compIdx_12 + Fr_toInt(i)*_compSizes_12[1];
                    _in_sigIdx__8 = ctx->getSignalOffset(_offset_117, 0x08b73807b55c4bbeLL /* in */);
                    _sigSizes_in_6 = ctx->getSignalSizes(_offset_117, 0x08b73807b55c4bbeLL /* in */);
                    _offset_119 = _in_sigIdx__8 + Fr_toInt(j)*_sigSizes_in_6[1];
                    ctx->setSignal(__cIdx, _offset_117, _offset_119, (ctx->circuit->constants + 0));
                }
            } else {
                /* ark[i].in[j] <== mix[i-1].out[j] */
                _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_121 = _compIdx_13 + Fr_toInt(i)*_compSizes_13[1];
                _in_sigIdx__9 = ctx->getSignalOffset(_offset_121, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_7 = ctx->getSignalSizes(_offset_121, 0x08b73807b55c4bbeLL /* in */);
                _offset_123 = _in_sigIdx__9 + Fr_toInt(j)*_sigSizes_in_7[1];
                _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                Fr_sub(_tmp_40, i, (ctx->circuit->constants + 1));
                _offset_125 = _compIdx_14 + Fr_toInt(_tmp_40)*_compSizes_14[1];
                _out_sigIdx__4 = ctx->getSignalOffset(_offset_125, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_2 = ctx->getSignalSizes(_offset_125, 0x19f79b1921bbcfffLL /* out */);
                _offset_127 = _out_sigIdx__4 + Fr_toInt(j)*_sigSizes_out_2[1];
                ctx->multiGetSignal(__cIdx, _offset_125, _offset_127, _sigValue_7, 1);
                ctx->setSignal(__cIdx, _offset_121, _offset_123, _sigValue_7);
            }
            Fr_copyn(_tmp_42, j, 1);
            Fr_add(_tmp_41, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_41, 1);
            Fr_lt(_tmp_43, j, (ctx->circuit->constants + 5));
            _loopCond_3 = _tmp_43;
        }
        /* if (i < nRoundsF/2 || i >= nRoundsP + nRoundsF/2) */
        Fr_lt(_tmp_45, i, (ctx->circuit->constants + 119));
        Fr_geq(_tmp_48, i, (ctx->circuit->constants + 128));
        Fr_lor(_tmp_49, _tmp_45, _tmp_48);
        if (Fr_isTrue(_tmp_49)) {
            /* k = i < nRoundsF/2 ? i : i - nRoundsP */
            Fr_lt(_tmp_51, i, (ctx->circuit->constants + 119));
            if (Fr_isTrue(_tmp_51)) {
                _ter = i;
            } else {
                Fr_sub(_tmp_52, i, (ctx->circuit->constants + 122));
                _ter = _tmp_52;
            }
            Fr_copyn(k, _ter, 1);
            /* mix[i] = Mix(t, M) */
            /* for (var j=0;j<t;j++) */
            Fr_copyn(j_1, _num_21, 1);
            Fr_lt(_tmp_53, j_1, (ctx->circuit->constants + 5));
            _loopCond_4 = _tmp_53;
            while (Fr_isTrue(_loopCond_4)) {
                /* sigmaF[k][j] = Sigma() */
                /* sigmaF[k][j].in <== ark[i].out[j] */
                _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _offset_148 = _compIdx_15 + Fr_toInt(k)*_compSizes_15[1] + Fr_toInt(j_1)*_compSizes_15[2];
                _in_sigIdx__10 = ctx->getSignalOffset(_offset_148, 0x08b73807b55c4bbeLL /* in */);
                _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_16 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_150 = _compIdx_16 + Fr_toInt(i)*_compSizes_16[1];
                _out_sigIdx__5 = ctx->getSignalOffset(_offset_150, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_3 = ctx->getSignalSizes(_offset_150, 0x19f79b1921bbcfffLL /* out */);
                _offset_152 = _out_sigIdx__5 + Fr_toInt(j_1)*_sigSizes_out_3[1];
                ctx->multiGetSignal(__cIdx, _offset_150, _offset_152, _sigValue_8, 1);
                ctx->setSignal(__cIdx, _offset_148, _in_sigIdx__10, _sigValue_8);
                /* mix[i].in[j] <== sigmaF[k][j].out */
                _compIdx_17 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_17 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                _offset_154 = _compIdx_17 + Fr_toInt(i)*_compSizes_17[1];
                _in_sigIdx__11 = ctx->getSignalOffset(_offset_154, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_8 = ctx->getSignalSizes(_offset_154, 0x08b73807b55c4bbeLL /* in */);
                _offset_156 = _in_sigIdx__11 + Fr_toInt(j_1)*_sigSizes_in_8[1];
                _compIdx_18 = ctx->getSubComponentOffset(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _compSizes_18 = ctx->getSubComponentSizes(__cIdx, 0x6a591c8f893329d6LL /* sigmaF */);
                _offset_159 = _compIdx_18 + Fr_toInt(k)*_compSizes_18[1] + Fr_toInt(j_1)*_compSizes_18[2];
                _out_sigIdx__6 = ctx->getSignalOffset(_offset_159, 0x19f79b1921bbcfffLL /* out */);
                ctx->multiGetSignal(__cIdx, _offset_159, _out_sigIdx__6, _sigValue_9, 1);
                ctx->setSignal(__cIdx, _offset_154, _offset_156, _sigValue_9);
                Fr_copyn(_tmp_55, j_1, 1);
                Fr_add(_tmp_54, j_1, (ctx->circuit->constants + 1));
                Fr_copyn(j_1, _tmp_54, 1);
                Fr_lt(_tmp_56, j_1, (ctx->circuit->constants + 5));
                _loopCond_4 = _tmp_56;
            }
        } else {
            /* k = i - nRoundsF/2 */
            Fr_sub(_tmp_58, i, (ctx->circuit->constants + 119));
            Fr_copyn(k, _tmp_58, 1);
            /* mix[i] = Mix(t, M) */
            /* sigmaP[k] = Sigma() */
            /* sigmaP[k].in <== ark[i].out[0] */
            _compIdx_19 = ctx->getSubComponentOffset(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _compSizes_19 = ctx->getSubComponentSizes(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _offset_168 = _compIdx_19 + Fr_toInt(k)*_compSizes_19[1];
            _in_sigIdx__12 = ctx->getSignalOffset(_offset_168, 0x08b73807b55c4bbeLL /* in */);
            _compIdx_20 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
            _compSizes_20 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
            _offset_170 = _compIdx_20 + Fr_toInt(i)*_compSizes_20[1];
            _out_sigIdx__7 = ctx->getSignalOffset(_offset_170, 0x19f79b1921bbcfffLL /* out */);
            _sigSizes_out_4 = ctx->getSignalSizes(_offset_170, 0x19f79b1921bbcfffLL /* out */);
            _offset_171 = _out_sigIdx__7;
            ctx->multiGetSignal(__cIdx, _offset_170, _offset_171, _sigValue_10, 1);
            ctx->setSignal(__cIdx, _offset_168, _in_sigIdx__12, _sigValue_10);
            /* mix[i].in[0] <== sigmaP[k].out */
            _compIdx_21 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
            _compSizes_21 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
            _offset_173 = _compIdx_21 + Fr_toInt(i)*_compSizes_21[1];
            _in_sigIdx__13 = ctx->getSignalOffset(_offset_173, 0x08b73807b55c4bbeLL /* in */);
            _sigSizes_in_9 = ctx->getSignalSizes(_offset_173, 0x08b73807b55c4bbeLL /* in */);
            _offset_174 = _in_sigIdx__13;
            _compIdx_22 = ctx->getSubComponentOffset(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _compSizes_22 = ctx->getSubComponentSizes(__cIdx, 0x6a590e8f8933120cLL /* sigmaP */);
            _offset_176 = _compIdx_22 + Fr_toInt(k)*_compSizes_22[1];
            _out_sigIdx__8 = ctx->getSignalOffset(_offset_176, 0x19f79b1921bbcfffLL /* out */);
            ctx->multiGetSignal(__cIdx, _offset_176, _out_sigIdx__8, _sigValue_11, 1);
            ctx->setSignal(__cIdx, _offset_173, _offset_174, _sigValue_11);
            /* for (var j=1;j<t;j++) */
            Fr_copyn(j_2, _num_25, 1);
            Fr_lt(_tmp_59, j_2, (ctx->circuit->constants + 5));
            _loopCond_5 = _tmp_59;
            while (Fr_isTrue(_loopCond_5)) {
                /* mix[i].in[j] <== ark[i].out[j] */
                _compIdx_23 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
                _compSizes_23 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
                _offset_181 = _compIdx_23 + Fr_toInt(i)*_compSizes_23[1];
                _in_sigIdx__14 = ctx->getSignalOffset(_offset_181, 0x08b73807b55c4bbeLL /* in */);
                _sigSizes_in_10 = ctx->getSignalSizes(_offset_181, 0x08b73807b55c4bbeLL /* in */);
                _offset_183 = _in_sigIdx__14 + Fr_toInt(j_2)*_sigSizes_in_10[1];
                _compIdx_24 = ctx->getSubComponentOffset(__cIdx, 0xe756ba190570c283LL /* ark */);
                _compSizes_24 = ctx->getSubComponentSizes(__cIdx, 0xe756ba190570c283LL /* ark */);
                _offset_185 = _compIdx_24 + Fr_toInt(i)*_compSizes_24[1];
                _out_sigIdx__9 = ctx->getSignalOffset(_offset_185, 0x19f79b1921bbcfffLL /* out */);
                _sigSizes_out_5 = ctx->getSignalSizes(_offset_185, 0x19f79b1921bbcfffLL /* out */);
                _offset_187 = _out_sigIdx__9 + Fr_toInt(j_2)*_sigSizes_out_5[1];
                ctx->multiGetSignal(__cIdx, _offset_185, _offset_187, _sigValue_12, 1);
                ctx->setSignal(__cIdx, _offset_181, _offset_183, _sigValue_12);
                Fr_copyn(_tmp_61, j_2, 1);
                Fr_add(_tmp_60, j_2, (ctx->circuit->constants + 1));
                Fr_copyn(j_2, _tmp_60, 1);
                Fr_lt(_tmp_62, j_2, (ctx->circuit->constants + 5));
                _loopCond_5 = _tmp_62;
            }
        }
        Fr_copyn(_tmp_64, i, 1);
        Fr_add(_tmp_63, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_63, 1);
        Fr_lt(_tmp_67, i, (ctx->circuit->constants + 129));
        _loopCond_2 = _tmp_67;
    }
    /* component lastSigmaF = Sigma() */
    /* lastSigmaF.in <== mix[nRoundsF + nRoundsP - 2].out[0] + C[t*(nRoundsF + nRoundsP - 1)] */
    _compIdx_25 = ctx->getSubComponentOffset(__cIdx, 0x96f4a48322594ab2LL /* lastSigmaF */);
    _in_sigIdx__15 = ctx->getSignalOffset(_compIdx_25, 0x08b73807b55c4bbeLL /* in */);
    _compIdx_26 = ctx->getSubComponentOffset(__cIdx, 0x07f4511917565841LL /* mix */);
    _compSizes_25 = ctx->getSubComponentSizes(__cIdx, 0x07f4511917565841LL /* mix */);
    _offset_199 = _compIdx_26 + 41*_compSizes_25[1];
    _out_sigIdx__10 = ctx->getSignalOffset(_offset_199, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_6 = ctx->getSignalSizes(_offset_199, 0x19f79b1921bbcfffLL /* out */);
    _offset_200 = _out_sigIdx__10;
    ctx->multiGetSignal(__cIdx, _offset_199, _offset_200, _sigValue_13, 1);
    Fr_add(_tmp_73, _sigValue_13, (ctx->circuit->constants + 350));
    ctx->setSignal(__cIdx, _compIdx_25, _in_sigIdx__15, _tmp_73);
    /* out <== lastSigmaF.out */
    _compIdx_27 = ctx->getSubComponentOffset(__cIdx, 0x96f4a48322594ab2LL /* lastSigmaF */);
    _out_sigIdx__11 = ctx->getSignalOffset(_compIdx_27, 0x19f79b1921bbcfffLL /* out */);
    ctx->multiGetSignal(__cIdx, _compIdx_27, _out_sigIdx__11, _sigValue_14, 1);
    ctx->setSignal(__cIdx, __cIdx, _out_sigIdx__12, _sigValue_14);
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
in[2]=0
r=0
t=3
*/
void Ark_cc0aa8b2d72dc5b7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 351));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 0));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=3
t=3
*/
void Ark_83afb926fdd00fdc(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 354));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 5));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=6
t=3
*/
void Ark_2d2b2f1c2ba342f3(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 357));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 38));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=9
t=3
*/
void Ark_3b2b0fc1466cfe46(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 360));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 479));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=12
t=3
*/
void Ark_f247c81d2d1c108c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 363));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 302));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=15
t=3
*/
void Ark_6dcd2b19b6048525(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 366));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 52));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=18
t=3
*/
void Ark_a9c39eb775b9d876(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 369));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 53));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=21
t=3
*/
void Ark_a2debec1717655a6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 372));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 42));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=24
t=3
*/
void Ark_2332c4f81824e4ad(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 375));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 304));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=27
t=3
*/
void Ark_75db559d59a3f010(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 378));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 480));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=30
t=3
*/
void Ark_56e49ccffcab6b68(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 381));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 46));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=33
t=3
*/
void Ark_db616b1ebb2e23c5(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 384));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 123));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=36
t=3
*/
void Ark_dc2005ef2df0ba7e(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 387));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 306));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=39
t=3
*/
void Ark_efbcf6e9967b3b3b(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 390));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 128));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=42
t=3
*/
void Ark_e2d06fc35d97fccd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 393));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 129));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=45
t=3
*/
void Ark_54792bbb7269b534(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 396));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 481));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=48
t=3
*/
void Ark_acb488e2b5929bf3(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 399));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 118));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=51
t=3
*/
void Ark_57488fbe67036b3d(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 402));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 482));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=54
t=3
*/
void Ark_d8a80987c1c74a36(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 405));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 483));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=57
t=3
*/
void Ark_03df9d8aed1d283f(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 408));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 484));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=60
t=3
*/
void Ark_37004347de366d45(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 411));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 311));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=63
t=3
*/
void Ark_b28374f91fb3b4e8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 414));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 24));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=66
t=3
*/
void Ark_e3977114645060a7(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 417));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 485));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=69
t=3
*/
void Ark_2a884c16f50987c2(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 420));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 486));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=72
t=3
*/
void Ark_55b27e184263f6ee(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 423));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 313));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=75
t=3
*/
void Ark_82e9f640748c1eb3(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 426));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 487));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=78
t=3
*/
void Ark_2aae9919316337f4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 429));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 488));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=81
t=3
*/
void Ark_cc5823e4856a83a4(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 432));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 489));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=84
t=3
*/
void Ark_617e79d916f7f1db(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 435));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 316));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=87
t=3
*/
void Ark_40aa76dd527d1b62(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 438));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 490));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=90
t=3
*/
void Ark_fe7d96ea947e9f26(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 441));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 491));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=93
t=3
*/
void Ark_29b5aaedbfd556af(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 444));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 492));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=96
t=3
*/
void Ark_d17a2dc67cac3990(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 447));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 19));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=99
t=3
*/
void Ark_c0881f27cdf87eb9(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 450));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 493));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=102
t=3
*/
void Ark_99df33514fc403fc(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 453));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 494));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=105
t=3
*/
void Ark_13b1964dd73ae415(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 456));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 495));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=108
t=3
*/
void Ark_f92289f07eee08e6(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 459));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 321));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=111
t=3
*/
void Ark_cdf4fe179ea28a8c(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 462));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 496));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=114
t=3
*/
void Ark_7770f40ccc769723(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 465));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 497));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=117
t=3
*/
void Ark_c134700952438fca(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 468));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 498));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=120
t=3
*/
void Ark_a709f2c5779d53d8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 471));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 324));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Ark
C=[-6906033659262446021734649576704598927914629543260538103517843444491477707019,-10728271691636192673363984234094284657322691648658594064933739411500837925374,-3331467509450891548730063024738299105276350489813610812997363697666169424971,6077706151034941937470910855491519275551017967189723417321554220489604133927,-5006521572631706546855852538226694833277039502265087394997494005609563372036,-9876271232945207031518584354972272465157040205467258494964103038021766732161,-4948057954830701056815004952114086339900145836642103732139059472605997011534,5824335784884271598414310996018205184604556921706194079771163750175267292738,9624387954428619443390529161272263947941731462283536768126565215964248399599,10151972536037327406329123435846518228258532442634799622684907883604425178943,-1449815235572183132922126446238362950368062638516982112387779120821666430369,1827041493717408021786409918736272649168854457563098233501950788000385681237,7978940718423535138420166379645273925337919916402998527834189787276310111834,8497886171082673774511300829763366382988892427082950856151764990371997024994,-10134532443866579023195001269143973490291066872741744024257044697721329434848,-4932568351325950713525423225749828063386109340563312781746861208949530181941,10886176381776651131064651862508203335396705032580060357040750936149129628582,7241740662067080225686958676888604582571922094844893481362909099952479478179,-5543138356953473466446615332875851686085169007730175151341575824366023967552,-205868889699048788544599398943690340202212683720047478950158701894857276030,8186808102672419146989015728729957835908826192882772310494810317775898107652,9997467838010467020015517559502659549956454636043670921524761288860104773389,-9455170905111711957454159223570649593144879269247309892949686997712156934889,-7872164165444047586627976068814957849137526454324212923938245706309947224905,9538828259401265549671586148967231116390432150224484077428745234759710015217,-9967664042407536392865930289200480615837459443073521236039741319254762469555,-4263474370929020415016567067191858763760539824296336537247390441989037983741,1911323209893847161980236908456832051832382023207257893916917571832964015122,5026425580953985176932583748818346537259171647902293054384181709389613186440,-9992510785359015233236657377887332792639789691725981482787580688766219280292,-9275011988804017829120656266733523883985229541990166404708515501102247062789,10604527417329034584117498833687133310100476224116437106446056513259181854772,-6954549459344291106653109616700412647319263052140975475128516530374746427156,5990727841846033871381220890761066131995607822430049522475294243063621918199,-9593162257786578469666866996037354531093582633020164586171636215539930199061,2346178081240471496531925420586108789265484329689621833302254486917525879226,-9750779125587139021902307064036017440669238571058047327785512716877306752635,8029028956012618876048338994366972546417697251444431416728161182023753036657,9435705146921343353811232413603280486773204503334205274565004873404780179051,8814722432796386309905619996147046113517569172600166061221054169572886437510,3550894473404717930962935433237274064029372499406456113006450660742611312824,7008512830886890022378877857655841865151528173640858317821869666459852894779,5289159553378580346065467518484715028893359200076918741399952221907332805505,-5933055599141491461189479329301232897464259939005568909691393644960506573500,-768316944348367503225290444282628516729016712200375456103712869067006856441,10215353054828588676393566203038109045077693553557925548587661324640586820230,-9399579613166521331706831953285589400198848859374812948654641707439672676410,-10577431558870975161836566816810237191634523087546405965826084304540430525516,-97267105874526462360383107099966085083514983744361869369854270989417934237,-7915533587756558811970328681033455889082272933669154621253476319908558897601,9200823580664701537039290204385329465868369621850959052069831055086832613615,6984340043021407682953670936670325965578391230137106241045308028858552790776,-1013133127484083959473776049086999736440879653864521343832727136175805144750,2527757502098366875948720155324261615997590744274905394832852944689756785313,2281363774798165201423250759199512851641124293853220579709606649374895027341,10691516730863838236299140626752236717435755161014841312657542486995054030243,3971374341448743738824876435259914813141958983897952954090480560215334030556,7353255476949706342411818256890394318801604778766943741402029526262531353181,-9630222050505068972079278400957798358472780201777708007664824104868874302951,-957284679363933721252654442856574479780899706877719094997643988813166503413,7830286784956434356105356239638181106568230865517565771078557987381642623803,8441073173191162770836462920200380031009238596854510760752954175496748166112,-8385021621725692631682233285598514101573334715581070871953583034588425134676,-9706315170828543250993101949048599432851879178733589436774365177861941379958,3840247276315177431608338915577857372171393049894521508232696460334816211650,-6939222106410785129182308907520018113989395529267629522568039667333943316267,8670778817464922900945905868601708697410876904036111797232743028090788903939,-1958023708940512787020037401031267006983195847562189544493835385269652523589,-4867850332735032964477704269508850344827304309490957350898486776186996780451,-583192290090721516953191893283458259904971166555279358932822123729772757520,8557491418740296727144548458905993210823760184498814359978665321802089230285,7845009275215930583251596622843279338643956427682447531840606497242690596083,5449321140387667517935596221226811461716616628359403279737598075550109036497,2580471628296996354094559773039325244541535976525271386499766943706437662180,4278165879611386047557693554819097677507418195463919707284118876409408619014,2715050091751926867389118366621197375888229992834116606990017546203240874049,-3618711784661424519064081152079562134199199807621108131244525597324606587081,9329975396252988319787463867802411260023536392360163268566392704140763758393,9470568797001444668423958621712927705988264706740710753668930044019763845920,5201572146372361505155193875531950327815478114270789413472370159550343780449,8107638009194265553461552269749541099392912618630003300569382735306677688239,1084875518172970373808460102094278272846465733493447195388937184505434045240,2629767202024831711213125937588263032462463437000832520434751695007654872580,2050508690968708005494470514110238707618587625444853286795051775857831459283,5593759914666647040083677448882456343845376515939645946903869447365649038801,-1599073253620122393636144920461489759108649131986098161547585459947711063474,-8480608859183258462773544111600056101665385452757076323629777347267265278372,10750807877720868794070231969440995302340837369459215176518755311966532247318,9696399709341888432491337514840170200407760544767028812548022995287997496691,5978685305036350980986774223431335161072848643895796855800379393459747269166,8081017664573974222762052414726020563414913273819823545033985070974653652119,10056744450187150072316522229430481610087509870598707054302515301714770559082,-6208791349092521323977368019789294920880225069649095889673740077138397302013,-1308780219470929137968321309874674352018445497379483617237689126842916979903,7349600885649243866201494749706151175681085022500536198460582160729195723419,1922284119803619687229563868778780814679068093234418583137573940036019201273,5079274888620295082379080336576603444814306862296212344468085904271222412625,7833752175724603621424681698742059982058201915373295882912585639592764212019,5422468967804654990919408456301992874462880444567471041266335268388438298095,-8255705493340689299824241142750335414038286124734877681280383061729139014791,-1356779528993798927665408555010859812158690325914911848947593626442840091197,-3694051311982332188688519693906061961575455406600664584216125071601941111879,-216892486578725023408010458922522534483348150703795100114788999326874300963,9927338769357155157835616273389320719130348675369402800517801310640983228754,-8422871612043602849045400883842227213820694243242833123392931305006812581968,5416369980736326336712693297678476780536712381704365420962966561502770486919,-8971756691320359233370252075812468050867006883090418627259339573901827341424,-5936504529061904111419044171879506277286007228372850981181403241674390581025,10099891251867866253864976796765554683749241729274710410759589841081502714320,10622017773409531089708975106923901266002491921402202064889958467239481441754,-8494353497688057186111629271068901723772860962992141706105349532521621249289,-3209054489819439067075108654890031678568230376220490987569248768745328968780,-5957182021018277818742650742262586099809513641294584887725610152880779512348,-7552097016198318672398937214735196707626468964857396511682712228187998773424,2218815581887645880735740548391291457445650415428357656658486765487596873718,8575935526538939902839560179363934086346410267131171897843636417894890644444,6981911525991488510852553048530543598850554124327966280200331401534583739535,-9265548315968924918832494112469095458788630360579597726455722979098216236717,6107373495373907284778773345155907367951315368554912312471534601568416646218,-10448241904202735659831483696275719676609100532767263064194834922831324494067,5067210843629932015497007581511704952862600912007552357003732083646569820008,6306369954392695583152607978904775940530022480898229556131236481597615784425,-2772332984620607243295547370505915895211043536761998396212016091619380460138,1667689238623466956001187396237412716667933023945178425080454457281760709894,-8267081828628791013938414581066251090698949779608114392690811026637600081318,-2758755202202827530106761417091690426852139315223326329362826642719584845807,-4377281510373830685932235262601141911783351954276887949619547841121480593729,-8751316307701912922363701445366107769033399543337067564873352917982985169137,9508651741188746288170030209848092060845211971798357515137821396421465466421]
r=123
t=3
*/
void Ark_2b8741143620e5b5(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_5[1];
    FrElement i[1];
    FrElement _sigValue_1[1];
    FrElement _tmp_6[1];
    FrElement C[129];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    int _in_sigIdx_;
    int _offset_6;
    int _out_sigIdx_;
    int _offset_11;
    int _offset_17;
    int _offset_20;
    int _offset_22;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_13;
    Fr_copy(&(_tmp_5[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(C[0]), ctx->circuit->constants +351);
    Fr_copy(&(C[1]), ctx->circuit->constants +352);
    Fr_copy(&(C[2]), ctx->circuit->constants +353);
    Fr_copy(&(C[3]), ctx->circuit->constants +354);
    Fr_copy(&(C[4]), ctx->circuit->constants +355);
    Fr_copy(&(C[5]), ctx->circuit->constants +356);
    Fr_copy(&(C[6]), ctx->circuit->constants +357);
    Fr_copy(&(C[7]), ctx->circuit->constants +358);
    Fr_copy(&(C[8]), ctx->circuit->constants +359);
    Fr_copy(&(C[9]), ctx->circuit->constants +360);
    Fr_copy(&(C[10]), ctx->circuit->constants +361);
    Fr_copy(&(C[11]), ctx->circuit->constants +362);
    Fr_copy(&(C[12]), ctx->circuit->constants +363);
    Fr_copy(&(C[13]), ctx->circuit->constants +364);
    Fr_copy(&(C[14]), ctx->circuit->constants +365);
    Fr_copy(&(C[15]), ctx->circuit->constants +366);
    Fr_copy(&(C[16]), ctx->circuit->constants +367);
    Fr_copy(&(C[17]), ctx->circuit->constants +368);
    Fr_copy(&(C[18]), ctx->circuit->constants +369);
    Fr_copy(&(C[19]), ctx->circuit->constants +370);
    Fr_copy(&(C[20]), ctx->circuit->constants +371);
    Fr_copy(&(C[21]), ctx->circuit->constants +372);
    Fr_copy(&(C[22]), ctx->circuit->constants +373);
    Fr_copy(&(C[23]), ctx->circuit->constants +374);
    Fr_copy(&(C[24]), ctx->circuit->constants +375);
    Fr_copy(&(C[25]), ctx->circuit->constants +376);
    Fr_copy(&(C[26]), ctx->circuit->constants +377);
    Fr_copy(&(C[27]), ctx->circuit->constants +378);
    Fr_copy(&(C[28]), ctx->circuit->constants +379);
    Fr_copy(&(C[29]), ctx->circuit->constants +380);
    Fr_copy(&(C[30]), ctx->circuit->constants +381);
    Fr_copy(&(C[31]), ctx->circuit->constants +382);
    Fr_copy(&(C[32]), ctx->circuit->constants +383);
    Fr_copy(&(C[33]), ctx->circuit->constants +384);
    Fr_copy(&(C[34]), ctx->circuit->constants +385);
    Fr_copy(&(C[35]), ctx->circuit->constants +386);
    Fr_copy(&(C[36]), ctx->circuit->constants +387);
    Fr_copy(&(C[37]), ctx->circuit->constants +388);
    Fr_copy(&(C[38]), ctx->circuit->constants +389);
    Fr_copy(&(C[39]), ctx->circuit->constants +390);
    Fr_copy(&(C[40]), ctx->circuit->constants +391);
    Fr_copy(&(C[41]), ctx->circuit->constants +392);
    Fr_copy(&(C[42]), ctx->circuit->constants +393);
    Fr_copy(&(C[43]), ctx->circuit->constants +394);
    Fr_copy(&(C[44]), ctx->circuit->constants +395);
    Fr_copy(&(C[45]), ctx->circuit->constants +396);
    Fr_copy(&(C[46]), ctx->circuit->constants +397);
    Fr_copy(&(C[47]), ctx->circuit->constants +398);
    Fr_copy(&(C[48]), ctx->circuit->constants +399);
    Fr_copy(&(C[49]), ctx->circuit->constants +400);
    Fr_copy(&(C[50]), ctx->circuit->constants +401);
    Fr_copy(&(C[51]), ctx->circuit->constants +402);
    Fr_copy(&(C[52]), ctx->circuit->constants +403);
    Fr_copy(&(C[53]), ctx->circuit->constants +404);
    Fr_copy(&(C[54]), ctx->circuit->constants +405);
    Fr_copy(&(C[55]), ctx->circuit->constants +406);
    Fr_copy(&(C[56]), ctx->circuit->constants +407);
    Fr_copy(&(C[57]), ctx->circuit->constants +408);
    Fr_copy(&(C[58]), ctx->circuit->constants +409);
    Fr_copy(&(C[59]), ctx->circuit->constants +410);
    Fr_copy(&(C[60]), ctx->circuit->constants +411);
    Fr_copy(&(C[61]), ctx->circuit->constants +412);
    Fr_copy(&(C[62]), ctx->circuit->constants +413);
    Fr_copy(&(C[63]), ctx->circuit->constants +414);
    Fr_copy(&(C[64]), ctx->circuit->constants +415);
    Fr_copy(&(C[65]), ctx->circuit->constants +416);
    Fr_copy(&(C[66]), ctx->circuit->constants +417);
    Fr_copy(&(C[67]), ctx->circuit->constants +418);
    Fr_copy(&(C[68]), ctx->circuit->constants +419);
    Fr_copy(&(C[69]), ctx->circuit->constants +420);
    Fr_copy(&(C[70]), ctx->circuit->constants +421);
    Fr_copy(&(C[71]), ctx->circuit->constants +422);
    Fr_copy(&(C[72]), ctx->circuit->constants +423);
    Fr_copy(&(C[73]), ctx->circuit->constants +424);
    Fr_copy(&(C[74]), ctx->circuit->constants +425);
    Fr_copy(&(C[75]), ctx->circuit->constants +426);
    Fr_copy(&(C[76]), ctx->circuit->constants +427);
    Fr_copy(&(C[77]), ctx->circuit->constants +428);
    Fr_copy(&(C[78]), ctx->circuit->constants +429);
    Fr_copy(&(C[79]), ctx->circuit->constants +430);
    Fr_copy(&(C[80]), ctx->circuit->constants +431);
    Fr_copy(&(C[81]), ctx->circuit->constants +432);
    Fr_copy(&(C[82]), ctx->circuit->constants +433);
    Fr_copy(&(C[83]), ctx->circuit->constants +434);
    Fr_copy(&(C[84]), ctx->circuit->constants +435);
    Fr_copy(&(C[85]), ctx->circuit->constants +436);
    Fr_copy(&(C[86]), ctx->circuit->constants +437);
    Fr_copy(&(C[87]), ctx->circuit->constants +438);
    Fr_copy(&(C[88]), ctx->circuit->constants +439);
    Fr_copy(&(C[89]), ctx->circuit->constants +440);
    Fr_copy(&(C[90]), ctx->circuit->constants +441);
    Fr_copy(&(C[91]), ctx->circuit->constants +442);
    Fr_copy(&(C[92]), ctx->circuit->constants +443);
    Fr_copy(&(C[93]), ctx->circuit->constants +444);
    Fr_copy(&(C[94]), ctx->circuit->constants +445);
    Fr_copy(&(C[95]), ctx->circuit->constants +446);
    Fr_copy(&(C[96]), ctx->circuit->constants +447);
    Fr_copy(&(C[97]), ctx->circuit->constants +448);
    Fr_copy(&(C[98]), ctx->circuit->constants +449);
    Fr_copy(&(C[99]), ctx->circuit->constants +450);
    Fr_copy(&(C[100]), ctx->circuit->constants +451);
    Fr_copy(&(C[101]), ctx->circuit->constants +452);
    Fr_copy(&(C[102]), ctx->circuit->constants +453);
    Fr_copy(&(C[103]), ctx->circuit->constants +454);
    Fr_copy(&(C[104]), ctx->circuit->constants +455);
    Fr_copy(&(C[105]), ctx->circuit->constants +456);
    Fr_copy(&(C[106]), ctx->circuit->constants +457);
    Fr_copy(&(C[107]), ctx->circuit->constants +458);
    Fr_copy(&(C[108]), ctx->circuit->constants +459);
    Fr_copy(&(C[109]), ctx->circuit->constants +460);
    Fr_copy(&(C[110]), ctx->circuit->constants +461);
    Fr_copy(&(C[111]), ctx->circuit->constants +462);
    Fr_copy(&(C[112]), ctx->circuit->constants +463);
    Fr_copy(&(C[113]), ctx->circuit->constants +464);
    Fr_copy(&(C[114]), ctx->circuit->constants +465);
    Fr_copy(&(C[115]), ctx->circuit->constants +466);
    Fr_copy(&(C[116]), ctx->circuit->constants +467);
    Fr_copy(&(C[117]), ctx->circuit->constants +468);
    Fr_copy(&(C[118]), ctx->circuit->constants +469);
    Fr_copy(&(C[119]), ctx->circuit->constants +470);
    Fr_copy(&(C[120]), ctx->circuit->constants +471);
    Fr_copy(&(C[121]), ctx->circuit->constants +472);
    Fr_copy(&(C[122]), ctx->circuit->constants +473);
    Fr_copy(&(C[123]), ctx->circuit->constants +474);
    Fr_copy(&(C[124]), ctx->circuit->constants +475);
    Fr_copy(&(C[125]), ctx->circuit->constants +476);
    Fr_copy(&(C[126]), ctx->circuit->constants +350);
    Fr_copy(&(C[127]), ctx->circuit->constants +477);
    Fr_copy(&(C[128]), ctx->circuit->constants +478);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* for (var i=0;i<t;i++) */
    /* out[i] <== in[i] + C[i + r] */
    _offset_6 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue, 1);
    Fr_add(_tmp_2, _sigValue, (ctx->circuit->constants + 474));
    _offset_11 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_11, _tmp_2);
    _loopCond = _tmp_5;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <== in[i] + C[i + r] */
        _offset_17 = _in_sigIdx_ + Fr_toInt(i)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_1, 1);
        Fr_add(_tmp_6, i, (ctx->circuit->constants + 499));
        _offset_20 = Fr_toInt(_tmp_6);
        _v_13 = C + _offset_20;
        Fr_add(_tmp_7, _sigValue_1, _v_13);
        _offset_22 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_22, _tmp_7);
        Fr_copyn(_tmp_9, i, 1);
        Fr_add(_tmp_8, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_8, 1);
        Fr_lt(_tmp_10, i, (ctx->circuit->constants + 5));
        _loopCond = _tmp_10;
    }
    ctx->finished(__cIdx);
}
/*
Mix
M=[[9126583946507506092370829490113801193208434025860581466528490242021543489712,-7862916143002976390917103173435172511520595496423912854420271155255927763780,1338375978817829714163126768609936082895389344673064451194517289859868949734],[5782494737836789158141241926202915997334203581426984651933431522887287341750,8674491333309527697290378754010141834714458505280287364117039681658116299550,-866141796036655714241311027044227411074066654384316183921614414958837825059],[1840629387506155580597632538853759008968255681447054654962041870499107706241,-8040821840937264489252141663641258896068782224750785738464260556947057338896,-10329550644744767436555912145061125786334363574208795346303265390154691123381]]
t=3
*/
void Mix_9f6491335b73d2d1(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_2[1];
    FrElement _tmp_3[1];
    FrElement lc[1];
    FrElement _tmp_6[1];
    FrElement j[1];
    FrElement M[9];
    FrElement _sigValue_1[1];
    FrElement _tmp_7[1];
    FrElement _tmp_8[1];
    FrElement _tmp_10[1];
    FrElement _tmp_9[1];
    FrElement _tmp_11[1];
    FrElement _tmp_14[1];
    FrElement i[1];
    FrElement _num_3[1];
    FrElement _num_4[1];
    FrElement _tmp_15[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _tmp_22[1];
    FrElement _tmp_21[1];
    FrElement _tmp_23[1];
    int _in_sigIdx_;
    int _offset_14;
    int _offset_23;
    int _offset_25;
    int _out_sigIdx_;
    int _offset_33;
    int _offset_45;
    int _offset_47;
    int _offset_55;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    PFrElement _v_15;
    PFrElement _loopCond_1;
    PFrElement _loopCond_2;
    PFrElement _v_22;
    Fr_copy(&(_tmp_6[0]), ctx->circuit->constants +1);
    Fr_copy(&(j[0]), ctx->circuit->constants +1);
    Fr_copy(&(M[0]), ctx->circuit->constants +500);
    Fr_copy(&(M[1]), ctx->circuit->constants +501);
    Fr_copy(&(M[2]), ctx->circuit->constants +502);
    Fr_copy(&(M[3]), ctx->circuit->constants +503);
    Fr_copy(&(M[4]), ctx->circuit->constants +504);
    Fr_copy(&(M[5]), ctx->circuit->constants +505);
    Fr_copy(&(M[6]), ctx->circuit->constants +506);
    Fr_copy(&(M[7]), ctx->circuit->constants +507);
    Fr_copy(&(M[8]), ctx->circuit->constants +508);
    Fr_copy(&(_tmp_14[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_num_3[0]), ctx->circuit->constants +0);
    Fr_copy(&(_num_4[0]), ctx->circuit->constants +0);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[t] */
    /* signal output out[t] */
    /* var lc */
    /* for (var i=0;i<t;i++) */
    /* lc = 0 */
    /* for (var j=0;j<t;j++) */
    /* lc += M[j][i]*in[j] */
    _offset_14 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_14, _sigValue, 1);
    Fr_mul(_tmp_2, (ctx->circuit->constants + 500), _sigValue);
    Fr_add(_tmp_3, (ctx->circuit->constants + 0), _tmp_2);
    Fr_copyn(lc, _tmp_3, 1);
    _loopCond = _tmp_6;
    while (Fr_isTrue(_loopCond)) {
        /* lc += M[j][i]*in[j] */
        _offset_23 = Fr_toInt(j)*3;
        _v_15 = M + _offset_23;
        _offset_25 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_25, _sigValue_1, 1);
        Fr_mul(_tmp_7, _v_15, _sigValue_1);
        Fr_add(_tmp_8, lc, _tmp_7);
        Fr_copyn(lc, _tmp_8, 1);
        Fr_copyn(_tmp_10, j, 1);
        Fr_add(_tmp_9, j, (ctx->circuit->constants + 1));
        Fr_copyn(j, _tmp_9, 1);
        Fr_lt(_tmp_11, j, (ctx->circuit->constants + 5));
        _loopCond = _tmp_11;
    }
    /* out[i] <== lc */
    _offset_33 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_33, lc);
    _loopCond_1 = _tmp_14;
    while (Fr_isTrue(_loopCond_1)) {
        /* lc = 0 */
        Fr_copyn(lc, _num_3, 1);
        /* for (var j=0;j<t;j++) */
        Fr_copyn(j, _num_4, 1);
        Fr_lt(_tmp_15, j, (ctx->circuit->constants + 5));
        _loopCond_2 = _tmp_15;
        while (Fr_isTrue(_loopCond_2)) {
            /* lc += M[j][i]*in[j] */
            _offset_45 = Fr_toInt(j)*3 + Fr_toInt(i);
            _v_22 = M + _offset_45;
            _offset_47 = _in_sigIdx_ + Fr_toInt(j)*_sigSizes_in[1];
            ctx->multiGetSignal(__cIdx, __cIdx, _offset_47, _sigValue_2, 1);
            Fr_mul(_tmp_16, _v_22, _sigValue_2);
            Fr_add(_tmp_17, lc, _tmp_16);
            Fr_copyn(lc, _tmp_17, 1);
            Fr_copyn(_tmp_19, j, 1);
            Fr_add(_tmp_18, j, (ctx->circuit->constants + 1));
            Fr_copyn(j, _tmp_18, 1);
            Fr_lt(_tmp_20, j, (ctx->circuit->constants + 5));
            _loopCond_2 = _tmp_20;
        }
        /* out[i] <== lc */
        _offset_55 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_55, lc);
        Fr_copyn(_tmp_22, i, 1);
        Fr_add(_tmp_21, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_21, 1);
        Fr_lt(_tmp_23, i, (ctx->circuit->constants + 5));
        _loopCond_1 = _tmp_23;
    }
    ctx->finished(__cIdx);
}
/*
MerkleTreeUpdater
levels=19
zeroLeaf=-10037691542416115361557626753429450358510605238214250777413353363815611727743
*/
void MerkleTreeUpdater_4dbaf16862f9d2f8(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement i[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_5[1];
    FrElement _tmp_4[1];
    FrElement _tmp_6[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_10[1];
    FrElement i_1[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_12[1];
    FrElement _tmp_11[1];
    FrElement _tmp_13[1];
    FrElement _sigValue_11[1];
    FrElement _sigValue_12[1];
    FrElement _sigValue_13[1];
    int _compIdx;
    int _in_sigIdx_;
    int _pathIndices_sigIdx_;
    int _compIdx_1;
    int _pathIndices_sigIdx__1;
    int _offset_5;
    int _compIdx_2;
    int _out_sigIdx_;
    int _offset_7;
    int _compIdx_3;
    int _pathElements_sigIdx_;
    int _offset_9;
    int _pathElements_sigIdx__1;
    int _offset_11;
    int _compIdx_4;
    int _pathIndices_sigIdx__2;
    int _offset_17;
    int _compIdx_5;
    int _out_sigIdx__1;
    int _offset_19;
    int _compIdx_6;
    int _pathElements_sigIdx__2;
    int _offset_21;
    int _offset_23;
    int _compIdx_7;
    int _leaf_sigIdx_;
    int _compIdx_8;
    int _root_sigIdx_;
    int _oldRoot_sigIdx_;
    int _compIdx_9;
    int _pathIndices_sigIdx__3;
    int _offset_33;
    int _compIdx_10;
    int _out_sigIdx__2;
    int _offset_35;
    int _compIdx_11;
    int _pathElements_sigIdx__3;
    int _offset_37;
    int _offset_39;
    int _compIdx_12;
    int _pathIndices_sigIdx__4;
    int _offset_45;
    int _compIdx_13;
    int _out_sigIdx__3;
    int _offset_47;
    int _compIdx_14;
    int _pathElements_sigIdx__4;
    int _offset_49;
    int _offset_51;
    int _compIdx_15;
    int _leaf_sigIdx__1;
    int _leaf_sigIdx__2;
    int _compIdx_16;
    int _root_sigIdx__1;
    int _newRoot_sigIdx_;
    Circom_Sizes _sigSizes_pathIndices;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _sigSizes_pathElements;
    Circom_Sizes _sigSizes_pathElements_1;
    Circom_Sizes _sigSizes_pathIndices_1;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _sigSizes_pathElements_2;
    Circom_Sizes _sigSizes_pathIndices_2;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _sigSizes_pathElements_3;
    Circom_Sizes _sigSizes_pathIndices_3;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _sigSizes_pathElements_4;
    PFrElement _loopCond;
    PFrElement _loopCond_1;
    Fr_copy(&(_tmp_3[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i_1[0]), ctx->circuit->constants +1);
    _pathIndices_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    _pathElements_sigIdx__1 = ctx->getSignalOffset(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _oldRoot_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xf816cb685519c2c2LL /* oldRoot */);
    _leaf_sigIdx__2 = ctx->getSignalOffset(__cIdx, 0x24ad84ada20208d5LL /* leaf */);
    _newRoot_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x40af3afc80583bf9LL /* newRoot */);
    _sigSizes_pathElements_1 = ctx->getSignalSizes(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    /* signal input oldRoot */
    /* signal input newRoot */
    /* signal input leaf */
    /* signal input pathIndices */
    /* signal private input pathElements[levels] */
    /* component indexBits = Num2Bits(levels) */
    /* indexBits.in <== pathIndices */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x1d70ac44a2e12ebfLL /* indexBits */);
    _in_sigIdx_ = ctx->getSignalOffset(_compIdx, 0x08b73807b55c4bbeLL /* in */);
    ctx->multiGetSignal(__cIdx, __cIdx, _pathIndices_sigIdx_, _sigValue, 1);
    ctx->setSignal(__cIdx, _compIdx, _in_sigIdx_, _sigValue);
    /* component treeBefore = RawMerkleTree(levels) */
    /* for (var i = 0;i < levels;i++) */
    /* treeBefore.pathIndices[i] <== indexBits.out[i] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
    _pathIndices_sigIdx__1 = ctx->getSignalOffset(_compIdx_1, 0x6831dcf79ac686bbLL /* pathIndices */);
    _sigSizes_pathIndices = ctx->getSignalSizes(_compIdx_1, 0x6831dcf79ac686bbLL /* pathIndices */);
    _offset_5 = _pathIndices_sigIdx__1;
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x1d70ac44a2e12ebfLL /* indexBits */);
    _out_sigIdx_ = ctx->getSignalOffset(_compIdx_2, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_compIdx_2, 0x19f79b1921bbcfffLL /* out */);
    _offset_7 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _compIdx_2, _offset_7, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _compIdx_1, _offset_5, _sigValue_1);
    /* treeBefore.pathElements[i] <== pathElements[i] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
    _pathElements_sigIdx_ = ctx->getSignalOffset(_compIdx_3, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_pathElements = ctx->getSignalSizes(_compIdx_3, 0x4099e7b711de8b07LL /* pathElements */);
    _offset_9 = _pathElements_sigIdx_;
    _offset_11 = _pathElements_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_11, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _compIdx_3, _offset_9, _sigValue_2);
    _loopCond = _tmp_3;
    while (Fr_isTrue(_loopCond)) {
        /* treeBefore.pathIndices[i] <== indexBits.out[i] */
        _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
        _pathIndices_sigIdx__2 = ctx->getSignalOffset(_compIdx_4, 0x6831dcf79ac686bbLL /* pathIndices */);
        _sigSizes_pathIndices_1 = ctx->getSignalSizes(_compIdx_4, 0x6831dcf79ac686bbLL /* pathIndices */);
        _offset_17 = _pathIndices_sigIdx__2 + Fr_toInt(i)*_sigSizes_pathIndices_1[1];
        _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x1d70ac44a2e12ebfLL /* indexBits */);
        _out_sigIdx__1 = ctx->getSignalOffset(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_1 = ctx->getSignalSizes(_compIdx_5, 0x19f79b1921bbcfffLL /* out */);
        _offset_19 = _out_sigIdx__1 + Fr_toInt(i)*_sigSizes_out_1[1];
        ctx->multiGetSignal(__cIdx, _compIdx_5, _offset_19, _sigValue_3, 1);
        ctx->setSignal(__cIdx, _compIdx_4, _offset_17, _sigValue_3);
        /* treeBefore.pathElements[i] <== pathElements[i] */
        _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
        _pathElements_sigIdx__2 = ctx->getSignalOffset(_compIdx_6, 0x4099e7b711de8b07LL /* pathElements */);
        _sigSizes_pathElements_2 = ctx->getSignalSizes(_compIdx_6, 0x4099e7b711de8b07LL /* pathElements */);
        _offset_21 = _pathElements_sigIdx__2 + Fr_toInt(i)*_sigSizes_pathElements_2[1];
        _offset_23 = _pathElements_sigIdx__1 + Fr_toInt(i)*_sigSizes_pathElements_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_23, _sigValue_4, 1);
        ctx->setSignal(__cIdx, _compIdx_6, _offset_21, _sigValue_4);
        Fr_copyn(_tmp_5, i, 1);
        Fr_add(_tmp_4, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_4, 1);
        Fr_lt(_tmp_6, i, (ctx->circuit->constants + 4));
        _loopCond = _tmp_6;
    }
    /* treeBefore.leaf <== zeroLeaf */
    _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
    _leaf_sigIdx_ = ctx->getSignalOffset(_compIdx_7, 0x24ad84ada20208d5LL /* leaf */);
    ctx->setSignal(__cIdx, _compIdx_7, _leaf_sigIdx_, (ctx->circuit->constants + 509));
    /* treeBefore.root === oldRoot */
    _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0xa1acfa9a716421eeLL /* treeBefore */);
    _root_sigIdx_ = ctx->getSignalOffset(_compIdx_8, 0xa354fd1ff0c467c5LL /* root */);
    ctx->multiGetSignal(__cIdx, _compIdx_8, _root_sigIdx_, _sigValue_5, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _oldRoot_sigIdx_, _sigValue_6, 1);
    ctx->checkConstraint(__cIdx, _sigValue_5, _sigValue_6, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/circuits/MerkleTreeUpdater.circom:24:4");
    /* component treeAfter = RawMerkleTree(levels) */
    /* for (var i = 0;i < levels;i++) */
    /* treeAfter.pathIndices[i] <== indexBits.out[i] */
    _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
    _pathIndices_sigIdx__3 = ctx->getSignalOffset(_compIdx_9, 0x6831dcf79ac686bbLL /* pathIndices */);
    _sigSizes_pathIndices_2 = ctx->getSignalSizes(_compIdx_9, 0x6831dcf79ac686bbLL /* pathIndices */);
    _offset_33 = _pathIndices_sigIdx__3;
    _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x1d70ac44a2e12ebfLL /* indexBits */);
    _out_sigIdx__2 = ctx->getSignalOffset(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_2 = ctx->getSignalSizes(_compIdx_10, 0x19f79b1921bbcfffLL /* out */);
    _offset_35 = _out_sigIdx__2;
    ctx->multiGetSignal(__cIdx, _compIdx_10, _offset_35, _sigValue_7, 1);
    ctx->setSignal(__cIdx, _compIdx_9, _offset_33, _sigValue_7);
    /* treeAfter.pathElements[i] <== pathElements[i] */
    _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
    _pathElements_sigIdx__3 = ctx->getSignalOffset(_compIdx_11, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_pathElements_3 = ctx->getSignalSizes(_compIdx_11, 0x4099e7b711de8b07LL /* pathElements */);
    _offset_37 = _pathElements_sigIdx__3;
    _offset_39 = _pathElements_sigIdx__1;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_39, _sigValue_8, 1);
    ctx->setSignal(__cIdx, _compIdx_11, _offset_37, _sigValue_8);
    _loopCond_1 = _tmp_10;
    while (Fr_isTrue(_loopCond_1)) {
        /* treeAfter.pathIndices[i] <== indexBits.out[i] */
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
        _pathIndices_sigIdx__4 = ctx->getSignalOffset(_compIdx_12, 0x6831dcf79ac686bbLL /* pathIndices */);
        _sigSizes_pathIndices_3 = ctx->getSignalSizes(_compIdx_12, 0x6831dcf79ac686bbLL /* pathIndices */);
        _offset_45 = _pathIndices_sigIdx__4 + Fr_toInt(i_1)*_sigSizes_pathIndices_3[1];
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x1d70ac44a2e12ebfLL /* indexBits */);
        _out_sigIdx__3 = ctx->getSignalOffset(_compIdx_13, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_compIdx_13, 0x19f79b1921bbcfffLL /* out */);
        _offset_47 = _out_sigIdx__3 + Fr_toInt(i_1)*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _compIdx_13, _offset_47, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _compIdx_12, _offset_45, _sigValue_9);
        /* treeAfter.pathElements[i] <== pathElements[i] */
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
        _pathElements_sigIdx__4 = ctx->getSignalOffset(_compIdx_14, 0x4099e7b711de8b07LL /* pathElements */);
        _sigSizes_pathElements_4 = ctx->getSignalSizes(_compIdx_14, 0x4099e7b711de8b07LL /* pathElements */);
        _offset_49 = _pathElements_sigIdx__4 + Fr_toInt(i_1)*_sigSizes_pathElements_4[1];
        _offset_51 = _pathElements_sigIdx__1 + Fr_toInt(i_1)*_sigSizes_pathElements_1[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_51, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _compIdx_14, _offset_49, _sigValue_10);
        Fr_copyn(_tmp_12, i_1, 1);
        Fr_add(_tmp_11, i_1, (ctx->circuit->constants + 1));
        Fr_copyn(i_1, _tmp_11, 1);
        Fr_lt(_tmp_13, i_1, (ctx->circuit->constants + 4));
        _loopCond_1 = _tmp_13;
    }
    /* treeAfter.leaf <== leaf */
    _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
    _leaf_sigIdx__1 = ctx->getSignalOffset(_compIdx_15, 0x24ad84ada20208d5LL /* leaf */);
    ctx->multiGetSignal(__cIdx, __cIdx, _leaf_sigIdx__2, _sigValue_11, 1);
    ctx->setSignal(__cIdx, _compIdx_15, _leaf_sigIdx__1, _sigValue_11);
    /* treeAfter.root === newRoot */
    _compIdx_16 = ctx->getSubComponentOffset(__cIdx, 0x655c0c2b9640dc99LL /* treeAfter */);
    _root_sigIdx__1 = ctx->getSignalOffset(_compIdx_16, 0xa354fd1ff0c467c5LL /* root */);
    ctx->multiGetSignal(__cIdx, _compIdx_16, _root_sigIdx__1, _sigValue_12, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _newRoot_sigIdx_, _sigValue_13, 1);
    ctx->checkConstraint(__cIdx, _sigValue_12, _sigValue_13, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/circuits/MerkleTreeUpdater.circom:32:4");
    ctx->finished(__cIdx);
}
/*
Num2Bits
n=19
*/
void Num2Bits_9865cea0f485bcb0(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _tmp_1[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _tmp_3[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_5[1];
    FrElement _tmp_6[1];
    FrElement lc1[1];
    FrElement _tmp_10[1];
    FrElement i[1];
    FrElement e2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_11[1];
    FrElement _tmp_12[1];
    FrElement _sigValue_5[1];
    FrElement _sigValue_6[1];
    FrElement _tmp_13[1];
    FrElement _tmp_14[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_15[1];
    FrElement _tmp_16[1];
    FrElement _tmp_17[1];
    FrElement _tmp_19[1];
    FrElement _tmp_18[1];
    FrElement _tmp_20[1];
    FrElement _sigValue_8[1];
    int _in_sigIdx_;
    int _out_sigIdx_;
    int _offset_8;
    int _offset_10;
    int _offset_12;
    int _offset_15;
    int _offset_27;
    int _offset_29;
    int _offset_31;
    int _offset_34;
    Circom_Sizes _sigSizes_out;
    PFrElement _loopCond;
    Fr_copy(&(_tmp_10[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    Fr_copy(&(e2[0]), ctx->circuit->constants +2);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in */
    /* signal output out[n] */
    /* var lc1=0 */
    /* var e2=1 */
    /* for (var i = 0;i<n;i++) */
    /* out[i] <-- (in >> i) & 1 */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue, 1);
    Fr_shr(_tmp_1, _sigValue, (ctx->circuit->constants + 0));
    Fr_band(_tmp_2, _tmp_1, (ctx->circuit->constants + 1));
    _offset_8 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_8, _tmp_2);
    /* out[i] * (out[i] -1 ) === 0 */
    _offset_10 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_10, _sigValue_1, 1);
    _offset_12 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_12, _sigValue_2, 1);
    Fr_sub(_tmp_3, _sigValue_2, (ctx->circuit->constants + 1));
    Fr_mul(_tmp_4, _sigValue_1, _tmp_3);
    ctx->checkConstraint(__cIdx, _tmp_4, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
    /* lc1 += out[i] * e2 */
    _offset_15 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_15, _sigValue_3, 1);
    Fr_mul(_tmp_5, _sigValue_3, (ctx->circuit->constants + 1));
    Fr_add(_tmp_6, (ctx->circuit->constants + 0), _tmp_5);
    Fr_copyn(lc1, _tmp_6, 1);
    /* e2 = e2+e2 */
    _loopCond = _tmp_10;
    while (Fr_isTrue(_loopCond)) {
        /* out[i] <-- (in >> i) & 1 */
        ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_4, 1);
        Fr_shr(_tmp_11, _sigValue_4, i);
        Fr_band(_tmp_12, _tmp_11, (ctx->circuit->constants + 1));
        _offset_27 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->setSignal(__cIdx, __cIdx, _offset_27, _tmp_12);
        /* out[i] * (out[i] -1 ) === 0 */
        _offset_29 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_29, _sigValue_5, 1);
        _offset_31 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_31, _sigValue_6, 1);
        Fr_sub(_tmp_13, _sigValue_6, (ctx->circuit->constants + 1));
        Fr_mul(_tmp_14, _sigValue_5, _tmp_13);
        ctx->checkConstraint(__cIdx, _tmp_14, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:32:8");
        /* lc1 += out[i] * e2 */
        _offset_34 = _out_sigIdx_ + Fr_toInt(i)*_sigSizes_out[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_34, _sigValue_7, 1);
        Fr_mul(_tmp_15, _sigValue_7, e2);
        Fr_add(_tmp_16, lc1, _tmp_15);
        Fr_copyn(lc1, _tmp_16, 1);
        /* e2 = e2+e2 */
        Fr_add(_tmp_17, e2, e2);
        Fr_copyn(e2, _tmp_17, 1);
        Fr_copyn(_tmp_19, i, 1);
        Fr_add(_tmp_18, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_18, 1);
        Fr_lt(_tmp_20, i, (ctx->circuit->constants + 4));
        _loopCond = _tmp_20;
    }
    /* lc1 === in */
    ctx->multiGetSignal(__cIdx, __cIdx, _in_sigIdx_, _sigValue_8, 1);
    ctx->checkConstraint(__cIdx, lc1, _sigValue_8, "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/node_modules/circomlib/circuits/bitify.circom:37:4");
    ctx->finished(__cIdx);
}
/*
RawMerkleTree
leaf=11850551329423159860688778991827824730037759162201783566284850822760196767874
levels=19
*/
void RawMerkleTree_bc9db1428450b065(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_4[1];
    FrElement i[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_6[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_8[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_11[1];
    int _compIdx;
    int _offset_6;
    int _in_sigIdx_;
    int _offset_7;
    int _leaf_sigIdx_;
    int _compIdx_1;
    int _offset_10;
    int _in_sigIdx__1;
    int _offset_11;
    int _pathElements_sigIdx_;
    int _offset_13;
    int _compIdx_2;
    int _offset_15;
    int _s_sigIdx_;
    int _pathIndices_sigIdx_;
    int _offset_17;
    int _compIdx_3;
    int _offset_19;
    int _left_sigIdx_;
    int _compIdx_4;
    int _offset_21;
    int _out_sigIdx_;
    int _offset_22;
    int _compIdx_5;
    int _offset_24;
    int _right_sigIdx_;
    int _compIdx_6;
    int _offset_26;
    int _out_sigIdx__1;
    int _offset_27;
    int _compIdx_7;
    int _offset_33;
    int _in_sigIdx__2;
    int _offset_34;
    int _compIdx_8;
    int _offset_37;
    int _hash_sigIdx_;
    int _compIdx_9;
    int _offset_39;
    int _in_sigIdx__3;
    int _offset_40;
    int _offset_42;
    int _compIdx_10;
    int _offset_44;
    int _s_sigIdx__1;
    int _offset_46;
    int _compIdx_11;
    int _offset_48;
    int _left_sigIdx__1;
    int _compIdx_12;
    int _offset_50;
    int _out_sigIdx__2;
    int _offset_51;
    int _compIdx_13;
    int _offset_53;
    int _right_sigIdx__1;
    int _compIdx_14;
    int _offset_55;
    int _out_sigIdx__3;
    int _offset_56;
    int _compIdx_15;
    int _offset_62;
    int _hash_sigIdx__1;
    int _root_sigIdx_;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_pathElements;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_pathIndices;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_15;
    PFrElement _loopCond;
    PFrElement _ter;
    Fr_copy(&(_tmp_4[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _leaf_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x24ad84ada20208d5LL /* leaf */);
    _pathElements_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _pathIndices_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    _root_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xa354fd1ff0c467c5LL /* root */);
    _sigSizes_pathElements = ctx->getSignalSizes(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_pathIndices = ctx->getSignalSizes(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    /* signal input leaf */
    /* signal input pathElements[levels] */
    /* signal input pathIndices[levels] */
    /* signal output root */
    /* component selectors[levels] */
    /* component hashers[levels] */
    /* for (var i = 0;i < levels;i++) */
    /* selectors[i] = DualMux() */
    /* selectors[i].in[0] <== i == 0 ? leaf : hashers[i - 1].hash */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_6 = _compIdx;
    _in_sigIdx_ = ctx->getSignalOffset(_offset_6, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_offset_6, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _leaf_sigIdx_, _sigValue, 1);
    ctx->setSignal(__cIdx, _offset_6, _offset_7, _sigValue);
    /* selectors[i].in[1] <== pathElements[i] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_10 = _compIdx_1;
    _in_sigIdx__1 = ctx->getSignalOffset(_offset_10, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_1 = ctx->getSignalSizes(_offset_10, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__1 + 1*_sigSizes_in_1[1];
    _offset_13 = _pathElements_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _offset_10, _offset_11, _sigValue_1);
    /* selectors[i].s <== pathIndices[i] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_15 = _compIdx_2;
    _s_sigIdx_ = ctx->getSignalOffset(_offset_15, 0xaf63ee4c86020b22LL /* s */);
    _offset_17 = _pathIndices_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _offset_15, _s_sigIdx_, _sigValue_2);
    /* hashers[i] = HashLeftRight() */
    /* hashers[i].left <== selectors[i].out[0] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_19 = _compIdx_3;
    _left_sigIdx_ = ctx->getSignalOffset(_offset_19, 0x24b070ada2041cb0LL /* left */);
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_21 = _compIdx_4;
    _out_sigIdx_ = ctx->getSignalOffset(_offset_21, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_offset_21, 0x19f79b1921bbcfffLL /* out */);
    _offset_22 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _offset_21, _offset_22, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _offset_19, _left_sigIdx_, _sigValue_3);
    /* hashers[i].right <== selectors[i].out[1] */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_24 = _compIdx_5;
    _right_sigIdx_ = ctx->getSignalOffset(_offset_24, 0x76aaaa535714d805LL /* right */);
    _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_26 = _compIdx_6;
    _out_sigIdx__1 = ctx->getSignalOffset(_offset_26, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_1 = ctx->getSignalSizes(_offset_26, 0x19f79b1921bbcfffLL /* out */);
    _offset_27 = _out_sigIdx__1 + 1*_sigSizes_out_1[1];
    ctx->multiGetSignal(__cIdx, _offset_26, _offset_27, _sigValue_4, 1);
    ctx->setSignal(__cIdx, _offset_24, _right_sigIdx_, _sigValue_4);
    _loopCond = _tmp_4;
    while (Fr_isTrue(_loopCond)) {
        /* selectors[i] = DualMux() */
        /* selectors[i].in[0] <== i == 0 ? leaf : hashers[i - 1].hash */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_33 = _compIdx_7 + Fr_toInt(i)*_compSizes_7[1];
        _in_sigIdx__2 = ctx->getSignalOffset(_offset_33, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_offset_33, 0x08b73807b55c4bbeLL /* in */);
        _offset_34 = _in_sigIdx__2;
        Fr_eq(_tmp_5, i, (ctx->circuit->constants + 0));
        if (Fr_isTrue(_tmp_5)) {
            ctx->multiGetSignal(__cIdx, __cIdx, _leaf_sigIdx_, _sigValue_5, 1);
            _ter = _sigValue_5;
        } else {
            _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
            _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
            Fr_sub(_tmp_6, i, (ctx->circuit->constants + 1));
            _offset_37 = _compIdx_8 + Fr_toInt(_tmp_6)*_compSizes_8[1];
            _hash_sigIdx_ = ctx->getSignalOffset(_offset_37, 0x2e3d9ecc741a7811LL /* hash */);
            ctx->multiGetSignal(__cIdx, _offset_37, _hash_sigIdx_, _sigValue_6, 1);
            _ter = _sigValue_6;
        }
        ctx->setSignal(__cIdx, _offset_33, _offset_34, _ter);
        /* selectors[i].in[1] <== pathElements[i] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_39 = _compIdx_9 + Fr_toInt(i)*_compSizes_9[1];
        _in_sigIdx__3 = ctx->getSignalOffset(_offset_39, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_offset_39, 0x08b73807b55c4bbeLL /* in */);
        _offset_40 = _in_sigIdx__3 + 1*_sigSizes_in_3[1];
        _offset_42 = _pathElements_sigIdx_ + Fr_toInt(i)*_sigSizes_pathElements[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_42, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _offset_39, _offset_40, _sigValue_7);
        /* selectors[i].s <== pathIndices[i] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_44 = _compIdx_10 + Fr_toInt(i)*_compSizes_10[1];
        _s_sigIdx__1 = ctx->getSignalOffset(_offset_44, 0xaf63ee4c86020b22LL /* s */);
        _offset_46 = _pathIndices_sigIdx_ + Fr_toInt(i)*_sigSizes_pathIndices[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_46, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _offset_44, _s_sigIdx__1, _sigValue_8);
        /* hashers[i] = HashLeftRight() */
        /* hashers[i].left <== selectors[i].out[0] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _offset_48 = _compIdx_11 + Fr_toInt(i)*_compSizes_11[1];
        _left_sigIdx__1 = ctx->getSignalOffset(_offset_48, 0x24b070ada2041cb0LL /* left */);
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_50 = _compIdx_12 + Fr_toInt(i)*_compSizes_12[1];
        _out_sigIdx__2 = ctx->getSignalOffset(_offset_50, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_offset_50, 0x19f79b1921bbcfffLL /* out */);
        _offset_51 = _out_sigIdx__2;
        ctx->multiGetSignal(__cIdx, _offset_50, _offset_51, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _offset_48, _left_sigIdx__1, _sigValue_9);
        /* hashers[i].right <== selectors[i].out[1] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _offset_53 = _compIdx_13 + Fr_toInt(i)*_compSizes_13[1];
        _right_sigIdx__1 = ctx->getSignalOffset(_offset_53, 0x76aaaa535714d805LL /* right */);
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_55 = _compIdx_14 + Fr_toInt(i)*_compSizes_14[1];
        _out_sigIdx__3 = ctx->getSignalOffset(_offset_55, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_offset_55, 0x19f79b1921bbcfffLL /* out */);
        _offset_56 = _out_sigIdx__3 + 1*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _offset_55, _offset_56, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _offset_53, _right_sigIdx__1, _sigValue_10);
        Fr_copyn(_tmp_8, i, 1);
        Fr_add(_tmp_7, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_7, 1);
        Fr_lt(_tmp_9, i, (ctx->circuit->constants + 4));
        _loopCond = _tmp_9;
    }
    /* root <== hashers[levels - 1].hash */
    _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_62 = _compIdx_15 + 18*_compSizes_15[1];
    _hash_sigIdx__1 = ctx->getSignalOffset(_offset_62, 0x2e3d9ecc741a7811LL /* hash */);
    ctx->multiGetSignal(__cIdx, _offset_62, _hash_sigIdx__1, _sigValue_11, 1);
    ctx->setSignal(__cIdx, __cIdx, _root_sigIdx_, _sigValue_11);
    ctx->finished(__cIdx);
}
/*
DualMux
*/
void DualMux_a448c86263b37a53(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _tmp[1];
    FrElement _tmp_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _tmp_2[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_3[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_4[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_8[1];
    FrElement _tmp_6[1];
    FrElement _sigValue_9[1];
    FrElement _tmp_7[1];
    int _s_sigIdx_;
    int _in_sigIdx_;
    int _offset;
    int _offset_1;
    int _offset_2;
    int _out_sigIdx_;
    int _offset_3;
    int _offset_4;
    int _offset_5;
    int _offset_6;
    int _offset_7;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _sigSizes_out;
    _s_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xaf63ee4c86020b22LL /* s */);
    _in_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _out_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_in = ctx->getSignalSizes(__cIdx, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_out = ctx->getSignalSizes(__cIdx, 0x19f79b1921bbcfffLL /* out */);
    /* signal input in[2] */
    /* signal input s */
    /* signal output out[2] */
    /* s * (1 - s) === 0 */
    ctx->multiGetSignal(__cIdx, __cIdx, _s_sigIdx_, _sigValue, 1);
    ctx->multiGetSignal(__cIdx, __cIdx, _s_sigIdx_, _sigValue_1, 1);
    Fr_sub(_tmp, (ctx->circuit->constants + 1), _sigValue_1);
    Fr_mul(_tmp_1, _sigValue, _tmp);
    ctx->checkConstraint(__cIdx, _tmp_1, (ctx->circuit->constants + 0), "/home/yosimura/Documents/BlockChain/sacred/sacred/sacred-deploy/sacred-trees/circuits/MerkleTree.circom:23:4");
    /* out[0] <== (in[1] - in[0])*s + in[0] */
    _offset = _in_sigIdx_ + 1*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset, _sigValue_2, 1);
    _offset_1 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_1, _sigValue_3, 1);
    Fr_sub(_tmp_2, _sigValue_2, _sigValue_3);
    ctx->multiGetSignal(__cIdx, __cIdx, _s_sigIdx_, _sigValue_4, 1);
    Fr_mul(_tmp_3, _tmp_2, _sigValue_4);
    _offset_2 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_2, _sigValue_5, 1);
    Fr_add(_tmp_4, _tmp_3, _sigValue_5);
    _offset_3 = _out_sigIdx_;
    ctx->setSignal(__cIdx, __cIdx, _offset_3, _tmp_4);
    /* out[1] <== (in[0] - in[1])*s + in[1] */
    _offset_4 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_4, _sigValue_6, 1);
    _offset_5 = _in_sigIdx_ + 1*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_5, _sigValue_7, 1);
    Fr_sub(_tmp_5, _sigValue_6, _sigValue_7);
    ctx->multiGetSignal(__cIdx, __cIdx, _s_sigIdx_, _sigValue_8, 1);
    Fr_mul(_tmp_6, _tmp_5, _sigValue_8);
    _offset_6 = _in_sigIdx_ + 1*_sigSizes_in[1];
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_6, _sigValue_9, 1);
    Fr_add(_tmp_7, _tmp_6, _sigValue_9);
    _offset_7 = _out_sigIdx_ + 1*_sigSizes_out[1];
    ctx->setSignal(__cIdx, __cIdx, _offset_7, _tmp_7);
    ctx->finished(__cIdx);
}
/*
RawMerkleTree
levels=19
*/
void RawMerkleTree_9986001828573ddd(Circom_CalcWit *ctx, int __cIdx) {
    FrElement _sigValue[1];
    FrElement _sigValue_1[1];
    FrElement _sigValue_2[1];
    FrElement _sigValue_3[1];
    FrElement _sigValue_4[1];
    FrElement _tmp_4[1];
    FrElement i[1];
    FrElement _tmp_5[1];
    FrElement _sigValue_5[1];
    FrElement _tmp_6[1];
    FrElement _sigValue_6[1];
    FrElement _sigValue_7[1];
    FrElement _sigValue_8[1];
    FrElement _sigValue_9[1];
    FrElement _sigValue_10[1];
    FrElement _tmp_8[1];
    FrElement _tmp_7[1];
    FrElement _tmp_9[1];
    FrElement _sigValue_11[1];
    int _compIdx;
    int _offset_6;
    int _in_sigIdx_;
    int _offset_7;
    int _leaf_sigIdx_;
    int _compIdx_1;
    int _offset_10;
    int _in_sigIdx__1;
    int _offset_11;
    int _pathElements_sigIdx_;
    int _offset_13;
    int _compIdx_2;
    int _offset_15;
    int _s_sigIdx_;
    int _pathIndices_sigIdx_;
    int _offset_17;
    int _compIdx_3;
    int _offset_19;
    int _left_sigIdx_;
    int _compIdx_4;
    int _offset_21;
    int _out_sigIdx_;
    int _offset_22;
    int _compIdx_5;
    int _offset_24;
    int _right_sigIdx_;
    int _compIdx_6;
    int _offset_26;
    int _out_sigIdx__1;
    int _offset_27;
    int _compIdx_7;
    int _offset_33;
    int _in_sigIdx__2;
    int _offset_34;
    int _compIdx_8;
    int _offset_37;
    int _hash_sigIdx_;
    int _compIdx_9;
    int _offset_39;
    int _in_sigIdx__3;
    int _offset_40;
    int _offset_42;
    int _compIdx_10;
    int _offset_44;
    int _s_sigIdx__1;
    int _offset_46;
    int _compIdx_11;
    int _offset_48;
    int _left_sigIdx__1;
    int _compIdx_12;
    int _offset_50;
    int _out_sigIdx__2;
    int _offset_51;
    int _compIdx_13;
    int _offset_53;
    int _right_sigIdx__1;
    int _compIdx_14;
    int _offset_55;
    int _out_sigIdx__3;
    int _offset_56;
    int _compIdx_15;
    int _offset_62;
    int _hash_sigIdx__1;
    int _root_sigIdx_;
    Circom_Sizes _compSizes;
    Circom_Sizes _sigSizes_in;
    Circom_Sizes _compSizes_1;
    Circom_Sizes _sigSizes_in_1;
    Circom_Sizes _sigSizes_pathElements;
    Circom_Sizes _compSizes_2;
    Circom_Sizes _sigSizes_pathIndices;
    Circom_Sizes _compSizes_3;
    Circom_Sizes _compSizes_4;
    Circom_Sizes _sigSizes_out;
    Circom_Sizes _compSizes_5;
    Circom_Sizes _compSizes_6;
    Circom_Sizes _sigSizes_out_1;
    Circom_Sizes _compSizes_7;
    Circom_Sizes _sigSizes_in_2;
    Circom_Sizes _compSizes_8;
    Circom_Sizes _compSizes_9;
    Circom_Sizes _sigSizes_in_3;
    Circom_Sizes _compSizes_10;
    Circom_Sizes _compSizes_11;
    Circom_Sizes _compSizes_12;
    Circom_Sizes _sigSizes_out_2;
    Circom_Sizes _compSizes_13;
    Circom_Sizes _compSizes_14;
    Circom_Sizes _sigSizes_out_3;
    Circom_Sizes _compSizes_15;
    PFrElement _loopCond;
    PFrElement _ter;
    Fr_copy(&(_tmp_4[0]), ctx->circuit->constants +1);
    Fr_copy(&(i[0]), ctx->circuit->constants +1);
    _leaf_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x24ad84ada20208d5LL /* leaf */);
    _pathElements_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _pathIndices_sigIdx_ = ctx->getSignalOffset(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    _root_sigIdx_ = ctx->getSignalOffset(__cIdx, 0xa354fd1ff0c467c5LL /* root */);
    _sigSizes_pathElements = ctx->getSignalSizes(__cIdx, 0x4099e7b711de8b07LL /* pathElements */);
    _sigSizes_pathIndices = ctx->getSignalSizes(__cIdx, 0x6831dcf79ac686bbLL /* pathIndices */);
    /* signal input leaf */
    /* signal input pathElements[levels] */
    /* signal input pathIndices[levels] */
    /* signal output root */
    /* component selectors[levels] */
    /* component hashers[levels] */
    /* for (var i = 0;i < levels;i++) */
    /* selectors[i] = DualMux() */
    /* selectors[i].in[0] <== i == 0 ? leaf : hashers[i - 1].hash */
    _compIdx = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_6 = _compIdx;
    _in_sigIdx_ = ctx->getSignalOffset(_offset_6, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in = ctx->getSignalSizes(_offset_6, 0x08b73807b55c4bbeLL /* in */);
    _offset_7 = _in_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _leaf_sigIdx_, _sigValue, 1);
    ctx->setSignal(__cIdx, _offset_6, _offset_7, _sigValue);
    /* selectors[i].in[1] <== pathElements[i] */
    _compIdx_1 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_1 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_10 = _compIdx_1;
    _in_sigIdx__1 = ctx->getSignalOffset(_offset_10, 0x08b73807b55c4bbeLL /* in */);
    _sigSizes_in_1 = ctx->getSignalSizes(_offset_10, 0x08b73807b55c4bbeLL /* in */);
    _offset_11 = _in_sigIdx__1 + 1*_sigSizes_in_1[1];
    _offset_13 = _pathElements_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_13, _sigValue_1, 1);
    ctx->setSignal(__cIdx, _offset_10, _offset_11, _sigValue_1);
    /* selectors[i].s <== pathIndices[i] */
    _compIdx_2 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_2 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_15 = _compIdx_2;
    _s_sigIdx_ = ctx->getSignalOffset(_offset_15, 0xaf63ee4c86020b22LL /* s */);
    _offset_17 = _pathIndices_sigIdx_;
    ctx->multiGetSignal(__cIdx, __cIdx, _offset_17, _sigValue_2, 1);
    ctx->setSignal(__cIdx, _offset_15, _s_sigIdx_, _sigValue_2);
    /* hashers[i] = HashLeftRight() */
    /* hashers[i].left <== selectors[i].out[0] */
    _compIdx_3 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_3 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_19 = _compIdx_3;
    _left_sigIdx_ = ctx->getSignalOffset(_offset_19, 0x24b070ada2041cb0LL /* left */);
    _compIdx_4 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_4 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_21 = _compIdx_4;
    _out_sigIdx_ = ctx->getSignalOffset(_offset_21, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out = ctx->getSignalSizes(_offset_21, 0x19f79b1921bbcfffLL /* out */);
    _offset_22 = _out_sigIdx_;
    ctx->multiGetSignal(__cIdx, _offset_21, _offset_22, _sigValue_3, 1);
    ctx->setSignal(__cIdx, _offset_19, _left_sigIdx_, _sigValue_3);
    /* hashers[i].right <== selectors[i].out[1] */
    _compIdx_5 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_5 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_24 = _compIdx_5;
    _right_sigIdx_ = ctx->getSignalOffset(_offset_24, 0x76aaaa535714d805LL /* right */);
    _compIdx_6 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _compSizes_6 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
    _offset_26 = _compIdx_6;
    _out_sigIdx__1 = ctx->getSignalOffset(_offset_26, 0x19f79b1921bbcfffLL /* out */);
    _sigSizes_out_1 = ctx->getSignalSizes(_offset_26, 0x19f79b1921bbcfffLL /* out */);
    _offset_27 = _out_sigIdx__1 + 1*_sigSizes_out_1[1];
    ctx->multiGetSignal(__cIdx, _offset_26, _offset_27, _sigValue_4, 1);
    ctx->setSignal(__cIdx, _offset_24, _right_sigIdx_, _sigValue_4);
    _loopCond = _tmp_4;
    while (Fr_isTrue(_loopCond)) {
        /* selectors[i] = DualMux() */
        /* selectors[i].in[0] <== i == 0 ? leaf : hashers[i - 1].hash */
        _compIdx_7 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_7 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_33 = _compIdx_7 + Fr_toInt(i)*_compSizes_7[1];
        _in_sigIdx__2 = ctx->getSignalOffset(_offset_33, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_2 = ctx->getSignalSizes(_offset_33, 0x08b73807b55c4bbeLL /* in */);
        _offset_34 = _in_sigIdx__2;
        Fr_eq(_tmp_5, i, (ctx->circuit->constants + 0));
        if (Fr_isTrue(_tmp_5)) {
            ctx->multiGetSignal(__cIdx, __cIdx, _leaf_sigIdx_, _sigValue_5, 1);
            _ter = _sigValue_5;
        } else {
            _compIdx_8 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
            _compSizes_8 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
            Fr_sub(_tmp_6, i, (ctx->circuit->constants + 1));
            _offset_37 = _compIdx_8 + Fr_toInt(_tmp_6)*_compSizes_8[1];
            _hash_sigIdx_ = ctx->getSignalOffset(_offset_37, 0x2e3d9ecc741a7811LL /* hash */);
            ctx->multiGetSignal(__cIdx, _offset_37, _hash_sigIdx_, _sigValue_6, 1);
            _ter = _sigValue_6;
        }
        ctx->setSignal(__cIdx, _offset_33, _offset_34, _ter);
        /* selectors[i].in[1] <== pathElements[i] */
        _compIdx_9 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_9 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_39 = _compIdx_9 + Fr_toInt(i)*_compSizes_9[1];
        _in_sigIdx__3 = ctx->getSignalOffset(_offset_39, 0x08b73807b55c4bbeLL /* in */);
        _sigSizes_in_3 = ctx->getSignalSizes(_offset_39, 0x08b73807b55c4bbeLL /* in */);
        _offset_40 = _in_sigIdx__3 + 1*_sigSizes_in_3[1];
        _offset_42 = _pathElements_sigIdx_ + Fr_toInt(i)*_sigSizes_pathElements[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_42, _sigValue_7, 1);
        ctx->setSignal(__cIdx, _offset_39, _offset_40, _sigValue_7);
        /* selectors[i].s <== pathIndices[i] */
        _compIdx_10 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_10 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_44 = _compIdx_10 + Fr_toInt(i)*_compSizes_10[1];
        _s_sigIdx__1 = ctx->getSignalOffset(_offset_44, 0xaf63ee4c86020b22LL /* s */);
        _offset_46 = _pathIndices_sigIdx_ + Fr_toInt(i)*_sigSizes_pathIndices[1];
        ctx->multiGetSignal(__cIdx, __cIdx, _offset_46, _sigValue_8, 1);
        ctx->setSignal(__cIdx, _offset_44, _s_sigIdx__1, _sigValue_8);
        /* hashers[i] = HashLeftRight() */
        /* hashers[i].left <== selectors[i].out[0] */
        _compIdx_11 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _compSizes_11 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _offset_48 = _compIdx_11 + Fr_toInt(i)*_compSizes_11[1];
        _left_sigIdx__1 = ctx->getSignalOffset(_offset_48, 0x24b070ada2041cb0LL /* left */);
        _compIdx_12 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_12 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_50 = _compIdx_12 + Fr_toInt(i)*_compSizes_12[1];
        _out_sigIdx__2 = ctx->getSignalOffset(_offset_50, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_2 = ctx->getSignalSizes(_offset_50, 0x19f79b1921bbcfffLL /* out */);
        _offset_51 = _out_sigIdx__2;
        ctx->multiGetSignal(__cIdx, _offset_50, _offset_51, _sigValue_9, 1);
        ctx->setSignal(__cIdx, _offset_48, _left_sigIdx__1, _sigValue_9);
        /* hashers[i].right <== selectors[i].out[1] */
        _compIdx_13 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _compSizes_13 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
        _offset_53 = _compIdx_13 + Fr_toInt(i)*_compSizes_13[1];
        _right_sigIdx__1 = ctx->getSignalOffset(_offset_53, 0x76aaaa535714d805LL /* right */);
        _compIdx_14 = ctx->getSubComponentOffset(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _compSizes_14 = ctx->getSubComponentSizes(__cIdx, 0x3917971bcdc1da1dLL /* selectors */);
        _offset_55 = _compIdx_14 + Fr_toInt(i)*_compSizes_14[1];
        _out_sigIdx__3 = ctx->getSignalOffset(_offset_55, 0x19f79b1921bbcfffLL /* out */);
        _sigSizes_out_3 = ctx->getSignalSizes(_offset_55, 0x19f79b1921bbcfffLL /* out */);
        _offset_56 = _out_sigIdx__3 + 1*_sigSizes_out_3[1];
        ctx->multiGetSignal(__cIdx, _offset_55, _offset_56, _sigValue_10, 1);
        ctx->setSignal(__cIdx, _offset_53, _right_sigIdx__1, _sigValue_10);
        Fr_copyn(_tmp_8, i, 1);
        Fr_add(_tmp_7, i, (ctx->circuit->constants + 1));
        Fr_copyn(i, _tmp_7, 1);
        Fr_lt(_tmp_9, i, (ctx->circuit->constants + 4));
        _loopCond = _tmp_9;
    }
    /* root <== hashers[levels - 1].hash */
    _compIdx_15 = ctx->getSubComponentOffset(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _compSizes_15 = ctx->getSubComponentSizes(__cIdx, 0x608f328852c9c6fbLL /* hashers */);
    _offset_62 = _compIdx_15 + 18*_compSizes_15[1];
    _hash_sigIdx__1 = ctx->getSignalOffset(_offset_62, 0x2e3d9ecc741a7811LL /* hash */);
    ctx->multiGetSignal(__cIdx, _offset_62, _hash_sigIdx__1, _sigValue_11, 1);
    ctx->setSignal(__cIdx, __cIdx, _root_sigIdx_, _sigValue_11);
    ctx->finished(__cIdx);
}
// Function Table
Circom_ComponentFunction _functionTable[272] = {
     BatchTreeUpdate_342dddbbcb8dd32b
    ,TreeUpdateArgsHasher_25591825623df335
    ,Sha256_e0cb3c88fd67c5c8
    ,H_1a7c65ff7b2fe8c0
    ,H_1a7c66ff7b2fea73
    ,H_1a7c67ff7b2fec26
    ,H_1a7c68ff7b2fedd9
    ,H_1a7c69ff7b2fef8c
    ,H_1a7c6aff7b2ff13f
    ,H_1a7c6bff7b2ff2f2
    ,H_1a7c6cff7b2ff4a5
    ,Sha256compression_a10f2c6bd24bc76e
    ,Sha256compression_1a9baabf875686f4
    ,Sha256compression_bfab0304ba8448a7
    ,SigmaPlus_1ce04c18a56db1b4
    ,SmallSigma_0a95e0821fc1227f
    ,RotR_5ad724664528d8e9
    ,RotR_5ad72e664528e9e7
    ,ShR_7bc50a58f122c06c
    ,Xor3_4b2e690a6f02c670
    ,SmallSigma_ed4fe7283b65a77b
    ,RotR_9c4bea1ab7c5d15e
    ,RotR_5ad72d664528e834
    ,ShR_5b395cb7d179533a
    ,Xor3_a41687bbff0ef98f
    ,BinSum_759fd4ac955f303e
    ,K_287c64a495f9d70d
    ,K_287c63a495f9d55a
    ,K_287c62a495f9d3a7
    ,K_287c61a495f9d1f4
    ,K_287c60a495f9d041
    ,K_287c5fa495f9ce8e
    ,K_287c5ea495f9ccdb
    ,K_287c5da495f9cb28
    ,K_287c5ca495f9c975
    ,K_287c5ba495f9c7c2
    ,K_c532baaad785a31e
    ,K_c532bbaad785a4d1
    ,K_c532b8aad7859fb8
    ,K_c532b9aad785a16b
    ,K_c532beaad785a9ea
    ,K_c532bfaad785ab9d
    ,K_c532bcaad785a684
    ,K_c532bdaad785a837
    ,K_c532b2aad7859586
    ,K_c532b3aad7859739
    ,K_c52f34aad7828995
    ,K_c52f33aad78287e2
    ,K_c52f32aad782862f
    ,K_c52f31aad782847c
    ,K_c52f30aad78282c9
    ,K_c52f2faad7828116
    ,K_c52f2eaad7827f63
    ,K_c52f2daad7827db0
    ,K_c52f3caad782972d
    ,K_c52f3baad782957a
    ,K_c52baeaad77f700c
    ,K_c52bafaad77f71bf
    ,K_c52bb0aad77f7372
    ,K_c52bb1aad77f7525
    ,K_c52baaaad77f6940
    ,K_c52babaad77f6af3
    ,K_c52bacaad77f6ca6
    ,K_c52badaad77f6e59
    ,K_c52bb6aad77f7da4
    ,K_c52bb7aad77f7f57
    ,K_c528a8aad77d3003
    ,K_c528a7aad77d2e50
    ,K_c528aaaad77d3369
    ,K_c528a9aad77d31b6
    ,K_c528acaad77d36cf
    ,K_c528abaad77d351c
    ,K_c528aeaad77d3a35
    ,K_c528adaad77d3882
    ,K_c528b0aad77d3d9b
    ,K_c528afaad77d3be8
    ,K_c52542aad77a4cda
    ,K_c52543aad77a4e8d
    ,K_c52540aad77a4974
    ,K_c52541aad77a4b27
    ,K_c5253eaad77a460e
    ,K_c5253faad77a47c1
    ,K_c5253caad77a42a8
    ,K_c5253daad77a445b
    ,K_c5253aaad77a3f42
    ,K_c5253baad77a40f5
    ,K_c521bcaad7773351
    ,K_c521bbaad777319e
    ,K_c521baaad7772feb
    ,K_c521b9aad7772e38
    ,T1_f7baf7fc08f90fdd
    ,T1_e5f968f97a69591a
    ,T1_de3a8c8f515e9e56
    ,T1_f26a92e2cc6f62f0
    ,T1_ac98b238e51fb184
    ,T1_f3c3591736b11150
    ,T1_3f14deab1b5e247c
    ,T1_b5ffb79765a30644
    ,T1_53f22468f8f63ddc
    ,T1_e577f7209986e4df
    ,T1_598b5669d8ba71fa
    ,T1_cc19a6e8c0fb57c8
    ,T1_15fb22323ecefcb9
    ,T1_2db038350ce09580
    ,T1_2d9820618dbd5a39
    ,T1_e0b03662e154b6c7
    ,T1_017c438b68b2142c
    ,T1_ee907e7c6d065634
    ,T1_bc760b66d187db06
    ,T1_ed28e37b604d70eb
    ,T1_575b0510064aaa26
    ,T1_2561799bfbaa5209
    ,T1_41fff9c6f6feb886
    ,T1_4ca8930d33b9a40c
    ,T1_02898539f8d56720
    ,T1_5100a81c81664695
    ,T1_f69129e4b0f5f504
    ,T1_bf393c3dacaa58e1
    ,T1_632a7e83eed083a4
    ,T1_b76ed5c6149bd5fb
    ,T1_e57c3ae70b20efc9
    ,T1_066944439da8b839
    ,T1_4e08e9ddf93befdd
    ,T1_6c0d0d1694fa6a01
    ,T1_cf84c70702c35ee0
    ,T1_2d871f123fd949c7
    ,T1_7edfba8eb8c786e6
    ,T1_94d3cf294512b35d
    ,T1_89c1883ec1917e53
    ,T1_9ddb2e6cc8609a6b
    ,T1_84690c3be2ee9695
    ,T1_120873659e81098a
    ,T1_0f20a9e27f95149e
    ,T1_ca67810ece4fc41a
    ,T1_93f4a01d11e7872c
    ,T1_918281ebd0e946cd
    ,T1_23798a58f46eb137
    ,T1_a95af91132716c5e
    ,T1_800ec316d45df96e
    ,T1_236a82c6f755b144
    ,T1_3aa1900078ca95e9
    ,T1_9caf81e3535b2842
    ,T1_ae0cda1bbddcf65a
    ,T1_40797bb88411d4ed
    ,T1_6dbf94dd961c0c50
    ,T1_a471085107c1a1dd
    ,T1_85730134c47c3959
    ,T1_b756695fd7b93e18
    ,T1_b53112bd9c5cd799
    ,T1_0a4fa791f9724012
    ,T1_98aa22bf9feb27c0
    ,T1_0db6ea001063a22f
    ,T1_f3e900e3ce9a0a29
    ,T1_80edd5314209decf
    ,Ch_f12ac567294f268c
    ,BigSigma_ce08158f12f8ca02
    ,RotR_9c4beb1ab7c5d311
    ,RotR_5ad726664528dc4f
    ,RotR_5ae1326645314538
    ,Xor3_37e328446dad7003
    ,BinSum_759fd5ac955f31f1
    ,T2_0934fe07b5c72e43
    ,BigSigma_5aced577deb57d11
    ,RotR_9c4bef1ab7c5d9dd
    ,RotR_5ad728664528dfb5
    ,RotR_5ae139664531511d
    ,Maj_a3eb3d9b89a89987
    ,BinSum_759fd6ac955f33a4
    ,Num2Bits_strict_5667b5c710c0be5d
    ,AliasCheck_dc94d6e8b30bc9b9
    ,CompConstant_ab0948fd0154cd18
    ,Num2Bits_7adcb47f7f5c5e61
    ,Num2Bits_615aba7f710c88d1
    ,Num2Bits_985f49a0f4806f03
    ,Num2Bits_7aedb57f7f6ad347
    ,Bits2Num_899ed94a4edec2a3
    ,Poseidon_9ccc1ced8977bb8d
    ,Ark_6eee3b8e9943332b
    ,Ark_c1166759a9ab0d04
    ,Ark_8991eab164fcfa90
    ,Ark_6e633432f124f04d
    ,Ark_775a978526bf2679
    ,Ark_fa4ef926521169e8
    ,Ark_cdc17bf549cf5d04
    ,Ark_963cff4d05214a90
    ,Ark_f0269ceab640c84f
    ,Ark_fc8a2a1723ee4263
    ,Ark_bfbf52c4be8e52a6
    ,Ark_c1bf5ee9c560e05a
    ,Ark_59fa78eb702cd52e
    ,Ark_f883382ee4f4e161
    ,Ark_31bb14d72b152b75
    ,Ark_63a59857b0cfd1cc
    ,Ark_6758947cb913d8d0
    ,Ark_48581129e5c09644
    ,Ark_2e25b1f2f8eb4573
    ,Ark_769424c1a1cd8bdf
    ,Ark_f35ae6c59a5de36a
    ,Ark_efa85aa0921a9ab6
    ,Ark_0cf56df363fb8a72
    ,Ark_0a32077456eb6885
    ,Ark_d0fa2acc10cb1e71
    ,Ark_cb1fbd10a3d0ab73
    ,Ark_138e2fdf4cb2f1df
    ,Ark_51054336b9288f9b
    ,Ark_1f698c1ae9f527f8
    ,Ark_9c570eeec9b1c614
    ,Ark_1454a2a2d1a48c79
    ,Ark_0b5d3f509c0a564d
    ,Ark_6594bb70bc4ed8d1
    ,Ark_4b0afe9cf77defd2
    ,Ark_1e7d916bef3bfe1e
    ,Ark_52ed6c469bb24807
    ,Ark_cb9bd86b5519c8db
    ,Ark_8e24c513e8a42b1f
    ,Ark_3088ab512f417fdc
    ,Ark_343b27763784ad60
    ,Ark_937dc7278908ae5d
    ,Ark_45f02a7ea6a18f89
    ,Sigma_9bc213b5a2a7f9f4
    ,Mix_f1207daf3832498e
    ,TreeLayer_dbbe2ca561ae678a
    ,HashLeftRight_2b8ed6ec8aee9b86
    ,Poseidon_9ccc1bed8977b9da
    ,Ark_cc0aa8b2d72dc5b7
    ,Ark_83afb926fdd00fdc
    ,Ark_2d2b2f1c2ba342f3
    ,Ark_3b2b0fc1466cfe46
    ,Ark_f247c81d2d1c108c
    ,Ark_6dcd2b19b6048525
    ,Ark_a9c39eb775b9d876
    ,Ark_a2debec1717655a6
    ,Ark_2332c4f81824e4ad
    ,Ark_75db559d59a3f010
    ,Ark_56e49ccffcab6b68
    ,Ark_db616b1ebb2e23c5
    ,Ark_dc2005ef2df0ba7e
    ,Ark_efbcf6e9967b3b3b
    ,Ark_e2d06fc35d97fccd
    ,Ark_54792bbb7269b534
    ,Ark_acb488e2b5929bf3
    ,Ark_57488fbe67036b3d
    ,Ark_d8a80987c1c74a36
    ,Ark_03df9d8aed1d283f
    ,Ark_37004347de366d45
    ,Ark_b28374f91fb3b4e8
    ,Ark_e3977114645060a7
    ,Ark_2a884c16f50987c2
    ,Ark_55b27e184263f6ee
    ,Ark_82e9f640748c1eb3
    ,Ark_2aae9919316337f4
    ,Ark_cc5823e4856a83a4
    ,Ark_617e79d916f7f1db
    ,Ark_40aa76dd527d1b62
    ,Ark_fe7d96ea947e9f26
    ,Ark_29b5aaedbfd556af
    ,Ark_d17a2dc67cac3990
    ,Ark_c0881f27cdf87eb9
    ,Ark_99df33514fc403fc
    ,Ark_13b1964dd73ae415
    ,Ark_f92289f07eee08e6
    ,Ark_cdf4fe179ea28a8c
    ,Ark_7770f40ccc769723
    ,Ark_c134700952438fca
    ,Ark_a709f2c5779d53d8
    ,Ark_2b8741143620e5b5
    ,Mix_9f6491335b73d2d1
    ,MerkleTreeUpdater_4dbaf16862f9d2f8
    ,Num2Bits_9865cea0f485bcb0
    ,RawMerkleTree_bc9db1428450b065
    ,DualMux_a448c86263b37a53
    ,RawMerkleTree_9986001828573ddd
};
